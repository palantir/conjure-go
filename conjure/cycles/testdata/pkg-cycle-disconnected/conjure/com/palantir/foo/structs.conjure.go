// This file was generated by Conjure and should not be manually edited.

package foo

import (
	"github.com/palantir/conjure-go/v6/conjure/cycles/testdata/pkg-cycle-disconnected/conjure/com/palantir/fizz"
	"github.com/palantir/pkg/safejson"
	"github.com/palantir/pkg/safeyaml"
)

type Type4 struct {
	Field1 Type2 `json:"field1"`
}

func (o Type4) MarshalJSON() ([]byte, error) {
	if o.Field1 == nil {
		o.Field1 = make(map[fizz.Type1]int, 0)
	}
	type Type4Alias Type4
	return safejson.Marshal(Type4Alias(o))
}

func (o *Type4) UnmarshalJSON(data []byte) error {
	type Type4Alias Type4
	var rawType4 Type4Alias
	if err := safejson.Unmarshal(data, &rawType4); err != nil {
		return err
	}
	if rawType4.Field1 == nil {
		rawType4.Field1 = make(map[fizz.Type1]int, 0)
	}
	*o = Type4(rawType4)
	return nil
}

func (o Type4) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *Type4) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}
