// This file was generated by Conjure and should not be manually edited.

package api

import (
	"strings"
)

type Months struct {
	val Months_Value
}

type Months_Value string

const (
	Months_JANUARY      Months_Value = "JANUARY"
	Months_MULTI_MONTHS Months_Value = "MULTI_MONTHS"
	Months_UNKNOWN      Months_Value = "UNKNOWN"
)

// Months_Values returns all known variants of Months.
func Months_Values() []Months_Value {
	return []Months_Value{Months_JANUARY, Months_MULTI_MONTHS}
}

func New_Months(value Months_Value) Months {
	return Months{val: value}
}

// IsUnknown returns false for all known variants of Months and true otherwise.
func (e Months) IsUnknown() bool {
	switch e.val {
	case Months_JANUARY, Months_MULTI_MONTHS:
		return false
	}
	return true
}

func (e Months) Value() Months_Value {
	if e.IsUnknown() {
		return Months_UNKNOWN
	}
	return e.val
}

func (e Months) String() string {
	return string(e.val)
}

func (e Months) MarshalText() ([]byte, error) {
	return []byte(e.val), nil
}

func (e *Months) UnmarshalText(data []byte) error {
	switch v := strings.ToUpper(string(data)); v {
	default:
		*e = New_Months(Months_Value(v))
	case "JANUARY":
		*e = New_Months(Months_JANUARY)
	case "MULTI_MONTHS":
		*e = New_Months(Months_MULTI_MONTHS)
	}
	return nil
}

type Days struct {
	val Days_Value
}

type Days_Value string

const (
	Days_FRIDAY   Days_Value = "FRIDAY"
	Days_SATURDAY Days_Value = "SATURDAY"
	Days_UNKNOWN  Days_Value = "UNKNOWN"
)

// Days_Values returns all known variants of Days.
func Days_Values() []Days_Value {
	return []Days_Value{Days_FRIDAY, Days_SATURDAY}
}

func New_Days(value Days_Value) Days {
	return Days{val: value}
}

// IsUnknown returns false for all known variants of Days and true otherwise.
func (e Days) IsUnknown() bool {
	switch e.val {
	case Days_FRIDAY, Days_SATURDAY:
		return false
	}
	return true
}

func (e Days) Value() Days_Value {
	if e.IsUnknown() {
		return Days_UNKNOWN
	}
	return e.val
}

func (e Days) String() string {
	return string(e.val)
}

func (e Days) MarshalText() ([]byte, error) {
	return []byte(e.val), nil
}

func (e *Days) UnmarshalText(data []byte) error {
	switch v := strings.ToUpper(string(data)); v {
	default:
		*e = New_Days(Days_Value(v))
	case "FRIDAY":
		*e = New_Days(Days_FRIDAY)
	case "SATURDAY":
		*e = New_Days(Days_SATURDAY)
	}
	return nil
}
