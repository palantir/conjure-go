// This file was generated by Conjure and should not be manually edited.

package api

import (
	"context"
	"fmt"

	"github.com/palantir/conjure-go-runtime/v2/conjure-go-client/httpclient"
	"github.com/palantir/conjure-go/v6/conjure/conjure-go-TestGenerate434343117/case-3-405122641/foundry/catalog/api/datasets"
	"github.com/palantir/pkg/bearertoken"
)

// A Markdown description of the service.
type TestServiceClient interface {
	// Returns a mapping from file system id to backing file system configuration.
	GetFileSystems(ctx context.Context, authHeader bearertoken.Token) (map[string]datasets.BackingFileSystem, error)
}

type testServiceClient struct {
	client httpclient.Client
}

func NewTestServiceClient(client httpclient.Client) TestServiceClient {
	return &testServiceClient{client: client}
}

func (c *testServiceClient) GetFileSystems(ctx context.Context, authHeader bearertoken.Token) (map[string]datasets.BackingFileSystem, error) {
	var returnVal map[string]datasets.BackingFileSystem
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("GetFileSystems"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithHeader("Authorization", fmt.Sprint("Bearer ", authHeader)))
	requestParams = append(requestParams, httpclient.WithPathf("/catalog/fileSystems"))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return returnVal, err
	}
	_ = resp
	if returnVal == nil {
		returnVal = make(map[string]datasets.BackingFileSystem, 0)
	}
	return returnVal, nil
}

// A Markdown description of the service.
type TestServiceClientWithAuth interface {
	// Returns a mapping from file system id to backing file system configuration.
	GetFileSystems(ctx context.Context) (map[string]datasets.BackingFileSystem, error)
}

func NewTestServiceClientWithAuth(client TestServiceClient, authHeader bearertoken.Token) TestServiceClientWithAuth {
	return &testServiceClientWithAuth{client: client, authHeader: authHeader}
}

type testServiceClientWithAuth struct {
	client     TestServiceClient
	authHeader bearertoken.Token
}

func (c *testServiceClientWithAuth) GetFileSystems(ctx context.Context) (map[string]datasets.BackingFileSystem, error) {
	return c.client.GetFileSystems(ctx, c.authHeader)
}

func NewTestServiceClientWithTokenProvider(client TestServiceClient, tokenProvider httpclient.TokenProvider) TestServiceClientWithAuth {
	return &testServiceClientWithTokenProvider{client: client, tokenProvider: tokenProvider}
}

type testServiceClientWithTokenProvider struct {
	client        TestServiceClient
	tokenProvider httpclient.TokenProvider
}

func (c *testServiceClientWithTokenProvider) GetFileSystems(ctx context.Context) (map[string]datasets.BackingFileSystem, error) {
	var defaultReturnVal map[string]datasets.BackingFileSystem
	token, err := c.tokenProvider(ctx)
	if err != nil {
		return defaultReturnVal, err
	}
	return c.client.GetFileSystems(ctx, bearertoken.Token(token))
}
