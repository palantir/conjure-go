// This file was generated by Conjure and should not be manually edited.

package datasets

import (
	"github.com/palantir/conjure-go/v6/conjure/conjure-go-TestGenerate434343117/case-0-685326280/example/api"
	api_1 "github.com/palantir/conjure-go/v6/conjure/conjure-go-TestGenerate434343117/case-0-685326280/test/api"
	"github.com/palantir/go-palantir/httpclient"
	"github.com/palantir/pkg/datetime"
	"github.com/palantir/pkg/rid"
	"github.com/palantir/pkg/safejson"
	"github.com/palantir/pkg/safelong"
	"github.com/palantir/pkg/safeyaml"
)

// Optional Docs
type BackingFileSystem struct {
	// The name by which this file system is identified.
	FileSystemId string                 `json:"fileSystemId" conjure-docs:"The name by which this file system is identified."`
	BaseUri      string                 `json:"baseUri"`
	Exenum       api.ExampleEnumeration `json:"exenum"`
	Client       httpclient.RESTClient  `json:"client"`
}

func (o BackingFileSystem) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *BackingFileSystem) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}

type TestType struct {
	Alias    api_1.ExampleAlias     `json:"alias"`
	Rid      rid.ResourceIdentifier `json:"rid"`
	LargeInt safelong.SafeLong      `json:"large_int"`
	Time     datetime.DateTime      `json:"time"`
	Bytes    []byte                 `json:"bytes"`
}

func (o TestType) MarshalJSON() ([]byte, error) {
	if o.Bytes == nil {
		o.Bytes = make([]byte, 0)
	}
	type TestTypeAlias TestType
	return safejson.Marshal(TestTypeAlias(o))
}

func (o *TestType) UnmarshalJSON(data []byte) error {
	type TestTypeAlias TestType
	var rawTestType TestTypeAlias
	if err := safejson.Unmarshal(data, &rawTestType); err != nil {
		return err
	}
	if rawTestType.Bytes == nil {
		rawTestType.Bytes = make([]byte, 0)
	}
	*o = TestType(rawTestType)
	return nil
}

func (o TestType) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *TestType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}
