// This file was generated by Conjure and should not be manually edited.

package api

import (
	"strings"
)

type ExampleEnumeration struct {
	val ExampleEnumeration_Value
}

type ExampleEnumeration_Value string

const (
	ExampleEnumeration_A       ExampleEnumeration_Value = "A"
	ExampleEnumeration_B       ExampleEnumeration_Value = "B"
	ExampleEnumeration_UNKNOWN ExampleEnumeration_Value = "UNKNOWN"
)

// ExampleEnumeration_Values returns all known variants of ExampleEnumeration.
func ExampleEnumeration_Values() []ExampleEnumeration_Value {
	return []ExampleEnumeration_Value{ExampleEnumeration_A, ExampleEnumeration_B}
}

func New_ExampleEnumeration(value ExampleEnumeration_Value) ExampleEnumeration {
	return ExampleEnumeration{val: value}
}

// IsUnknown returns false for all known variants of ExampleEnumeration and true otherwise.
func (e ExampleEnumeration) IsUnknown() bool {
	switch e.val {
	case ExampleEnumeration_A, ExampleEnumeration_B:
		return false
	}
	return true
}

func (e ExampleEnumeration) Value() ExampleEnumeration_Value {
	if e.IsUnknown() {
		return ExampleEnumeration_UNKNOWN
	}
	return e.val
}

func (e ExampleEnumeration) String() string {
	return string(e.val)
}

func (e ExampleEnumeration) MarshalText() ([]byte, error) {
	return []byte(e.val), nil
}

func (e *ExampleEnumeration) UnmarshalText(data []byte) error {
	switch v := strings.ToUpper(string(data)); v {
	default:
		*e = New_ExampleEnumeration(ExampleEnumeration_Value(v))
	case "A":
		*e = New_ExampleEnumeration(ExampleEnumeration_A)
	case "B":
		*e = New_ExampleEnumeration(ExampleEnumeration_B)
	}
	return nil
}
