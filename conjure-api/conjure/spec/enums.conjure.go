// This file was generated by Conjure and should not be manually edited.

package spec

import (
	"regexp"
	"strings"

	"github.com/palantir/conjure-go-runtime/v2/conjure-go-contract/errors"
	werror "github.com/palantir/witchcraft-go-error"
	wparams "github.com/palantir/witchcraft-go-params"
)

var enumValuePattern = regexp.MustCompile("^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$")

type ErrorCode struct {
	val ErrorCodeValue
}

type ErrorCodeValue string

const (
	ErrorCodePermissionDenied      ErrorCodeValue = "PERMISSION_DENIED"
	ErrorCodeInvalidArgument       ErrorCodeValue = "INVALID_ARGUMENT"
	ErrorCodeNotFound              ErrorCodeValue = "NOT_FOUND"
	ErrorCodeConflict              ErrorCodeValue = "CONFLICT"
	ErrorCodeRequestEntityTooLarge ErrorCodeValue = "REQUEST_ENTITY_TOO_LARGE"
	ErrorCodeFailedPrecondition    ErrorCodeValue = "FAILED_PRECONDITION"
	ErrorCodeInternal              ErrorCodeValue = "INTERNAL"
	ErrorCodeTimeout               ErrorCodeValue = "TIMEOUT"
	ErrorCodeCustomClient          ErrorCodeValue = "CUSTOM_CLIENT"
	ErrorCodeCustomServer          ErrorCodeValue = "CUSTOM_SERVER"
	ErrorCodeUnknown               ErrorCodeValue = "UNKNOWN"
)

// ErrorCode_Values returns all known variants of ErrorCode.
func ErrorCode_Values() []ErrorCodeValue {
	return []ErrorCodeValue{ErrorCodePermissionDenied, ErrorCodeInvalidArgument, ErrorCodeNotFound, ErrorCodeConflict, ErrorCodeRequestEntityTooLarge, ErrorCodeFailedPrecondition, ErrorCodeInternal, ErrorCodeTimeout, ErrorCodeCustomClient, ErrorCodeCustomServer}
}

func NewErrorCode(value ErrorCodeValue) ErrorCode {
	return ErrorCode{val: value}
}

// IsUnknown returns false for all known variants of ErrorCode and true otherwise.
func (e ErrorCode) IsUnknown() bool {
	switch e.val {
	case ErrorCodePermissionDenied, ErrorCodeInvalidArgument, ErrorCodeNotFound, ErrorCodeConflict, ErrorCodeRequestEntityTooLarge, ErrorCodeFailedPrecondition, ErrorCodeInternal, ErrorCodeTimeout, ErrorCodeCustomClient, ErrorCodeCustomServer:
		return false
	}
	return true
}

func (e ErrorCode) Value() ErrorCodeValue {
	if e.IsUnknown() {
		return ErrorCodeUnknown
	}
	return e.val
}

func (e ErrorCode) String() string {
	return string(e.val)
}

func (e ErrorCode) MarshalText() ([]byte, error) {
	return []byte(e.val), nil
}

func (e *ErrorCode) UnmarshalText(data []byte) error {
	switch v := strings.ToUpper(string(data)); v {
	default:
		if !enumValuePattern.MatchString(v) {
			return werror.Convert(errors.NewInvalidArgument(wparams.NewSafeAndUnsafeParamStorer(map[string]interface{}{"enumType": "ErrorCode", "message": "enum value must match pattern ^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"}, map[string]interface{}{"enumValue": string(data)})))
		}
		*e = NewErrorCode(ErrorCodeValue(v))
	case "PERMISSION_DENIED":
		*e = NewErrorCode(ErrorCodePermissionDenied)
	case "INVALID_ARGUMENT":
		*e = NewErrorCode(ErrorCodeInvalidArgument)
	case "NOT_FOUND":
		*e = NewErrorCode(ErrorCodeNotFound)
	case "CONFLICT":
		*e = NewErrorCode(ErrorCodeConflict)
	case "REQUEST_ENTITY_TOO_LARGE":
		*e = NewErrorCode(ErrorCodeRequestEntityTooLarge)
	case "FAILED_PRECONDITION":
		*e = NewErrorCode(ErrorCodeFailedPrecondition)
	case "INTERNAL":
		*e = NewErrorCode(ErrorCodeInternal)
	case "TIMEOUT":
		*e = NewErrorCode(ErrorCodeTimeout)
	case "CUSTOM_CLIENT":
		*e = NewErrorCode(ErrorCodeCustomClient)
	case "CUSTOM_SERVER":
		*e = NewErrorCode(ErrorCodeCustomServer)
	}
	return nil
}

type HttpMethod struct {
	val HttpMethodValue
}

type HttpMethodValue string

const (
	HttpMethodGet     HttpMethodValue = "GET"
	HttpMethodPost    HttpMethodValue = "POST"
	HttpMethodPut     HttpMethodValue = "PUT"
	HttpMethodDelete  HttpMethodValue = "DELETE"
	HttpMethodUnknown HttpMethodValue = "UNKNOWN"
)

// HttpMethod_Values returns all known variants of HttpMethod.
func HttpMethod_Values() []HttpMethodValue {
	return []HttpMethodValue{HttpMethodGet, HttpMethodPost, HttpMethodPut, HttpMethodDelete}
}

func NewHttpMethod(value HttpMethodValue) HttpMethod {
	return HttpMethod{val: value}
}

// IsUnknown returns false for all known variants of HttpMethod and true otherwise.
func (e HttpMethod) IsUnknown() bool {
	switch e.val {
	case HttpMethodGet, HttpMethodPost, HttpMethodPut, HttpMethodDelete:
		return false
	}
	return true
}

func (e HttpMethod) Value() HttpMethodValue {
	if e.IsUnknown() {
		return HttpMethodUnknown
	}
	return e.val
}

func (e HttpMethod) String() string {
	return string(e.val)
}

func (e HttpMethod) MarshalText() ([]byte, error) {
	return []byte(e.val), nil
}

func (e *HttpMethod) UnmarshalText(data []byte) error {
	switch v := strings.ToUpper(string(data)); v {
	default:
		if !enumValuePattern.MatchString(v) {
			return werror.Convert(errors.NewInvalidArgument(wparams.NewSafeAndUnsafeParamStorer(map[string]interface{}{"enumType": "HttpMethod", "message": "enum value must match pattern ^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"}, map[string]interface{}{"enumValue": string(data)})))
		}
		*e = NewHttpMethod(HttpMethodValue(v))
	case "GET":
		*e = NewHttpMethod(HttpMethodGet)
	case "POST":
		*e = NewHttpMethod(HttpMethodPost)
	case "PUT":
		*e = NewHttpMethod(HttpMethodPut)
	case "DELETE":
		*e = NewHttpMethod(HttpMethodDelete)
	}
	return nil
}

type PrimitiveType struct {
	val PrimitiveTypeValue
}

type PrimitiveTypeValue string

const (
	PrimitiveTypeString      PrimitiveTypeValue = "STRING"
	PrimitiveTypeDatetime    PrimitiveTypeValue = "DATETIME"
	PrimitiveTypeInteger     PrimitiveTypeValue = "INTEGER"
	PrimitiveTypeDouble      PrimitiveTypeValue = "DOUBLE"
	PrimitiveTypeSafelong    PrimitiveTypeValue = "SAFELONG"
	PrimitiveTypeBinary      PrimitiveTypeValue = "BINARY"
	PrimitiveTypeAny         PrimitiveTypeValue = "ANY"
	PrimitiveTypeBoolean     PrimitiveTypeValue = "BOOLEAN"
	PrimitiveTypeUuid        PrimitiveTypeValue = "UUID"
	PrimitiveTypeRid         PrimitiveTypeValue = "RID"
	PrimitiveTypeBearertoken PrimitiveTypeValue = "BEARERTOKEN"
	PrimitiveTypeUnknown     PrimitiveTypeValue = "UNKNOWN"
)

// PrimitiveType_Values returns all known variants of PrimitiveType.
func PrimitiveType_Values() []PrimitiveTypeValue {
	return []PrimitiveTypeValue{PrimitiveTypeString, PrimitiveTypeDatetime, PrimitiveTypeInteger, PrimitiveTypeDouble, PrimitiveTypeSafelong, PrimitiveTypeBinary, PrimitiveTypeAny, PrimitiveTypeBoolean, PrimitiveTypeUuid, PrimitiveTypeRid, PrimitiveTypeBearertoken}
}

func NewPrimitiveType(value PrimitiveTypeValue) PrimitiveType {
	return PrimitiveType{val: value}
}

// IsUnknown returns false for all known variants of PrimitiveType and true otherwise.
func (e PrimitiveType) IsUnknown() bool {
	switch e.val {
	case PrimitiveTypeString, PrimitiveTypeDatetime, PrimitiveTypeInteger, PrimitiveTypeDouble, PrimitiveTypeSafelong, PrimitiveTypeBinary, PrimitiveTypeAny, PrimitiveTypeBoolean, PrimitiveTypeUuid, PrimitiveTypeRid, PrimitiveTypeBearertoken:
		return false
	}
	return true
}

func (e PrimitiveType) Value() PrimitiveTypeValue {
	if e.IsUnknown() {
		return PrimitiveTypeUnknown
	}
	return e.val
}

func (e PrimitiveType) String() string {
	return string(e.val)
}

func (e PrimitiveType) MarshalText() ([]byte, error) {
	return []byte(e.val), nil
}

func (e *PrimitiveType) UnmarshalText(data []byte) error {
	switch v := strings.ToUpper(string(data)); v {
	default:
		if !enumValuePattern.MatchString(v) {
			return werror.Convert(errors.NewInvalidArgument(wparams.NewSafeAndUnsafeParamStorer(map[string]interface{}{"enumType": "PrimitiveType", "message": "enum value must match pattern ^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"}, map[string]interface{}{"enumValue": string(data)})))
		}
		*e = NewPrimitiveType(PrimitiveTypeValue(v))
	case "STRING":
		*e = NewPrimitiveType(PrimitiveTypeString)
	case "DATETIME":
		*e = NewPrimitiveType(PrimitiveTypeDatetime)
	case "INTEGER":
		*e = NewPrimitiveType(PrimitiveTypeInteger)
	case "DOUBLE":
		*e = NewPrimitiveType(PrimitiveTypeDouble)
	case "SAFELONG":
		*e = NewPrimitiveType(PrimitiveTypeSafelong)
	case "BINARY":
		*e = NewPrimitiveType(PrimitiveTypeBinary)
	case "ANY":
		*e = NewPrimitiveType(PrimitiveTypeAny)
	case "BOOLEAN":
		*e = NewPrimitiveType(PrimitiveTypeBoolean)
	case "UUID":
		*e = NewPrimitiveType(PrimitiveTypeUuid)
	case "RID":
		*e = NewPrimitiveType(PrimitiveTypeRid)
	case "BEARERTOKEN":
		*e = NewPrimitiveType(PrimitiveTypeBearertoken)
	}
	return nil
}
