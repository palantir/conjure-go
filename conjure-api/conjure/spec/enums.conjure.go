// This file was generated by Conjure and should not be manually edited.

package spec

import (
	"regexp"
	"strings"

	"github.com/palantir/conjure-go-runtime/v2/conjure-go-contract/errors"
	werror "github.com/palantir/witchcraft-go-error"
	wparams "github.com/palantir/witchcraft-go-params"
)

var enumValuePattern = regexp.MustCompile("^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$")

type ErrorCode struct {
	val ErrorCode_Value
}

type ErrorCode_Value string

const (
	ErrorCode_PERMISSION_DENIED        ErrorCode_Value = "PERMISSION_DENIED"
	ErrorCode_INVALID_ARGUMENT         ErrorCode_Value = "INVALID_ARGUMENT"
	ErrorCode_NOT_FOUND                ErrorCode_Value = "NOT_FOUND"
	ErrorCode_CONFLICT                 ErrorCode_Value = "CONFLICT"
	ErrorCode_REQUEST_ENTITY_TOO_LARGE ErrorCode_Value = "REQUEST_ENTITY_TOO_LARGE"
	ErrorCode_FAILED_PRECONDITION      ErrorCode_Value = "FAILED_PRECONDITION"
	ErrorCode_INTERNAL                 ErrorCode_Value = "INTERNAL"
	ErrorCode_TIMEOUT                  ErrorCode_Value = "TIMEOUT"
	ErrorCode_CUSTOM_CLIENT            ErrorCode_Value = "CUSTOM_CLIENT"
	ErrorCode_CUSTOM_SERVER            ErrorCode_Value = "CUSTOM_SERVER"
	ErrorCode_UNKNOWN                  ErrorCode_Value = "UNKNOWN"
)

// ErrorCode_Values returns all known variants of ErrorCode.
func ErrorCode_Values() []ErrorCode_Value {
	return []ErrorCode_Value{ErrorCode_PERMISSION_DENIED, ErrorCode_INVALID_ARGUMENT, ErrorCode_NOT_FOUND, ErrorCode_CONFLICT, ErrorCode_REQUEST_ENTITY_TOO_LARGE, ErrorCode_FAILED_PRECONDITION, ErrorCode_INTERNAL, ErrorCode_TIMEOUT, ErrorCode_CUSTOM_CLIENT, ErrorCode_CUSTOM_SERVER}
}

func New_ErrorCode(value ErrorCode_Value) ErrorCode {
	return ErrorCode{val: value}
}

// IsUnknown returns false for all known variants of ErrorCode and true otherwise.
func (e ErrorCode) IsUnknown() bool {
	switch e.val {
	case ErrorCode_PERMISSION_DENIED, ErrorCode_INVALID_ARGUMENT, ErrorCode_NOT_FOUND, ErrorCode_CONFLICT, ErrorCode_REQUEST_ENTITY_TOO_LARGE, ErrorCode_FAILED_PRECONDITION, ErrorCode_INTERNAL, ErrorCode_TIMEOUT, ErrorCode_CUSTOM_CLIENT, ErrorCode_CUSTOM_SERVER:
		return false
	}
	return true
}

func (e ErrorCode) Value() ErrorCode_Value {
	if e.IsUnknown() {
		return ErrorCode_UNKNOWN
	}
	return e.val
}

func (e ErrorCode) String() string {
	return string(e.val)
}

func (e ErrorCode) MarshalText() ([]byte, error) {
	return []byte(e.val), nil
}

func (e *ErrorCode) UnmarshalText(data []byte) error {
	switch v := strings.ToUpper(string(data)); v {
	default:
		if !enumValuePattern.MatchString(v) {
			return werror.Convert(errors.NewInvalidArgument(wparams.NewSafeAndUnsafeParamStorer(map[string]interface{}{"enumType": "ErrorCode", "message": "enum value must match pattern ^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"}, map[string]interface{}{"enumValue": string(data)})))
		}
		*e = New_ErrorCode(ErrorCode_Value(v))
	case "PERMISSION_DENIED":
		*e = New_ErrorCode(ErrorCode_PERMISSION_DENIED)
	case "INVALID_ARGUMENT":
		*e = New_ErrorCode(ErrorCode_INVALID_ARGUMENT)
	case "NOT_FOUND":
		*e = New_ErrorCode(ErrorCode_NOT_FOUND)
	case "CONFLICT":
		*e = New_ErrorCode(ErrorCode_CONFLICT)
	case "REQUEST_ENTITY_TOO_LARGE":
		*e = New_ErrorCode(ErrorCode_REQUEST_ENTITY_TOO_LARGE)
	case "FAILED_PRECONDITION":
		*e = New_ErrorCode(ErrorCode_FAILED_PRECONDITION)
	case "INTERNAL":
		*e = New_ErrorCode(ErrorCode_INTERNAL)
	case "TIMEOUT":
		*e = New_ErrorCode(ErrorCode_TIMEOUT)
	case "CUSTOM_CLIENT":
		*e = New_ErrorCode(ErrorCode_CUSTOM_CLIENT)
	case "CUSTOM_SERVER":
		*e = New_ErrorCode(ErrorCode_CUSTOM_SERVER)
	}
	return nil
}

type HttpMethod struct {
	val HttpMethod_Value
}

type HttpMethod_Value string

const (
	HttpMethod_GET     HttpMethod_Value = "GET"
	HttpMethod_POST    HttpMethod_Value = "POST"
	HttpMethod_PUT     HttpMethod_Value = "PUT"
	HttpMethod_DELETE  HttpMethod_Value = "DELETE"
	HttpMethod_UNKNOWN HttpMethod_Value = "UNKNOWN"
)

// HttpMethod_Values returns all known variants of HttpMethod.
func HttpMethod_Values() []HttpMethod_Value {
	return []HttpMethod_Value{HttpMethod_GET, HttpMethod_POST, HttpMethod_PUT, HttpMethod_DELETE}
}

func New_HttpMethod(value HttpMethod_Value) HttpMethod {
	return HttpMethod{val: value}
}

// IsUnknown returns false for all known variants of HttpMethod and true otherwise.
func (e HttpMethod) IsUnknown() bool {
	switch e.val {
	case HttpMethod_GET, HttpMethod_POST, HttpMethod_PUT, HttpMethod_DELETE:
		return false
	}
	return true
}

func (e HttpMethod) Value() HttpMethod_Value {
	if e.IsUnknown() {
		return HttpMethod_UNKNOWN
	}
	return e.val
}

func (e HttpMethod) String() string {
	return string(e.val)
}

func (e HttpMethod) MarshalText() ([]byte, error) {
	return []byte(e.val), nil
}

func (e *HttpMethod) UnmarshalText(data []byte) error {
	switch v := strings.ToUpper(string(data)); v {
	default:
		if !enumValuePattern.MatchString(v) {
			return werror.Convert(errors.NewInvalidArgument(wparams.NewSafeAndUnsafeParamStorer(map[string]interface{}{"enumType": "HttpMethod", "message": "enum value must match pattern ^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"}, map[string]interface{}{"enumValue": string(data)})))
		}
		*e = New_HttpMethod(HttpMethod_Value(v))
	case "GET":
		*e = New_HttpMethod(HttpMethod_GET)
	case "POST":
		*e = New_HttpMethod(HttpMethod_POST)
	case "PUT":
		*e = New_HttpMethod(HttpMethod_PUT)
	case "DELETE":
		*e = New_HttpMethod(HttpMethod_DELETE)
	}
	return nil
}

type PrimitiveType struct {
	val PrimitiveType_Value
}

type PrimitiveType_Value string

const (
	PrimitiveType_STRING      PrimitiveType_Value = "STRING"
	PrimitiveType_DATETIME    PrimitiveType_Value = "DATETIME"
	PrimitiveType_INTEGER     PrimitiveType_Value = "INTEGER"
	PrimitiveType_DOUBLE      PrimitiveType_Value = "DOUBLE"
	PrimitiveType_SAFELONG    PrimitiveType_Value = "SAFELONG"
	PrimitiveType_BINARY      PrimitiveType_Value = "BINARY"
	PrimitiveType_ANY         PrimitiveType_Value = "ANY"
	PrimitiveType_BOOLEAN     PrimitiveType_Value = "BOOLEAN"
	PrimitiveType_UUID        PrimitiveType_Value = "UUID"
	PrimitiveType_RID         PrimitiveType_Value = "RID"
	PrimitiveType_BEARERTOKEN PrimitiveType_Value = "BEARERTOKEN"
	PrimitiveType_UNKNOWN     PrimitiveType_Value = "UNKNOWN"
)

// PrimitiveType_Values returns all known variants of PrimitiveType.
func PrimitiveType_Values() []PrimitiveType_Value {
	return []PrimitiveType_Value{PrimitiveType_STRING, PrimitiveType_DATETIME, PrimitiveType_INTEGER, PrimitiveType_DOUBLE, PrimitiveType_SAFELONG, PrimitiveType_BINARY, PrimitiveType_ANY, PrimitiveType_BOOLEAN, PrimitiveType_UUID, PrimitiveType_RID, PrimitiveType_BEARERTOKEN}
}

func New_PrimitiveType(value PrimitiveType_Value) PrimitiveType {
	return PrimitiveType{val: value}
}

// IsUnknown returns false for all known variants of PrimitiveType and true otherwise.
func (e PrimitiveType) IsUnknown() bool {
	switch e.val {
	case PrimitiveType_STRING, PrimitiveType_DATETIME, PrimitiveType_INTEGER, PrimitiveType_DOUBLE, PrimitiveType_SAFELONG, PrimitiveType_BINARY, PrimitiveType_ANY, PrimitiveType_BOOLEAN, PrimitiveType_UUID, PrimitiveType_RID, PrimitiveType_BEARERTOKEN:
		return false
	}
	return true
}

func (e PrimitiveType) Value() PrimitiveType_Value {
	if e.IsUnknown() {
		return PrimitiveType_UNKNOWN
	}
	return e.val
}

func (e PrimitiveType) String() string {
	return string(e.val)
}

func (e PrimitiveType) MarshalText() ([]byte, error) {
	return []byte(e.val), nil
}

func (e *PrimitiveType) UnmarshalText(data []byte) error {
	switch v := strings.ToUpper(string(data)); v {
	default:
		if !enumValuePattern.MatchString(v) {
			return werror.Convert(errors.NewInvalidArgument(wparams.NewSafeAndUnsafeParamStorer(map[string]interface{}{"enumType": "PrimitiveType", "message": "enum value must match pattern ^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"}, map[string]interface{}{"enumValue": string(data)})))
		}
		*e = New_PrimitiveType(PrimitiveType_Value(v))
	case "STRING":
		*e = New_PrimitiveType(PrimitiveType_STRING)
	case "DATETIME":
		*e = New_PrimitiveType(PrimitiveType_DATETIME)
	case "INTEGER":
		*e = New_PrimitiveType(PrimitiveType_INTEGER)
	case "DOUBLE":
		*e = New_PrimitiveType(PrimitiveType_DOUBLE)
	case "SAFELONG":
		*e = New_PrimitiveType(PrimitiveType_SAFELONG)
	case "BINARY":
		*e = New_PrimitiveType(PrimitiveType_BINARY)
	case "ANY":
		*e = New_PrimitiveType(PrimitiveType_ANY)
	case "BOOLEAN":
		*e = New_PrimitiveType(PrimitiveType_BOOLEAN)
	case "UUID":
		*e = New_PrimitiveType(PrimitiveType_UUID)
	case "RID":
		*e = New_PrimitiveType(PrimitiveType_RID)
	case "BEARERTOKEN":
		*e = New_PrimitiveType(PrimitiveType_BEARERTOKEN)
	}
	return nil
}
