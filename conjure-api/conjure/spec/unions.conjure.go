// This file was generated by Conjure and should not be manually edited.

package spec

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/palantir/pkg/safejson"
	"github.com/palantir/pkg/safeyaml"
	werror "github.com/palantir/witchcraft-go-error"
	"github.com/tidwall/gjson"
)

type AuthType struct {
	typ    string
	header *HeaderAuthType
	cookie *CookieAuthType
}

func (u AuthType) MarshalJSON() ([]byte, error) {
	return u.MarshalJSONBuffer(nil)
}

func (u AuthType) MarshalJSONBuffer(buf []byte) ([]byte, error) {
	buf = append(buf, '{')
	buf = safejson.AppendQuotedString(buf, "type")
	buf = append(buf, ':')
	buf = safejson.AppendQuotedString(buf, u.typ)
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "header")
	buf = append(buf, ':')
	if u.header != nil {
		if out, err := (*u.header).MarshalJSONBuffer(buf); err != nil {
			return nil, err
		} else {
			buf = out
		}
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "cookie")
	buf = append(buf, ':')
	if u.cookie != nil {
		if out, err := (*u.cookie).MarshalJSONBuffer(buf); err != nil {
			return nil, err
		} else {
			buf = out
		}
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, '}')
	return buf, nil
}

func (u *AuthType) UnmarshalJSON(data []byte) error {
	ctx := context.TODO()
	if !gjson.ValidBytes(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.ParseBytes(data), false)
}

func (u *AuthType) UnmarshalJSONString(data string) error {
	ctx := context.TODO()
	if !gjson.Valid(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.Parse(data), false)
}

func (u *AuthType) UnmarshalJSONStrict(data []byte) error {
	ctx := context.TODO()
	if !gjson.ValidBytes(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.ParseBytes(data), true)
}

func (u *AuthType) UnmarshalJSONStringStrict(data string) error {
	ctx := context.TODO()
	if !gjson.Valid(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.Parse(data), true)
}

func (u *AuthType) unmarshalGJSON(ctx context.Context, value gjson.Result, strict bool) error {
	if !value.IsObject() {
		return werror.ErrorWithContextParams(ctx, "type AuthType expected json type Object")
	}
	var seentyp bool
	var unrecognizedFields []string
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		switch key.Str {
		case "type":
			seentyp = true
			if value.Type != gjson.String {
				err = werror.ErrorWithContextParams(ctx, "field AuthType[\"type\"] expected json type String")
				return false
			}
			u.typ = value.Str
		case "header":
			if value.Type != gjson.Null {
				var optionalValue HeaderAuthType
				u.header = &optionalValue
			}
		case "cookie":
			if value.Type != gjson.Null {
				var optionalValue CookieAuthType
				if strict {
					err = optionalValue.UnmarshalJSONStringStrict(value.Raw)
				} else {
					err = optionalValue.UnmarshalJSONString(value.Raw)
				}
				err = werror.WrapWithContextParams(ctx, err, "field AuthType[\"cookie\"]")
				u.cookie = &optionalValue
			}
		default:
			if strict {
				unrecognizedFields = append(unrecognizedFields, key.Str)
			}
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seentyp {
		missingFields = append(missingFields, "type")
	}
	if len(missingFields) > 0 {
		return werror.ErrorWithContextParams(ctx, "type AuthType missing required json fields", werror.SafeParam("missingFields", missingFields))
	}
	if strict && len(unrecognizedFields) > 0 {
		return werror.ErrorWithContextParams(ctx, "type AuthType encountered unrecognized json fields", werror.UnsafeParam("unrecognizedFields", unrecognizedFields))
	}
	return nil
}

func (u AuthType) MarshalYAML() (interface{}, error) {
	jsonBytes, err := json.Marshal(u)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (u *AuthType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return u.UnmarshalJSON(jsonBytes)
}

func (u *AuthType) AcceptFuncs(headerFunc func(HeaderAuthType) error, cookieFunc func(CookieAuthType) error, unknownFunc func(string) error) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return unknownFunc(u.typ)
	case "header":
		return headerFunc(*u.header)
	case "cookie":
		return cookieFunc(*u.cookie)
	}
}

func (u *AuthType) HeaderNoopSuccess(HeaderAuthType) error {
	return nil
}

func (u *AuthType) CookieNoopSuccess(CookieAuthType) error {
	return nil
}

func (u *AuthType) ErrorOnUnknown(typeName string) error {
	return fmt.Errorf("invalid value in union type. Type name: %s", typeName)
}

func (u *AuthType) Accept(v AuthTypeVisitor) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknown(u.typ)
	case "header":
		return v.VisitHeader(*u.header)
	case "cookie":
		return v.VisitCookie(*u.cookie)
	}
}

type AuthTypeVisitor interface {
	VisitHeader(v HeaderAuthType) error
	VisitCookie(v CookieAuthType) error
	VisitUnknown(typeName string) error
}

func (u *AuthType) AcceptWithContext(ctx context.Context, v AuthTypeVisitorWithContext) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknownWithContext(ctx, u.typ)
	case "header":
		return v.VisitHeaderWithContext(ctx, *u.header)
	case "cookie":
		return v.VisitCookieWithContext(ctx, *u.cookie)
	}
}

type AuthTypeVisitorWithContext interface {
	VisitHeaderWithContext(ctx context.Context, v HeaderAuthType) error
	VisitCookieWithContext(ctx context.Context, v CookieAuthType) error
	VisitUnknownWithContext(ctx context.Context, typeName string) error
}

func NewAuthTypeFromHeader(v HeaderAuthType) AuthType {
	return AuthType{typ: "header", header: &v}
}

func NewAuthTypeFromCookie(v CookieAuthType) AuthType {
	return AuthType{typ: "cookie", cookie: &v}
}

type ParameterType struct {
	typ    string
	body   *BodyParameterType
	header *HeaderParameterType
	path   *PathParameterType
	query  *QueryParameterType
}

func (u ParameterType) MarshalJSON() ([]byte, error) {
	return u.MarshalJSONBuffer(nil)
}

func (u ParameterType) MarshalJSONBuffer(buf []byte) ([]byte, error) {
	buf = append(buf, '{')
	buf = safejson.AppendQuotedString(buf, "type")
	buf = append(buf, ':')
	buf = safejson.AppendQuotedString(buf, u.typ)
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "body")
	buf = append(buf, ':')
	if u.body != nil {
		if out, err := (*u.body).MarshalJSONBuffer(buf); err != nil {
			return nil, err
		} else {
			buf = out
		}
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "header")
	buf = append(buf, ':')
	if u.header != nil {
		if out, err := (*u.header).MarshalJSONBuffer(buf); err != nil {
			return nil, err
		} else {
			buf = out
		}
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "path")
	buf = append(buf, ':')
	if u.path != nil {
		if out, err := (*u.path).MarshalJSONBuffer(buf); err != nil {
			return nil, err
		} else {
			buf = out
		}
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "query")
	buf = append(buf, ':')
	if u.query != nil {
		if out, err := (*u.query).MarshalJSONBuffer(buf); err != nil {
			return nil, err
		} else {
			buf = out
		}
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, '}')
	return buf, nil
}

func (u *ParameterType) UnmarshalJSON(data []byte) error {
	ctx := context.TODO()
	if !gjson.ValidBytes(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.ParseBytes(data), false)
}

func (u *ParameterType) UnmarshalJSONString(data string) error {
	ctx := context.TODO()
	if !gjson.Valid(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.Parse(data), false)
}

func (u *ParameterType) UnmarshalJSONStrict(data []byte) error {
	ctx := context.TODO()
	if !gjson.ValidBytes(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.ParseBytes(data), true)
}

func (u *ParameterType) UnmarshalJSONStringStrict(data string) error {
	ctx := context.TODO()
	if !gjson.Valid(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.Parse(data), true)
}

func (u *ParameterType) unmarshalGJSON(ctx context.Context, value gjson.Result, strict bool) error {
	if !value.IsObject() {
		return werror.ErrorWithContextParams(ctx, "type ParameterType expected json type Object")
	}
	var seentyp bool
	var unrecognizedFields []string
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		switch key.Str {
		case "type":
			seentyp = true
			if value.Type != gjson.String {
				err = werror.ErrorWithContextParams(ctx, "field ParameterType[\"type\"] expected json type String")
				return false
			}
			u.typ = value.Str
		case "body":
			if value.Type != gjson.Null {
				var optionalValue BodyParameterType
				u.body = &optionalValue
			}
		case "header":
			if value.Type != gjson.Null {
				var optionalValue HeaderParameterType
				if strict {
					err = optionalValue.UnmarshalJSONStringStrict(value.Raw)
				} else {
					err = optionalValue.UnmarshalJSONString(value.Raw)
				}
				err = werror.WrapWithContextParams(ctx, err, "field ParameterType[\"header\"]")
				u.header = &optionalValue
			}
		case "path":
			if value.Type != gjson.Null {
				var optionalValue PathParameterType
				u.path = &optionalValue
			}
		case "query":
			if value.Type != gjson.Null {
				var optionalValue QueryParameterType
				if strict {
					err = optionalValue.UnmarshalJSONStringStrict(value.Raw)
				} else {
					err = optionalValue.UnmarshalJSONString(value.Raw)
				}
				err = werror.WrapWithContextParams(ctx, err, "field ParameterType[\"query\"]")
				u.query = &optionalValue
			}
		default:
			if strict {
				unrecognizedFields = append(unrecognizedFields, key.Str)
			}
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seentyp {
		missingFields = append(missingFields, "type")
	}
	if len(missingFields) > 0 {
		return werror.ErrorWithContextParams(ctx, "type ParameterType missing required json fields", werror.SafeParam("missingFields", missingFields))
	}
	if strict && len(unrecognizedFields) > 0 {
		return werror.ErrorWithContextParams(ctx, "type ParameterType encountered unrecognized json fields", werror.UnsafeParam("unrecognizedFields", unrecognizedFields))
	}
	return nil
}

func (u ParameterType) MarshalYAML() (interface{}, error) {
	jsonBytes, err := json.Marshal(u)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (u *ParameterType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return u.UnmarshalJSON(jsonBytes)
}

func (u *ParameterType) AcceptFuncs(bodyFunc func(BodyParameterType) error, headerFunc func(HeaderParameterType) error, pathFunc func(PathParameterType) error, queryFunc func(QueryParameterType) error, unknownFunc func(string) error) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return unknownFunc(u.typ)
	case "body":
		return bodyFunc(*u.body)
	case "header":
		return headerFunc(*u.header)
	case "path":
		return pathFunc(*u.path)
	case "query":
		return queryFunc(*u.query)
	}
}

func (u *ParameterType) BodyNoopSuccess(BodyParameterType) error {
	return nil
}

func (u *ParameterType) HeaderNoopSuccess(HeaderParameterType) error {
	return nil
}

func (u *ParameterType) PathNoopSuccess(PathParameterType) error {
	return nil
}

func (u *ParameterType) QueryNoopSuccess(QueryParameterType) error {
	return nil
}

func (u *ParameterType) ErrorOnUnknown(typeName string) error {
	return fmt.Errorf("invalid value in union type. Type name: %s", typeName)
}

func (u *ParameterType) Accept(v ParameterTypeVisitor) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknown(u.typ)
	case "body":
		return v.VisitBody(*u.body)
	case "header":
		return v.VisitHeader(*u.header)
	case "path":
		return v.VisitPath(*u.path)
	case "query":
		return v.VisitQuery(*u.query)
	}
}

type ParameterTypeVisitor interface {
	VisitBody(v BodyParameterType) error
	VisitHeader(v HeaderParameterType) error
	VisitPath(v PathParameterType) error
	VisitQuery(v QueryParameterType) error
	VisitUnknown(typeName string) error
}

func (u *ParameterType) AcceptWithContext(ctx context.Context, v ParameterTypeVisitorWithContext) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknownWithContext(ctx, u.typ)
	case "body":
		return v.VisitBodyWithContext(ctx, *u.body)
	case "header":
		return v.VisitHeaderWithContext(ctx, *u.header)
	case "path":
		return v.VisitPathWithContext(ctx, *u.path)
	case "query":
		return v.VisitQueryWithContext(ctx, *u.query)
	}
}

type ParameterTypeVisitorWithContext interface {
	VisitBodyWithContext(ctx context.Context, v BodyParameterType) error
	VisitHeaderWithContext(ctx context.Context, v HeaderParameterType) error
	VisitPathWithContext(ctx context.Context, v PathParameterType) error
	VisitQueryWithContext(ctx context.Context, v QueryParameterType) error
	VisitUnknownWithContext(ctx context.Context, typeName string) error
}

func NewParameterTypeFromBody(v BodyParameterType) ParameterType {
	return ParameterType{typ: "body", body: &v}
}

func NewParameterTypeFromHeader(v HeaderParameterType) ParameterType {
	return ParameterType{typ: "header", header: &v}
}

func NewParameterTypeFromPath(v PathParameterType) ParameterType {
	return ParameterType{typ: "path", path: &v}
}

func NewParameterTypeFromQuery(v QueryParameterType) ParameterType {
	return ParameterType{typ: "query", query: &v}
}

type Type struct {
	typ       string
	primitive *PrimitiveType
	optional  *OptionalType
	list      *ListType
	set       *SetType
	map_      *MapType
	reference *TypeName
	external  *ExternalReference
}

func (u Type) MarshalJSON() ([]byte, error) {
	return u.MarshalJSONBuffer(nil)
}

func (u Type) MarshalJSONBuffer(buf []byte) ([]byte, error) {
	buf = append(buf, '{')
	buf = safejson.AppendQuotedString(buf, "type")
	buf = append(buf, ':')
	buf = safejson.AppendQuotedString(buf, u.typ)
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "primitive")
	buf = append(buf, ':')
	if u.primitive != nil {
		buf = safejson.AppendQuotedString(buf, (*u.primitive).String())
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "optional")
	buf = append(buf, ':')
	if u.optional != nil {
		if out, err := (*u.optional).MarshalJSONBuffer(buf); err != nil {
			return nil, err
		} else {
			buf = out
		}
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "list")
	buf = append(buf, ':')
	if u.list != nil {
		if out, err := (*u.list).MarshalJSONBuffer(buf); err != nil {
			return nil, err
		} else {
			buf = out
		}
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "set")
	buf = append(buf, ':')
	if u.set != nil {
		if out, err := (*u.set).MarshalJSONBuffer(buf); err != nil {
			return nil, err
		} else {
			buf = out
		}
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "map")
	buf = append(buf, ':')
	if u.map_ != nil {
		if out, err := (*u.map_).MarshalJSONBuffer(buf); err != nil {
			return nil, err
		} else {
			buf = out
		}
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "reference")
	buf = append(buf, ':')
	if u.reference != nil {
		if out, err := (*u.reference).MarshalJSONBuffer(buf); err != nil {
			return nil, err
		} else {
			buf = out
		}
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "external")
	buf = append(buf, ':')
	if u.external != nil {
		if out, err := (*u.external).MarshalJSONBuffer(buf); err != nil {
			return nil, err
		} else {
			buf = out
		}
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, '}')
	return buf, nil
}

func (u *Type) UnmarshalJSON(data []byte) error {
	ctx := context.TODO()
	if !gjson.ValidBytes(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.ParseBytes(data), false)
}

func (u *Type) UnmarshalJSONString(data string) error {
	ctx := context.TODO()
	if !gjson.Valid(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.Parse(data), false)
}

func (u *Type) UnmarshalJSONStrict(data []byte) error {
	ctx := context.TODO()
	if !gjson.ValidBytes(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.ParseBytes(data), true)
}

func (u *Type) UnmarshalJSONStringStrict(data string) error {
	ctx := context.TODO()
	if !gjson.Valid(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.Parse(data), true)
}

func (u *Type) unmarshalGJSON(ctx context.Context, value gjson.Result, strict bool) error {
	if !value.IsObject() {
		return werror.ErrorWithContextParams(ctx, "type Type expected json type Object")
	}
	var seentyp bool
	var unrecognizedFields []string
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		switch key.Str {
		case "type":
			seentyp = true
			if value.Type != gjson.String {
				err = werror.ErrorWithContextParams(ctx, "field Type[\"type\"] expected json type String")
				return false
			}
			u.typ = value.Str
		case "primitive":
			if value.Type != gjson.Null {
				if value.Type != gjson.String {
					err = werror.ErrorWithContextParams(ctx, "field Type[\"primitive\"] expected json type String")
					return false
				}
				var optionalValue PrimitiveType
				err = optionalValue.UnmarshalText([]byte(value.Str))
				u.primitive = &optionalValue
			}
		case "optional":
			if value.Type != gjson.Null {
				var optionalValue OptionalType
				if strict {
					err = optionalValue.UnmarshalJSONStringStrict(value.Raw)
				} else {
					err = optionalValue.UnmarshalJSONString(value.Raw)
				}
				err = werror.WrapWithContextParams(ctx, err, "field Type[\"optional\"]")
				u.optional = &optionalValue
			}
		case "list":
			if value.Type != gjson.Null {
				var optionalValue ListType
				if strict {
					err = optionalValue.UnmarshalJSONStringStrict(value.Raw)
				} else {
					err = optionalValue.UnmarshalJSONString(value.Raw)
				}
				err = werror.WrapWithContextParams(ctx, err, "field Type[\"list\"]")
				u.list = &optionalValue
			}
		case "set":
			if value.Type != gjson.Null {
				var optionalValue SetType
				if strict {
					err = optionalValue.UnmarshalJSONStringStrict(value.Raw)
				} else {
					err = optionalValue.UnmarshalJSONString(value.Raw)
				}
				err = werror.WrapWithContextParams(ctx, err, "field Type[\"set\"]")
				u.set = &optionalValue
			}
		case "map":
			if value.Type != gjson.Null {
				var optionalValue MapType
				if strict {
					err = optionalValue.UnmarshalJSONStringStrict(value.Raw)
				} else {
					err = optionalValue.UnmarshalJSONString(value.Raw)
				}
				err = werror.WrapWithContextParams(ctx, err, "field Type[\"map\"]")
				u.map_ = &optionalValue
			}
		case "reference":
			if value.Type != gjson.Null {
				var optionalValue TypeName
				if strict {
					err = optionalValue.UnmarshalJSONStringStrict(value.Raw)
				} else {
					err = optionalValue.UnmarshalJSONString(value.Raw)
				}
				err = werror.WrapWithContextParams(ctx, err, "field Type[\"reference\"]")
				u.reference = &optionalValue
			}
		case "external":
			if value.Type != gjson.Null {
				var optionalValue ExternalReference
				if strict {
					err = optionalValue.UnmarshalJSONStringStrict(value.Raw)
				} else {
					err = optionalValue.UnmarshalJSONString(value.Raw)
				}
				err = werror.WrapWithContextParams(ctx, err, "field Type[\"external\"]")
				u.external = &optionalValue
			}
		default:
			if strict {
				unrecognizedFields = append(unrecognizedFields, key.Str)
			}
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seentyp {
		missingFields = append(missingFields, "type")
	}
	if len(missingFields) > 0 {
		return werror.ErrorWithContextParams(ctx, "type Type missing required json fields", werror.SafeParam("missingFields", missingFields))
	}
	if strict && len(unrecognizedFields) > 0 {
		return werror.ErrorWithContextParams(ctx, "type Type encountered unrecognized json fields", werror.UnsafeParam("unrecognizedFields", unrecognizedFields))
	}
	return nil
}

func (u Type) MarshalYAML() (interface{}, error) {
	jsonBytes, err := json.Marshal(u)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (u *Type) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return u.UnmarshalJSON(jsonBytes)
}

func (u *Type) AcceptFuncs(primitiveFunc func(PrimitiveType) error, optionalFunc func(OptionalType) error, listFunc func(ListType) error, setFunc func(SetType) error, mapFunc func(MapType) error, referenceFunc func(TypeName) error, externalFunc func(ExternalReference) error, unknownFunc func(string) error) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return unknownFunc(u.typ)
	case "primitive":
		return primitiveFunc(*u.primitive)
	case "optional":
		return optionalFunc(*u.optional)
	case "list":
		return listFunc(*u.list)
	case "set":
		return setFunc(*u.set)
	case "map":
		return mapFunc(*u.map_)
	case "reference":
		return referenceFunc(*u.reference)
	case "external":
		return externalFunc(*u.external)
	}
}

func (u *Type) PrimitiveNoopSuccess(PrimitiveType) error {
	return nil
}

func (u *Type) OptionalNoopSuccess(OptionalType) error {
	return nil
}

func (u *Type) ListNoopSuccess(ListType) error {
	return nil
}

func (u *Type) SetNoopSuccess(SetType) error {
	return nil
}

func (u *Type) MapNoopSuccess(MapType) error {
	return nil
}

func (u *Type) ReferenceNoopSuccess(TypeName) error {
	return nil
}

func (u *Type) ExternalNoopSuccess(ExternalReference) error {
	return nil
}

func (u *Type) ErrorOnUnknown(typeName string) error {
	return fmt.Errorf("invalid value in union type. Type name: %s", typeName)
}

func (u *Type) Accept(v TypeVisitor) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknown(u.typ)
	case "primitive":
		return v.VisitPrimitive(*u.primitive)
	case "optional":
		return v.VisitOptional(*u.optional)
	case "list":
		return v.VisitList(*u.list)
	case "set":
		return v.VisitSet(*u.set)
	case "map":
		return v.VisitMap(*u.map_)
	case "reference":
		return v.VisitReference(*u.reference)
	case "external":
		return v.VisitExternal(*u.external)
	}
}

type TypeVisitor interface {
	VisitPrimitive(v PrimitiveType) error
	VisitOptional(v OptionalType) error
	VisitList(v ListType) error
	VisitSet(v SetType) error
	VisitMap(v MapType) error
	VisitReference(v TypeName) error
	VisitExternal(v ExternalReference) error
	VisitUnknown(typeName string) error
}

func (u *Type) AcceptWithContext(ctx context.Context, v TypeVisitorWithContext) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknownWithContext(ctx, u.typ)
	case "primitive":
		return v.VisitPrimitiveWithContext(ctx, *u.primitive)
	case "optional":
		return v.VisitOptionalWithContext(ctx, *u.optional)
	case "list":
		return v.VisitListWithContext(ctx, *u.list)
	case "set":
		return v.VisitSetWithContext(ctx, *u.set)
	case "map":
		return v.VisitMapWithContext(ctx, *u.map_)
	case "reference":
		return v.VisitReferenceWithContext(ctx, *u.reference)
	case "external":
		return v.VisitExternalWithContext(ctx, *u.external)
	}
}

type TypeVisitorWithContext interface {
	VisitPrimitiveWithContext(ctx context.Context, v PrimitiveType) error
	VisitOptionalWithContext(ctx context.Context, v OptionalType) error
	VisitListWithContext(ctx context.Context, v ListType) error
	VisitSetWithContext(ctx context.Context, v SetType) error
	VisitMapWithContext(ctx context.Context, v MapType) error
	VisitReferenceWithContext(ctx context.Context, v TypeName) error
	VisitExternalWithContext(ctx context.Context, v ExternalReference) error
	VisitUnknownWithContext(ctx context.Context, typeName string) error
}

func NewTypeFromPrimitive(v PrimitiveType) Type {
	return Type{typ: "primitive", primitive: &v}
}

func NewTypeFromOptional(v OptionalType) Type {
	return Type{typ: "optional", optional: &v}
}

func NewTypeFromList(v ListType) Type {
	return Type{typ: "list", list: &v}
}

func NewTypeFromSet(v SetType) Type {
	return Type{typ: "set", set: &v}
}

func NewTypeFromMap(v MapType) Type {
	return Type{typ: "map", map_: &v}
}

func NewTypeFromReference(v TypeName) Type {
	return Type{typ: "reference", reference: &v}
}

func NewTypeFromExternal(v ExternalReference) Type {
	return Type{typ: "external", external: &v}
}

type TypeDefinition struct {
	typ    string
	alias  *AliasDefinition
	enum   *EnumDefinition
	object *ObjectDefinition
	union  *UnionDefinition
}

func (u TypeDefinition) MarshalJSON() ([]byte, error) {
	return u.MarshalJSONBuffer(nil)
}

func (u TypeDefinition) MarshalJSONBuffer(buf []byte) ([]byte, error) {
	buf = append(buf, '{')
	buf = safejson.AppendQuotedString(buf, "type")
	buf = append(buf, ':')
	buf = safejson.AppendQuotedString(buf, u.typ)
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "alias")
	buf = append(buf, ':')
	if u.alias != nil {
		if out, err := (*u.alias).MarshalJSONBuffer(buf); err != nil {
			return nil, err
		} else {
			buf = out
		}
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "enum")
	buf = append(buf, ':')
	if u.enum != nil {
		if out, err := (*u.enum).MarshalJSONBuffer(buf); err != nil {
			return nil, err
		} else {
			buf = out
		}
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "object")
	buf = append(buf, ':')
	if u.object != nil {
		if out, err := (*u.object).MarshalJSONBuffer(buf); err != nil {
			return nil, err
		} else {
			buf = out
		}
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "union")
	buf = append(buf, ':')
	if u.union != nil {
		if out, err := (*u.union).MarshalJSONBuffer(buf); err != nil {
			return nil, err
		} else {
			buf = out
		}
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, '}')
	return buf, nil
}

func (u *TypeDefinition) UnmarshalJSON(data []byte) error {
	ctx := context.TODO()
	if !gjson.ValidBytes(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.ParseBytes(data), false)
}

func (u *TypeDefinition) UnmarshalJSONString(data string) error {
	ctx := context.TODO()
	if !gjson.Valid(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.Parse(data), false)
}

func (u *TypeDefinition) UnmarshalJSONStrict(data []byte) error {
	ctx := context.TODO()
	if !gjson.ValidBytes(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.ParseBytes(data), true)
}

func (u *TypeDefinition) UnmarshalJSONStringStrict(data string) error {
	ctx := context.TODO()
	if !gjson.Valid(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.Parse(data), true)
}

func (u *TypeDefinition) unmarshalGJSON(ctx context.Context, value gjson.Result, strict bool) error {
	if !value.IsObject() {
		return werror.ErrorWithContextParams(ctx, "type TypeDefinition expected json type Object")
	}
	var seentyp bool
	var unrecognizedFields []string
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		switch key.Str {
		case "type":
			seentyp = true
			if value.Type != gjson.String {
				err = werror.ErrorWithContextParams(ctx, "field TypeDefinition[\"type\"] expected json type String")
				return false
			}
			u.typ = value.Str
		case "alias":
			if value.Type != gjson.Null {
				var optionalValue AliasDefinition
				if strict {
					err = optionalValue.UnmarshalJSONStringStrict(value.Raw)
				} else {
					err = optionalValue.UnmarshalJSONString(value.Raw)
				}
				err = werror.WrapWithContextParams(ctx, err, "field TypeDefinition[\"alias\"]")
				u.alias = &optionalValue
			}
		case "enum":
			if value.Type != gjson.Null {
				var optionalValue EnumDefinition
				if strict {
					err = optionalValue.UnmarshalJSONStringStrict(value.Raw)
				} else {
					err = optionalValue.UnmarshalJSONString(value.Raw)
				}
				err = werror.WrapWithContextParams(ctx, err, "field TypeDefinition[\"enum\"]")
				u.enum = &optionalValue
			}
		case "object":
			if value.Type != gjson.Null {
				var optionalValue ObjectDefinition
				if strict {
					err = optionalValue.UnmarshalJSONStringStrict(value.Raw)
				} else {
					err = optionalValue.UnmarshalJSONString(value.Raw)
				}
				err = werror.WrapWithContextParams(ctx, err, "field TypeDefinition[\"object\"]")
				u.object = &optionalValue
			}
		case "union":
			if value.Type != gjson.Null {
				var optionalValue UnionDefinition
				if strict {
					err = optionalValue.UnmarshalJSONStringStrict(value.Raw)
				} else {
					err = optionalValue.UnmarshalJSONString(value.Raw)
				}
				err = werror.WrapWithContextParams(ctx, err, "field TypeDefinition[\"union\"]")
				u.union = &optionalValue
			}
		default:
			if strict {
				unrecognizedFields = append(unrecognizedFields, key.Str)
			}
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seentyp {
		missingFields = append(missingFields, "type")
	}
	if len(missingFields) > 0 {
		return werror.ErrorWithContextParams(ctx, "type TypeDefinition missing required json fields", werror.SafeParam("missingFields", missingFields))
	}
	if strict && len(unrecognizedFields) > 0 {
		return werror.ErrorWithContextParams(ctx, "type TypeDefinition encountered unrecognized json fields", werror.UnsafeParam("unrecognizedFields", unrecognizedFields))
	}
	return nil
}

func (u TypeDefinition) MarshalYAML() (interface{}, error) {
	jsonBytes, err := json.Marshal(u)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (u *TypeDefinition) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return u.UnmarshalJSON(jsonBytes)
}

func (u *TypeDefinition) AcceptFuncs(aliasFunc func(AliasDefinition) error, enumFunc func(EnumDefinition) error, objectFunc func(ObjectDefinition) error, unionFunc func(UnionDefinition) error, unknownFunc func(string) error) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return unknownFunc(u.typ)
	case "alias":
		return aliasFunc(*u.alias)
	case "enum":
		return enumFunc(*u.enum)
	case "object":
		return objectFunc(*u.object)
	case "union":
		return unionFunc(*u.union)
	}
}

func (u *TypeDefinition) AliasNoopSuccess(AliasDefinition) error {
	return nil
}

func (u *TypeDefinition) EnumNoopSuccess(EnumDefinition) error {
	return nil
}

func (u *TypeDefinition) ObjectNoopSuccess(ObjectDefinition) error {
	return nil
}

func (u *TypeDefinition) UnionNoopSuccess(UnionDefinition) error {
	return nil
}

func (u *TypeDefinition) ErrorOnUnknown(typeName string) error {
	return fmt.Errorf("invalid value in union type. Type name: %s", typeName)
}

func (u *TypeDefinition) Accept(v TypeDefinitionVisitor) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknown(u.typ)
	case "alias":
		return v.VisitAlias(*u.alias)
	case "enum":
		return v.VisitEnum(*u.enum)
	case "object":
		return v.VisitObject(*u.object)
	case "union":
		return v.VisitUnion(*u.union)
	}
}

type TypeDefinitionVisitor interface {
	VisitAlias(v AliasDefinition) error
	VisitEnum(v EnumDefinition) error
	VisitObject(v ObjectDefinition) error
	VisitUnion(v UnionDefinition) error
	VisitUnknown(typeName string) error
}

func (u *TypeDefinition) AcceptWithContext(ctx context.Context, v TypeDefinitionVisitorWithContext) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknownWithContext(ctx, u.typ)
	case "alias":
		return v.VisitAliasWithContext(ctx, *u.alias)
	case "enum":
		return v.VisitEnumWithContext(ctx, *u.enum)
	case "object":
		return v.VisitObjectWithContext(ctx, *u.object)
	case "union":
		return v.VisitUnionWithContext(ctx, *u.union)
	}
}

type TypeDefinitionVisitorWithContext interface {
	VisitAliasWithContext(ctx context.Context, v AliasDefinition) error
	VisitEnumWithContext(ctx context.Context, v EnumDefinition) error
	VisitObjectWithContext(ctx context.Context, v ObjectDefinition) error
	VisitUnionWithContext(ctx context.Context, v UnionDefinition) error
	VisitUnknownWithContext(ctx context.Context, typeName string) error
}

func NewTypeDefinitionFromAlias(v AliasDefinition) TypeDefinition {
	return TypeDefinition{typ: "alias", alias: &v}
}

func NewTypeDefinitionFromEnum(v EnumDefinition) TypeDefinition {
	return TypeDefinition{typ: "enum", enum: &v}
}

func NewTypeDefinitionFromObject(v ObjectDefinition) TypeDefinition {
	return TypeDefinition{typ: "object", object: &v}
}

func NewTypeDefinitionFromUnion(v UnionDefinition) TypeDefinition {
	return TypeDefinition{typ: "union", union: &v}
}
