// This file was generated by Conjure and should not be manually edited.

package spec

import (
	"context"
	"fmt"

	"github.com/palantir/pkg/safejson"
	"github.com/palantir/pkg/safeyaml"
)

type AuthType struct {
	typ    string
	header *HeaderAuthType
	cookie *CookieAuthType
}

type authTypeDeserializer struct {
	Type   string          `json:"type"`
	Header *HeaderAuthType `json:"header"`
	Cookie *CookieAuthType `json:"cookie"`
}

func (u *authTypeDeserializer) toStruct() AuthType {
	return AuthType{typ: u.Type, header: u.Header, cookie: u.Cookie}
}

func (u *AuthType) toSerializer() (interface{}, error) {
	switch u.typ {
	default:
		return nil, fmt.Errorf("unknown type %q", u.typ)
	case "header":
		if u.header == nil {
			return nil, fmt.Errorf("field \"header\" is required")
		}
		return struct {
			Type   string         `json:"type"`
			Header HeaderAuthType `json:"header"`
		}{Type: "header", Header: *u.header}, nil
	case "cookie":
		if u.cookie == nil {
			return nil, fmt.Errorf("field \"cookie\" is required")
		}
		return struct {
			Type   string         `json:"type"`
			Cookie CookieAuthType `json:"cookie"`
		}{Type: "cookie", Cookie: *u.cookie}, nil
	}
}

func (u AuthType) MarshalJSON() ([]byte, error) {
	ser, err := u.toSerializer()
	if err != nil {
		return nil, err
	}
	return safejson.Marshal(ser)
}

func (u *AuthType) UnmarshalJSON(data []byte) error {
	var deser authTypeDeserializer
	if err := safejson.Unmarshal(data, &deser); err != nil {
		return err
	}
	*u = deser.toStruct()
	switch u.typ {
	case "header":
		if u.header == nil {
			return fmt.Errorf("field \"header\" is required")
		}
	case "cookie":
		if u.cookie == nil {
			return fmt.Errorf("field \"cookie\" is required")
		}
	}
	return nil
}

func (u AuthType) MarshalYAML() (interface{}, error) {
	jsonBytes, err := u.MarshalJSON()
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (u *AuthType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return u.UnmarshalJSON(jsonBytes)
}

func (u *AuthType) AcceptFuncs(headerFunc func(HeaderAuthType) error, cookieFunc func(CookieAuthType) error, unknownFunc func(string) error) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return unknownFunc(u.typ)
	case "header":
		if u.header == nil {
			return fmt.Errorf("field \"header\" is required")
		}
		return headerFunc(*u.header)
	case "cookie":
		if u.cookie == nil {
			return fmt.Errorf("field \"cookie\" is required")
		}
		return cookieFunc(*u.cookie)
	}
}

func (u *AuthType) HeaderNoopSuccess(HeaderAuthType) error {
	return nil
}

func (u *AuthType) CookieNoopSuccess(CookieAuthType) error {
	return nil
}

func (u *AuthType) ErrorOnUnknown(typeName string) error {
	return fmt.Errorf("invalid value in union type. Type name: %s", typeName)
}

func (u *AuthType) Accept(v AuthTypeVisitor) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknown(u.typ)
	case "header":
		if u.header == nil {
			return fmt.Errorf("field \"header\" is required")
		}
		return v.VisitHeader(*u.header)
	case "cookie":
		if u.cookie == nil {
			return fmt.Errorf("field \"cookie\" is required")
		}
		return v.VisitCookie(*u.cookie)
	}
}

type AuthTypeVisitor interface {
	VisitHeader(v HeaderAuthType) error
	VisitCookie(v CookieAuthType) error
	VisitUnknown(typeName string) error
}

func (u *AuthType) AcceptWithContext(ctx context.Context, v AuthTypeVisitorWithContext) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknownWithContext(ctx, u.typ)
	case "header":
		if u.header == nil {
			return fmt.Errorf("field \"header\" is required")
		}
		return v.VisitHeaderWithContext(ctx, *u.header)
	case "cookie":
		if u.cookie == nil {
			return fmt.Errorf("field \"cookie\" is required")
		}
		return v.VisitCookieWithContext(ctx, *u.cookie)
	}
}

type AuthTypeVisitorWithContext interface {
	VisitHeaderWithContext(ctx context.Context, v HeaderAuthType) error
	VisitCookieWithContext(ctx context.Context, v CookieAuthType) error
	VisitUnknownWithContext(ctx context.Context, typeName string) error
}

func NewAuthTypeFromHeader(v HeaderAuthType) AuthType {
	return AuthType{typ: "header", header: &v}
}

func NewAuthTypeFromCookie(v CookieAuthType) AuthType {
	return AuthType{typ: "cookie", cookie: &v}
}

type ParameterType struct {
	typ    string
	body   *BodyParameterType
	header *HeaderParameterType
	path   *PathParameterType
	query  *QueryParameterType
}

type parameterTypeDeserializer struct {
	Type   string               `json:"type"`
	Body   *BodyParameterType   `json:"body"`
	Header *HeaderParameterType `json:"header"`
	Path   *PathParameterType   `json:"path"`
	Query  *QueryParameterType  `json:"query"`
}

func (u *parameterTypeDeserializer) toStruct() ParameterType {
	return ParameterType{typ: u.Type, body: u.Body, header: u.Header, path: u.Path, query: u.Query}
}

func (u *ParameterType) toSerializer() (interface{}, error) {
	switch u.typ {
	default:
		return nil, fmt.Errorf("unknown type %q", u.typ)
	case "body":
		if u.body == nil {
			return nil, fmt.Errorf("field \"body\" is required")
		}
		return struct {
			Type string            `json:"type"`
			Body BodyParameterType `json:"body"`
		}{Type: "body", Body: *u.body}, nil
	case "header":
		if u.header == nil {
			return nil, fmt.Errorf("field \"header\" is required")
		}
		return struct {
			Type   string              `json:"type"`
			Header HeaderParameterType `json:"header"`
		}{Type: "header", Header: *u.header}, nil
	case "path":
		if u.path == nil {
			return nil, fmt.Errorf("field \"path\" is required")
		}
		return struct {
			Type string            `json:"type"`
			Path PathParameterType `json:"path"`
		}{Type: "path", Path: *u.path}, nil
	case "query":
		if u.query == nil {
			return nil, fmt.Errorf("field \"query\" is required")
		}
		return struct {
			Type  string             `json:"type"`
			Query QueryParameterType `json:"query"`
		}{Type: "query", Query: *u.query}, nil
	}
}

func (u ParameterType) MarshalJSON() ([]byte, error) {
	ser, err := u.toSerializer()
	if err != nil {
		return nil, err
	}
	return safejson.Marshal(ser)
}

func (u *ParameterType) UnmarshalJSON(data []byte) error {
	var deser parameterTypeDeserializer
	if err := safejson.Unmarshal(data, &deser); err != nil {
		return err
	}
	*u = deser.toStruct()
	switch u.typ {
	case "body":
		if u.body == nil {
			return fmt.Errorf("field \"body\" is required")
		}
	case "header":
		if u.header == nil {
			return fmt.Errorf("field \"header\" is required")
		}
	case "path":
		if u.path == nil {
			return fmt.Errorf("field \"path\" is required")
		}
	case "query":
		if u.query == nil {
			return fmt.Errorf("field \"query\" is required")
		}
	}
	return nil
}

func (u ParameterType) MarshalYAML() (interface{}, error) {
	jsonBytes, err := u.MarshalJSON()
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (u *ParameterType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return u.UnmarshalJSON(jsonBytes)
}

func (u *ParameterType) AcceptFuncs(bodyFunc func(BodyParameterType) error, headerFunc func(HeaderParameterType) error, pathFunc func(PathParameterType) error, queryFunc func(QueryParameterType) error, unknownFunc func(string) error) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return unknownFunc(u.typ)
	case "body":
		if u.body == nil {
			return fmt.Errorf("field \"body\" is required")
		}
		return bodyFunc(*u.body)
	case "header":
		if u.header == nil {
			return fmt.Errorf("field \"header\" is required")
		}
		return headerFunc(*u.header)
	case "path":
		if u.path == nil {
			return fmt.Errorf("field \"path\" is required")
		}
		return pathFunc(*u.path)
	case "query":
		if u.query == nil {
			return fmt.Errorf("field \"query\" is required")
		}
		return queryFunc(*u.query)
	}
}

func (u *ParameterType) BodyNoopSuccess(BodyParameterType) error {
	return nil
}

func (u *ParameterType) HeaderNoopSuccess(HeaderParameterType) error {
	return nil
}

func (u *ParameterType) PathNoopSuccess(PathParameterType) error {
	return nil
}

func (u *ParameterType) QueryNoopSuccess(QueryParameterType) error {
	return nil
}

func (u *ParameterType) ErrorOnUnknown(typeName string) error {
	return fmt.Errorf("invalid value in union type. Type name: %s", typeName)
}

func (u *ParameterType) Accept(v ParameterTypeVisitor) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknown(u.typ)
	case "body":
		if u.body == nil {
			return fmt.Errorf("field \"body\" is required")
		}
		return v.VisitBody(*u.body)
	case "header":
		if u.header == nil {
			return fmt.Errorf("field \"header\" is required")
		}
		return v.VisitHeader(*u.header)
	case "path":
		if u.path == nil {
			return fmt.Errorf("field \"path\" is required")
		}
		return v.VisitPath(*u.path)
	case "query":
		if u.query == nil {
			return fmt.Errorf("field \"query\" is required")
		}
		return v.VisitQuery(*u.query)
	}
}

type ParameterTypeVisitor interface {
	VisitBody(v BodyParameterType) error
	VisitHeader(v HeaderParameterType) error
	VisitPath(v PathParameterType) error
	VisitQuery(v QueryParameterType) error
	VisitUnknown(typeName string) error
}

func (u *ParameterType) AcceptWithContext(ctx context.Context, v ParameterTypeVisitorWithContext) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknownWithContext(ctx, u.typ)
	case "body":
		if u.body == nil {
			return fmt.Errorf("field \"body\" is required")
		}
		return v.VisitBodyWithContext(ctx, *u.body)
	case "header":
		if u.header == nil {
			return fmt.Errorf("field \"header\" is required")
		}
		return v.VisitHeaderWithContext(ctx, *u.header)
	case "path":
		if u.path == nil {
			return fmt.Errorf("field \"path\" is required")
		}
		return v.VisitPathWithContext(ctx, *u.path)
	case "query":
		if u.query == nil {
			return fmt.Errorf("field \"query\" is required")
		}
		return v.VisitQueryWithContext(ctx, *u.query)
	}
}

type ParameterTypeVisitorWithContext interface {
	VisitBodyWithContext(ctx context.Context, v BodyParameterType) error
	VisitHeaderWithContext(ctx context.Context, v HeaderParameterType) error
	VisitPathWithContext(ctx context.Context, v PathParameterType) error
	VisitQueryWithContext(ctx context.Context, v QueryParameterType) error
	VisitUnknownWithContext(ctx context.Context, typeName string) error
}

func NewParameterTypeFromBody(v BodyParameterType) ParameterType {
	return ParameterType{typ: "body", body: &v}
}

func NewParameterTypeFromHeader(v HeaderParameterType) ParameterType {
	return ParameterType{typ: "header", header: &v}
}

func NewParameterTypeFromPath(v PathParameterType) ParameterType {
	return ParameterType{typ: "path", path: &v}
}

func NewParameterTypeFromQuery(v QueryParameterType) ParameterType {
	return ParameterType{typ: "query", query: &v}
}

type Type struct {
	typ       string
	primitive *PrimitiveType
	optional  *OptionalType
	list      *ListType
	set       *SetType
	map_      *MapType
	reference *TypeName
	external  *ExternalReference
}

type typeDeserializer struct {
	Type      string             `json:"type"`
	Primitive *PrimitiveType     `json:"primitive"`
	Optional  *OptionalType      `json:"optional"`
	List      *ListType          `json:"list"`
	Set       *SetType           `json:"set"`
	Map       *MapType           `json:"map"`
	Reference *TypeName          `json:"reference"`
	External  *ExternalReference `json:"external"`
}

func (u *typeDeserializer) toStruct() Type {
	return Type{typ: u.Type, primitive: u.Primitive, optional: u.Optional, list: u.List, set: u.Set, map_: u.Map, reference: u.Reference, external: u.External}
}

func (u *Type) toSerializer() (interface{}, error) {
	switch u.typ {
	default:
		return nil, fmt.Errorf("unknown type %q", u.typ)
	case "primitive":
		if u.primitive == nil {
			return nil, fmt.Errorf("field \"primitive\" is required")
		}
		return struct {
			Type      string        `json:"type"`
			Primitive PrimitiveType `json:"primitive"`
		}{Type: "primitive", Primitive: *u.primitive}, nil
	case "optional":
		if u.optional == nil {
			return nil, fmt.Errorf("field \"optional\" is required")
		}
		return struct {
			Type     string       `json:"type"`
			Optional OptionalType `json:"optional"`
		}{Type: "optional", Optional: *u.optional}, nil
	case "list":
		if u.list == nil {
			return nil, fmt.Errorf("field \"list\" is required")
		}
		return struct {
			Type string   `json:"type"`
			List ListType `json:"list"`
		}{Type: "list", List: *u.list}, nil
	case "set":
		if u.set == nil {
			return nil, fmt.Errorf("field \"set\" is required")
		}
		return struct {
			Type string  `json:"type"`
			Set  SetType `json:"set"`
		}{Type: "set", Set: *u.set}, nil
	case "map":
		if u.map_ == nil {
			return nil, fmt.Errorf("field \"map\" is required")
		}
		return struct {
			Type string  `json:"type"`
			Map  MapType `json:"map"`
		}{Type: "map", Map: *u.map_}, nil
	case "reference":
		if u.reference == nil {
			return nil, fmt.Errorf("field \"reference\" is required")
		}
		return struct {
			Type      string   `json:"type"`
			Reference TypeName `json:"reference"`
		}{Type: "reference", Reference: *u.reference}, nil
	case "external":
		if u.external == nil {
			return nil, fmt.Errorf("field \"external\" is required")
		}
		return struct {
			Type     string            `json:"type"`
			External ExternalReference `json:"external"`
		}{Type: "external", External: *u.external}, nil
	}
}

func (u Type) MarshalJSON() ([]byte, error) {
	ser, err := u.toSerializer()
	if err != nil {
		return nil, err
	}
	return safejson.Marshal(ser)
}

func (u *Type) UnmarshalJSON(data []byte) error {
	var deser typeDeserializer
	if err := safejson.Unmarshal(data, &deser); err != nil {
		return err
	}
	*u = deser.toStruct()
	switch u.typ {
	case "primitive":
		if u.primitive == nil {
			return fmt.Errorf("field \"primitive\" is required")
		}
	case "optional":
		if u.optional == nil {
			return fmt.Errorf("field \"optional\" is required")
		}
	case "list":
		if u.list == nil {
			return fmt.Errorf("field \"list\" is required")
		}
	case "set":
		if u.set == nil {
			return fmt.Errorf("field \"set\" is required")
		}
	case "map":
		if u.map_ == nil {
			return fmt.Errorf("field \"map\" is required")
		}
	case "reference":
		if u.reference == nil {
			return fmt.Errorf("field \"reference\" is required")
		}
	case "external":
		if u.external == nil {
			return fmt.Errorf("field \"external\" is required")
		}
	}
	return nil
}

func (u Type) MarshalYAML() (interface{}, error) {
	jsonBytes, err := u.MarshalJSON()
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (u *Type) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return u.UnmarshalJSON(jsonBytes)
}

func (u *Type) AcceptFuncs(primitiveFunc func(PrimitiveType) error, optionalFunc func(OptionalType) error, listFunc func(ListType) error, setFunc func(SetType) error, map_Func func(MapType) error, referenceFunc func(TypeName) error, externalFunc func(ExternalReference) error, unknownFunc func(string) error) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return unknownFunc(u.typ)
	case "primitive":
		if u.primitive == nil {
			return fmt.Errorf("field \"primitive\" is required")
		}
		return primitiveFunc(*u.primitive)
	case "optional":
		if u.optional == nil {
			return fmt.Errorf("field \"optional\" is required")
		}
		return optionalFunc(*u.optional)
	case "list":
		if u.list == nil {
			return fmt.Errorf("field \"list\" is required")
		}
		return listFunc(*u.list)
	case "set":
		if u.set == nil {
			return fmt.Errorf("field \"set\" is required")
		}
		return setFunc(*u.set)
	case "map":
		if u.map_ == nil {
			return fmt.Errorf("field \"map\" is required")
		}
		return map_Func(*u.map_)
	case "reference":
		if u.reference == nil {
			return fmt.Errorf("field \"reference\" is required")
		}
		return referenceFunc(*u.reference)
	case "external":
		if u.external == nil {
			return fmt.Errorf("field \"external\" is required")
		}
		return externalFunc(*u.external)
	}
}

func (u *Type) PrimitiveNoopSuccess(PrimitiveType) error {
	return nil
}

func (u *Type) OptionalNoopSuccess(OptionalType) error {
	return nil
}

func (u *Type) ListNoopSuccess(ListType) error {
	return nil
}

func (u *Type) SetNoopSuccess(SetType) error {
	return nil
}

func (u *Type) MapNoopSuccess(MapType) error {
	return nil
}

func (u *Type) ReferenceNoopSuccess(TypeName) error {
	return nil
}

func (u *Type) ExternalNoopSuccess(ExternalReference) error {
	return nil
}

func (u *Type) ErrorOnUnknown(typeName string) error {
	return fmt.Errorf("invalid value in union type. Type name: %s", typeName)
}

func (u *Type) Accept(v TypeVisitor) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknown(u.typ)
	case "primitive":
		if u.primitive == nil {
			return fmt.Errorf("field \"primitive\" is required")
		}
		return v.VisitPrimitive(*u.primitive)
	case "optional":
		if u.optional == nil {
			return fmt.Errorf("field \"optional\" is required")
		}
		return v.VisitOptional(*u.optional)
	case "list":
		if u.list == nil {
			return fmt.Errorf("field \"list\" is required")
		}
		return v.VisitList(*u.list)
	case "set":
		if u.set == nil {
			return fmt.Errorf("field \"set\" is required")
		}
		return v.VisitSet(*u.set)
	case "map":
		if u.map_ == nil {
			return fmt.Errorf("field \"map\" is required")
		}
		return v.VisitMap(*u.map_)
	case "reference":
		if u.reference == nil {
			return fmt.Errorf("field \"reference\" is required")
		}
		return v.VisitReference(*u.reference)
	case "external":
		if u.external == nil {
			return fmt.Errorf("field \"external\" is required")
		}
		return v.VisitExternal(*u.external)
	}
}

type TypeVisitor interface {
	VisitPrimitive(v PrimitiveType) error
	VisitOptional(v OptionalType) error
	VisitList(v ListType) error
	VisitSet(v SetType) error
	VisitMap(v MapType) error
	VisitReference(v TypeName) error
	VisitExternal(v ExternalReference) error
	VisitUnknown(typeName string) error
}

func (u *Type) AcceptWithContext(ctx context.Context, v TypeVisitorWithContext) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknownWithContext(ctx, u.typ)
	case "primitive":
		if u.primitive == nil {
			return fmt.Errorf("field \"primitive\" is required")
		}
		return v.VisitPrimitiveWithContext(ctx, *u.primitive)
	case "optional":
		if u.optional == nil {
			return fmt.Errorf("field \"optional\" is required")
		}
		return v.VisitOptionalWithContext(ctx, *u.optional)
	case "list":
		if u.list == nil {
			return fmt.Errorf("field \"list\" is required")
		}
		return v.VisitListWithContext(ctx, *u.list)
	case "set":
		if u.set == nil {
			return fmt.Errorf("field \"set\" is required")
		}
		return v.VisitSetWithContext(ctx, *u.set)
	case "map":
		if u.map_ == nil {
			return fmt.Errorf("field \"map\" is required")
		}
		return v.VisitMapWithContext(ctx, *u.map_)
	case "reference":
		if u.reference == nil {
			return fmt.Errorf("field \"reference\" is required")
		}
		return v.VisitReferenceWithContext(ctx, *u.reference)
	case "external":
		if u.external == nil {
			return fmt.Errorf("field \"external\" is required")
		}
		return v.VisitExternalWithContext(ctx, *u.external)
	}
}

type TypeVisitorWithContext interface {
	VisitPrimitiveWithContext(ctx context.Context, v PrimitiveType) error
	VisitOptionalWithContext(ctx context.Context, v OptionalType) error
	VisitListWithContext(ctx context.Context, v ListType) error
	VisitSetWithContext(ctx context.Context, v SetType) error
	VisitMapWithContext(ctx context.Context, v MapType) error
	VisitReferenceWithContext(ctx context.Context, v TypeName) error
	VisitExternalWithContext(ctx context.Context, v ExternalReference) error
	VisitUnknownWithContext(ctx context.Context, typeName string) error
}

func NewTypeFromPrimitive(v PrimitiveType) Type {
	return Type{typ: "primitive", primitive: &v}
}

func NewTypeFromOptional(v OptionalType) Type {
	return Type{typ: "optional", optional: &v}
}

func NewTypeFromList(v ListType) Type {
	return Type{typ: "list", list: &v}
}

func NewTypeFromSet(v SetType) Type {
	return Type{typ: "set", set: &v}
}

func NewTypeFromMap(v MapType) Type {
	return Type{typ: "map", map_: &v}
}

func NewTypeFromReference(v TypeName) Type {
	return Type{typ: "reference", reference: &v}
}

func NewTypeFromExternal(v ExternalReference) Type {
	return Type{typ: "external", external: &v}
}

type TypeDefinition struct {
	typ    string
	alias  *AliasDefinition
	enum   *EnumDefinition
	object *ObjectDefinition
	union  *UnionDefinition
}

type typeDefinitionDeserializer struct {
	Type   string            `json:"type"`
	Alias  *AliasDefinition  `json:"alias"`
	Enum   *EnumDefinition   `json:"enum"`
	Object *ObjectDefinition `json:"object"`
	Union  *UnionDefinition  `json:"union"`
}

func (u *typeDefinitionDeserializer) toStruct() TypeDefinition {
	return TypeDefinition{typ: u.Type, alias: u.Alias, enum: u.Enum, object: u.Object, union: u.Union}
}

func (u *TypeDefinition) toSerializer() (interface{}, error) {
	switch u.typ {
	default:
		return nil, fmt.Errorf("unknown type %q", u.typ)
	case "alias":
		if u.alias == nil {
			return nil, fmt.Errorf("field \"alias\" is required")
		}
		return struct {
			Type  string          `json:"type"`
			Alias AliasDefinition `json:"alias"`
		}{Type: "alias", Alias: *u.alias}, nil
	case "enum":
		if u.enum == nil {
			return nil, fmt.Errorf("field \"enum\" is required")
		}
		return struct {
			Type string         `json:"type"`
			Enum EnumDefinition `json:"enum"`
		}{Type: "enum", Enum: *u.enum}, nil
	case "object":
		if u.object == nil {
			return nil, fmt.Errorf("field \"object\" is required")
		}
		return struct {
			Type   string           `json:"type"`
			Object ObjectDefinition `json:"object"`
		}{Type: "object", Object: *u.object}, nil
	case "union":
		if u.union == nil {
			return nil, fmt.Errorf("field \"union\" is required")
		}
		return struct {
			Type  string          `json:"type"`
			Union UnionDefinition `json:"union"`
		}{Type: "union", Union: *u.union}, nil
	}
}

func (u TypeDefinition) MarshalJSON() ([]byte, error) {
	ser, err := u.toSerializer()
	if err != nil {
		return nil, err
	}
	return safejson.Marshal(ser)
}

func (u *TypeDefinition) UnmarshalJSON(data []byte) error {
	var deser typeDefinitionDeserializer
	if err := safejson.Unmarshal(data, &deser); err != nil {
		return err
	}
	*u = deser.toStruct()
	switch u.typ {
	case "alias":
		if u.alias == nil {
			return fmt.Errorf("field \"alias\" is required")
		}
	case "enum":
		if u.enum == nil {
			return fmt.Errorf("field \"enum\" is required")
		}
	case "object":
		if u.object == nil {
			return fmt.Errorf("field \"object\" is required")
		}
	case "union":
		if u.union == nil {
			return fmt.Errorf("field \"union\" is required")
		}
	}
	return nil
}

func (u TypeDefinition) MarshalYAML() (interface{}, error) {
	jsonBytes, err := u.MarshalJSON()
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (u *TypeDefinition) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return u.UnmarshalJSON(jsonBytes)
}

func (u *TypeDefinition) AcceptFuncs(aliasFunc func(AliasDefinition) error, enumFunc func(EnumDefinition) error, objectFunc func(ObjectDefinition) error, unionFunc func(UnionDefinition) error, unknownFunc func(string) error) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return unknownFunc(u.typ)
	case "alias":
		if u.alias == nil {
			return fmt.Errorf("field \"alias\" is required")
		}
		return aliasFunc(*u.alias)
	case "enum":
		if u.enum == nil {
			return fmt.Errorf("field \"enum\" is required")
		}
		return enumFunc(*u.enum)
	case "object":
		if u.object == nil {
			return fmt.Errorf("field \"object\" is required")
		}
		return objectFunc(*u.object)
	case "union":
		if u.union == nil {
			return fmt.Errorf("field \"union\" is required")
		}
		return unionFunc(*u.union)
	}
}

func (u *TypeDefinition) AliasNoopSuccess(AliasDefinition) error {
	return nil
}

func (u *TypeDefinition) EnumNoopSuccess(EnumDefinition) error {
	return nil
}

func (u *TypeDefinition) ObjectNoopSuccess(ObjectDefinition) error {
	return nil
}

func (u *TypeDefinition) UnionNoopSuccess(UnionDefinition) error {
	return nil
}

func (u *TypeDefinition) ErrorOnUnknown(typeName string) error {
	return fmt.Errorf("invalid value in union type. Type name: %s", typeName)
}

func (u *TypeDefinition) Accept(v TypeDefinitionVisitor) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknown(u.typ)
	case "alias":
		if u.alias == nil {
			return fmt.Errorf("field \"alias\" is required")
		}
		return v.VisitAlias(*u.alias)
	case "enum":
		if u.enum == nil {
			return fmt.Errorf("field \"enum\" is required")
		}
		return v.VisitEnum(*u.enum)
	case "object":
		if u.object == nil {
			return fmt.Errorf("field \"object\" is required")
		}
		return v.VisitObject(*u.object)
	case "union":
		if u.union == nil {
			return fmt.Errorf("field \"union\" is required")
		}
		return v.VisitUnion(*u.union)
	}
}

type TypeDefinitionVisitor interface {
	VisitAlias(v AliasDefinition) error
	VisitEnum(v EnumDefinition) error
	VisitObject(v ObjectDefinition) error
	VisitUnion(v UnionDefinition) error
	VisitUnknown(typeName string) error
}

func (u *TypeDefinition) AcceptWithContext(ctx context.Context, v TypeDefinitionVisitorWithContext) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknownWithContext(ctx, u.typ)
	case "alias":
		if u.alias == nil {
			return fmt.Errorf("field \"alias\" is required")
		}
		return v.VisitAliasWithContext(ctx, *u.alias)
	case "enum":
		if u.enum == nil {
			return fmt.Errorf("field \"enum\" is required")
		}
		return v.VisitEnumWithContext(ctx, *u.enum)
	case "object":
		if u.object == nil {
			return fmt.Errorf("field \"object\" is required")
		}
		return v.VisitObjectWithContext(ctx, *u.object)
	case "union":
		if u.union == nil {
			return fmt.Errorf("field \"union\" is required")
		}
		return v.VisitUnionWithContext(ctx, *u.union)
	}
}

type TypeDefinitionVisitorWithContext interface {
	VisitAliasWithContext(ctx context.Context, v AliasDefinition) error
	VisitEnumWithContext(ctx context.Context, v EnumDefinition) error
	VisitObjectWithContext(ctx context.Context, v ObjectDefinition) error
	VisitUnionWithContext(ctx context.Context, v UnionDefinition) error
	VisitUnknownWithContext(ctx context.Context, typeName string) error
}

func NewTypeDefinitionFromAlias(v AliasDefinition) TypeDefinition {
	return TypeDefinition{typ: "alias", alias: &v}
}

func NewTypeDefinitionFromEnum(v EnumDefinition) TypeDefinition {
	return TypeDefinition{typ: "enum", enum: &v}
}

func NewTypeDefinitionFromObject(v ObjectDefinition) TypeDefinition {
	return TypeDefinition{typ: "object", object: &v}
}

func NewTypeDefinitionFromUnion(v UnionDefinition) TypeDefinition {
	return TypeDefinition{typ: "union", union: &v}
}
