// This file was generated by Conjure and should not be manually edited.

package api

import (
	"regexp"
	"strings"

	"github.com/palantir/conjure-go-runtime/v2/conjure-go-contract/errors"
	werror "github.com/palantir/witchcraft-go-error"
	wparams "github.com/palantir/witchcraft-go-params"
)

var enumValuePattern = regexp.MustCompile("^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$")

type Enum struct {
	val EnumValue
}

type EnumValue string

const (
	EnumValue1 EnumValue = "VALUE1"
	// Docs for an enum value
	EnumValue2  EnumValue = "VALUE2"
	EnumUnknown EnumValue = "UNKNOWN"
)

// Enum_Values returns all known variants of Enum.
func Enum_Values() []EnumValue {
	return []EnumValue{EnumValue1, EnumValue2}
}

func NewEnum(value EnumValue) Enum {
	return Enum{val: value}
}

// IsUnknown returns false for all known variants of Enum and true otherwise.
func (e Enum) IsUnknown() bool {
	switch e.val {
	case EnumValue1, EnumValue2:
		return false
	}
	return true
}

func (e Enum) Value() EnumValue {
	if e.IsUnknown() {
		return EnumUnknown
	}
	return e.val
}

func (e Enum) String() string {
	return string(e.val)
}

func (e Enum) MarshalText() ([]byte, error) {
	return []byte(e.val), nil
}

func (e *Enum) UnmarshalText(data []byte) error {
	switch v := strings.ToUpper(string(data)); v {
	default:
		if !enumValuePattern.MatchString(v) {
			return werror.Convert(errors.NewInvalidArgument(wparams.NewSafeAndUnsafeParamStorer(map[string]interface{}{"enumType": "Enum", "message": "enum value must match pattern ^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"}, map[string]interface{}{"enumValue": string(data)})))
		}
		*e = NewEnum(EnumValue(v))
	case "VALUE1":
		*e = NewEnum(EnumValue1)
	case "VALUE2":
		*e = NewEnum(EnumValue2)
	}
	return nil
}
