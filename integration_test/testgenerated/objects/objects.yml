types:
  definitions:
    default-package: api
    objects:
      AnyValue:
        fields:
          value: any
      Basic:
        fields:
          data: string
      Collections:
        fields:
          mapVar: map<string, list<integer>>
          listVar: list<string>
          multiDim: list<list<map<string, integer>>>
      Compound:
        fields:
          obj: Collections
      ExampleUnion:
        union:
          str: string
          strOptional: optional<string>
          other: integer
      ExampleUuid:
        fields:
          uid: uuid
      OptionalUuidAlias:
        alias: optional<uuid>
      RidAlias:
        alias: rid
      UuidAlias:
        alias: uuid
      UuidAlias2:
        alias: Compound
      BinaryAlias:
        alias: binary
      BinaryMap:
        fields:
          map: map<binary,binary>
      BooleanIntegerMap:
        fields:
          map: map<boolean, integer>
      Type:
        docs: A type using go keywords
        fields:
          type: list<string>
          chan: map<string, string>
      Enum:
        values:
          - VALUE
          - VALUES
          - VALUES_1
          - VALUES_1_1
          - VALUE1
          - value: VALUE2
            docs: Docs for an enum value
      Days:
        values:
          - FRIDAY
          - SATURDAY
      NestedAlias1:
        alias: NestedAlias2
      NestedAlias2:
        alias: NestedAlias3
      NestedAlias3:
        alias: optional<string>
      MapOptional:
        fields:
          map: map<OptionalUuidAlias,string>
      OptionalFields:
        fields:
          opt1: optional<string>
          opt2: optional<string>
          opt3: optional<string>
          reqd: string