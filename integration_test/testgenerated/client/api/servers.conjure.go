// This file was generated by Conjure and should not be manually edited.

package api

import (
	"net/http"

	"github.com/palantir/conjure-go-runtime/conjure-go-contract/codecs"
	"github.com/palantir/conjure-go-runtime/conjure-go-server/rest"
	"github.com/palantir/witchcraft-go-error"
	"github.com/palantir/witchcraft-go-server/witchcraft/wresource"
	"github.com/palantir/witchcraft-go-server/wrouter"
)

// RegisterRoutesTestService registers handlers for the TestService endpoints with a witchcraft wrouter.
// This should typically be called in a witchcraft server's InitFunc.
// impl provides an implementation of each endpoint, which can assume the request parameters have been parsed
// in accordance with the Conjure specification.
func RegisterRoutesTestService(router wrouter.Router, impl TestService) error {
	handler := testServiceHandler{impl: impl}
	resource := wresource.New("testservice", router)
	if err := resource.Get("Echo", "/echo", rest.HandlerFunc(handler.HandleEcho)); err != nil {
		return werror.Wrap(err, "failed to add route", werror.SafeParam("routeName", "Echo"))
	}
	if err := resource.Get("PathParam", "/path/{param}", rest.HandlerFunc(handler.HandlePathParam)); err != nil {
		return werror.Wrap(err, "failed to add route", werror.SafeParam("routeName", "PathParam"))
	}
	if err := resource.Get("Bytes", "/bytes", rest.HandlerFunc(handler.HandleBytes)); err != nil {
		return werror.Wrap(err, "failed to add route", werror.SafeParam("routeName", "Bytes"))
	}
	if err := resource.Get("Binary", "/binary", rest.HandlerFunc(handler.HandleBinary)); err != nil {
		return werror.Wrap(err, "failed to add route", werror.SafeParam("routeName", "Binary"))
	}
	return nil
}

type testServiceHandler struct {
	impl TestService
}

func (t *testServiceHandler) HandleEcho(rw http.ResponseWriter, req *http.Request) error {
	return t.impl.Echo(req.Context())
}

func (t *testServiceHandler) HandlePathParam(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.Error("path params not found on request: ensure this endpoint is registered with wrouter")
	}
	param, ok := pathParams["param"]
	if !ok {
		return werror.Error("path param not present", werror.SafeParam("pathParamName", "param"))
	}
	return t.impl.PathParam(req.Context(), param)
}

func (t *testServiceHandler) HandleBytes(rw http.ResponseWriter, req *http.Request) error {
	respArg, err := t.impl.Bytes(req.Context())
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (t *testServiceHandler) HandleBinary(rw http.ResponseWriter, req *http.Request) error {
	respArg, err := t.impl.Binary(req.Context())
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.Binary.ContentType())
	return codecs.Binary.Encode(rw, respArg)
}
