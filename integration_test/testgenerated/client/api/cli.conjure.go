// This file was generated by Conjure and should not be manually edited.

package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"os"

	"github.com/palantir/conjure-go-runtime/v2/conjure-go-client/httpclient"
	"github.com/palantir/conjure-go-runtime/v2/conjure-go-contract/errors"
	"github.com/palantir/pkg/rid"
	werror "github.com/palantir/witchcraft-go-error"
	"github.com/palantir/witchcraft-go-logging/wlog"
	wlogzap "github.com/palantir/witchcraft-go-logging/wlog-zap"
	"github.com/palantir/witchcraft-go-logging/wlog/evtlog/evt2log"
	"github.com/palantir/witchcraft-go-logging/wlog/svclog/svc1log"
	"github.com/palantir/witchcraft-go-logging/wlog/trclog/trc1log"
	"github.com/palantir/witchcraft-go-tracing/wtracing"
	"github.com/palantir/witchcraft-go-tracing/wzipkin"
	"github.com/spf13/cobra"
	"gopkg.in/yaml.v3"
)

type CLIConfig struct {
	Client httpclient.ClientConfig
}

var configFile *string

// Commands for TestService

var RootTestServiceCmd = &cobra.Command{
	Short: "Runs commands on the TestService",
	Use:   "testService",
}

func getTestServiceClient(ctx context.Context) (TestServiceClient, error) {
	conf, err := loadConfig(ctx)
	if err != nil {
		return nil, werror.WrapWithContextParams(ctx, err, "failed to load CLI configuration file")
	}
	client, err := httpclient.NewClient(httpclient.WithConfig(conf.Client))
	if err != nil {
		return nil, werror.WrapWithContextParams(ctx, err, "failed to create client with provided config")
	}
	return NewTestServiceClient(client), nil
}

var TestServiceechoCmd = &cobra.Command{
	RunE:  testServiceechoCmdRun,
	Short: "Calls the echo endpoint",
	Use:   "echo",
}

func testServiceechoCmdRun(_ *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	client, err := getTestServiceClient(ctx)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServiceechoCmdRunInternal(ctx, client)
}

func testServiceechoCmdRunInternal(ctx context.Context, client TestServiceClient) error {
	var err error

	err = client.Echo(ctx)
	return err
}

var TestServicepathParamCmd = &cobra.Command{
	RunE:  testServicepathParamCmdRun,
	Short: "Calls the pathParam endpoint",
	Use:   "pathParam",
}

var testService_pathParam_param *string

func testServicepathParamCmdRun(_ *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	client, err := getTestServiceClient(ctx)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicepathParamCmdRunInternal(ctx, client)
}

func testServicepathParamCmdRunInternal(ctx context.Context, client TestServiceClient) error {
	var err error

	if testService_pathParam_param == nil {
		return werror.ErrorWithContextParams(ctx, "paramArg is a required argument")
	}
	paramArg := *testService_pathParam_param

	err = client.PathParam(ctx, paramArg)
	return err
}

var TestServicepathParamAliasCmd = &cobra.Command{
	RunE:  testServicepathParamAliasCmdRun,
	Short: "Calls the pathParamAlias endpoint",
	Use:   "pathParamAlias",
}

var testService_pathParamAlias_param *string

func testServicepathParamAliasCmdRun(_ *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	client, err := getTestServiceClient(ctx)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicepathParamAliasCmdRunInternal(ctx, client)
}

func testServicepathParamAliasCmdRunInternal(ctx context.Context, client TestServiceClient) error {
	var err error

	if testService_pathParamAlias_param == nil {
		return werror.ErrorWithContextParams(ctx, "paramArg is a required argument")
	}
	paramArg := StringAlias(*testService_pathParamAlias_param)

	err = client.PathParamAlias(ctx, paramArg)
	return err
}

var TestServicepathParamRidCmd = &cobra.Command{
	RunE:  testServicepathParamRidCmdRun,
	Short: "Calls the pathParamRid endpoint",
	Use:   "pathParamRid",
}

var testService_pathParamRid_param *string

func testServicepathParamRidCmdRun(_ *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	client, err := getTestServiceClient(ctx)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicepathParamRidCmdRunInternal(ctx, client)
}

func testServicepathParamRidCmdRunInternal(ctx context.Context, client TestServiceClient) error {
	var err error

	if testService_pathParamRid_param == nil {
		return werror.ErrorWithContextParams(ctx, "paramArg is a required argument")
	}
	paramArg, err := rid.ParseRID(*testService_pathParamRid_param)
	if err != nil {
		return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"param\" as rid")
	}

	err = client.PathParamRid(ctx, paramArg)
	return err
}

var TestServicepathParamRidAliasCmd = &cobra.Command{
	RunE:  testServicepathParamRidAliasCmdRun,
	Short: "Calls the pathParamRidAlias endpoint",
	Use:   "pathParamRidAlias",
}

var testService_pathParamRidAlias_param *string

func testServicepathParamRidAliasCmdRun(_ *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	client, err := getTestServiceClient(ctx)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicepathParamRidAliasCmdRunInternal(ctx, client)
}

func testServicepathParamRidAliasCmdRunInternal(ctx context.Context, client TestServiceClient) error {
	var err error

	if testService_pathParamRidAlias_param == nil {
		return werror.ErrorWithContextParams(ctx, "paramArg is a required argument")
	}
	paramArgValue, err := rid.ParseRID(*testService_pathParamRidAlias_param)
	if err != nil {
		return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"param\" as rid")
	}
	paramArg := RidAlias(paramArgValue)

	err = client.PathParamRidAlias(ctx, paramArg)
	return err
}

var TestServicebytesCmd = &cobra.Command{
	RunE:  testServicebytesCmdRun,
	Short: "Calls the bytes endpoint",
	Use:   "bytes",
}

func testServicebytesCmdRun(_ *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	client, err := getTestServiceClient(ctx)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicebytesCmdRunInternal(ctx, client)
}

func testServicebytesCmdRunInternal(ctx context.Context, client TestServiceClient) error {
	var err error

	result, err := client.Bytes(ctx)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Printf("%v\n", string(resultBytes))
	return nil
}

var TestServicebinaryCmd = &cobra.Command{
	RunE:  testServicebinaryCmdRun,
	Short: "Calls the binary endpoint",
	Use:   "binary",
}

func testServicebinaryCmdRun(_ *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	client, err := getTestServiceClient(ctx)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicebinaryCmdRunInternal(ctx, client)
}

func testServicebinaryCmdRunInternal(ctx context.Context, client TestServiceClient) error {
	var err error

	result, err := client.Binary(ctx)
	if err != nil {
		return err
	}
	_, err = io.Copy(os.Stdout, result)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to write result bytes to stdout")
	}
	return result.Close()
}

var TestServicemaybeBinaryCmd = &cobra.Command{
	RunE:  testServicemaybeBinaryCmdRun,
	Short: "Calls the maybeBinary endpoint",
	Use:   "maybeBinary",
}

func testServicemaybeBinaryCmdRun(_ *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	client, err := getTestServiceClient(ctx)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicemaybeBinaryCmdRunInternal(ctx, client)
}

func testServicemaybeBinaryCmdRunInternal(ctx context.Context, client TestServiceClient) error {
	var err error

	result, err := client.MaybeBinary(ctx)
	if err != nil {
		return err
	}
	if result == nil {
		return nil
	}
	resultDeref := *result
	_, err = io.Copy(os.Stdout, resultDeref)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to write result bytes to stdout")
	}
	return resultDeref.Close()
}

var TestServicequeryCmd = &cobra.Command{
	RunE:  testServicequeryCmdRun,
	Short: "Calls the query endpoint",
	Use:   "query",
}

var testService_query_query *string

func testServicequeryCmdRun(_ *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	client, err := getTestServiceClient(ctx)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicequeryCmdRunInternal(ctx, client)
}

func testServicequeryCmdRunInternal(ctx context.Context, client TestServiceClient) error {
	var err error

	var testService_query_queryDeref string
	if testService_query_query != nil {
		testService_query_queryDeref = *testService_query_query
	}
	var queryArg *StringAlias
	if queryArgStr := testService_query_queryDeref; queryArgStr != "" {
		queryArgInternal := StringAlias(queryArgStr)
		queryArg = &queryArgInternal
	}

	err = client.Query(ctx, queryArg)
	return err
}

func loadConfig(ctx context.Context) (CLIConfig, error) {
	var emptyConfig CLIConfig
	if configFile == nil {
		return emptyConfig, werror.ErrorWithContextParams(ctx, "config file location must be specified")
	}
	confBytes, err := ioutil.ReadFile(*configFile)
	if err != nil {
		return emptyConfig, err
	}
	var conf CLIConfig
	err = yaml.Unmarshal(confBytes, &conf)
	if err != nil {
		return emptyConfig, err
	}
	return conf, nil
}

func getCLIContext() context.Context {
	ctx := context.Background()
	wlog.SetDefaultLoggerProvider(wlogzap.LoggerProvider())
	ctx = svc1log.WithLogger(ctx, svc1log.New(os.Stdout, wlog.DebugLevel))
	traceLogger := trc1log.DefaultLogger()
	ctx = trc1log.WithLogger(ctx, traceLogger)
	ctx = evt2log.WithLogger(ctx, evt2log.New(os.Stdout))
	tracer, err := wzipkin.NewTracer(traceLogger)
	if err != nil {
		return ctx
	}
	return wtracing.ContextWithTracer(ctx, tracer)
}

func RegisterCommands(rootCmd *cobra.Command) {
	rootCmd.AddCommand(RootTestServiceCmd)
}

func init() {
	// TestService commands and flags
	RootTestServiceCmd.PersistentFlags().StringVarP(configFile, "conf", "", "../var/conf/configuration.yml", "The configuration file is optional. The default path is ./var/conf/configuration.yml.")
	RootTestServiceCmd.AddCommand(TestServiceechoCmd)
	RootTestServiceCmd.AddCommand(TestServicepathParamCmd)
	TestServicepathParamCmd.PersistentFlags().StringVarP(testService_pathParam_param, "param", "", "", "param is a required param.")
	RootTestServiceCmd.AddCommand(TestServicepathParamAliasCmd)
	TestServicepathParamAliasCmd.PersistentFlags().StringVarP(testService_pathParamAlias_param, "param", "", "", "param is a required param.")
	RootTestServiceCmd.AddCommand(TestServicepathParamRidCmd)
	TestServicepathParamRidCmd.PersistentFlags().StringVarP(testService_pathParamRid_param, "param", "", "", "param is a required param.")
	RootTestServiceCmd.AddCommand(TestServicepathParamRidAliasCmd)
	TestServicepathParamRidAliasCmd.PersistentFlags().StringVarP(testService_pathParamRidAlias_param, "param", "", "", "param is a required param.")
	RootTestServiceCmd.AddCommand(TestServicebytesCmd)
	RootTestServiceCmd.AddCommand(TestServicebinaryCmd)
	RootTestServiceCmd.AddCommand(TestServicemaybeBinaryCmd)
	RootTestServiceCmd.AddCommand(TestServicequeryCmd)
	TestServicequeryCmd.PersistentFlags().StringVarP(testService_query_query, "query", "", "", "query is an optional param.")
}
