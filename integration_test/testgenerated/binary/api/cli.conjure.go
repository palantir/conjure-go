// This file was generated by Conjure and should not be manually edited.

package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"os"

	"github.com/palantir/conjure-go-runtime/v2/conjure-go-client/httpclient"
	"github.com/palantir/conjure-go-runtime/v2/conjure-go-contract/codecs"
	"github.com/palantir/conjure-go-runtime/v2/conjure-go-contract/errors"
	werror "github.com/palantir/witchcraft-go-error"
	"github.com/palantir/witchcraft-go-logging/wlog"
	wlogzap "github.com/palantir/witchcraft-go-logging/wlog-zap"
	"github.com/palantir/witchcraft-go-logging/wlog/evtlog/evt2log"
	"github.com/palantir/witchcraft-go-logging/wlog/svclog/svc1log"
	"github.com/palantir/witchcraft-go-logging/wlog/trclog/trc1log"
	"github.com/palantir/witchcraft-go-tracing/wtracing"
	"github.com/palantir/witchcraft-go-tracing/wzipkin"
	"github.com/spf13/cobra"
	pflag "github.com/spf13/pflag"
	"gopkg.in/yaml.v3"
)

type CLIConfig struct {
	Client httpclient.ClientConfig
}

// Commands for TestService

var RootTestServiceCmd = &cobra.Command{
	Short: "Runs commands on the TestService",
	Use:   "testService",
}

func getTestServiceClient(ctx context.Context, flags *pflag.FlagSet) (TestServiceClient, error) {
	conf, err := loadConfig(ctx, flags)
	if err != nil {
		return nil, werror.WrapWithContextParams(ctx, err, "failed to load CLI configuration file")
	}
	client, err := httpclient.NewClient(httpclient.WithConfig(conf.Client))
	if err != nil {
		return nil, werror.WrapWithContextParams(ctx, err, "failed to create client with provided config")
	}
	return NewTestServiceClient(client), nil
}

var TestServicebinaryAliasOptionalCmd = &cobra.Command{
	RunE:  testServicebinaryAliasOptionalCmdRun,
	Short: "Calls the binaryAliasOptional endpoint",
	Use:   "binaryAliasOptional",
}

func testServicebinaryAliasOptionalCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicebinaryAliasOptionalCmdRunInternal(ctx, flags, client)
}

func testServicebinaryAliasOptionalCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	result, err := client.BinaryAliasOptional(ctx)
	if err != nil {
		return err
	}
	if result == nil {
		return nil
	}
	resultDeref := *result
	_, err = io.Copy(os.Stdout, resultDeref)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to write result bytes to stdout")
	}
	return resultDeref.Close()
}

var TestServicebinaryOptionalCmd = &cobra.Command{
	RunE:  testServicebinaryOptionalCmdRun,
	Short: "Calls the binaryOptional endpoint",
	Use:   "binaryOptional",
}

func testServicebinaryOptionalCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicebinaryOptionalCmdRunInternal(ctx, flags, client)
}

func testServicebinaryOptionalCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	result, err := client.BinaryOptional(ctx)
	if err != nil {
		return err
	}
	if result == nil {
		return nil
	}
	resultDeref := *result
	_, err = io.Copy(os.Stdout, resultDeref)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to write result bytes to stdout")
	}
	return resultDeref.Close()
}

var TestServicebinaryListCmd = &cobra.Command{
	RunE:  testServicebinaryListCmdRun,
	Short: "Calls the binaryList endpoint",
	Use:   "binaryList",
}

func testServicebinaryListCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicebinaryListCmdRunInternal(ctx, flags, client)
}

func testServicebinaryListCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bodyRaw, err := flags.GetString("body")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument body")
	}
	if bodyRaw == "" {
		return werror.ErrorWithContextParams(ctx, "bodyArg is a required argument")
	}
	var bodyArg [][]byte
	bodyArgBytes := []byte(bodyRaw)
	if err := codecs.JSON.Decode(bytes.NewReader(bodyArgBytes), &bodyArg); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}

	result, err := client.BinaryList(ctx, bodyArg)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Printf("%v\n", string(resultBytes))
	return nil
}

var TestServicebytesCmd = &cobra.Command{
	RunE:  testServicebytesCmdRun,
	Short: "Calls the bytes endpoint",
	Use:   "bytes",
}

func testServicebytesCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicebytesCmdRunInternal(ctx, flags, client)
}

func testServicebytesCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bodyRaw, err := flags.GetString("body")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument body")
	}
	if bodyRaw == "" {
		return werror.ErrorWithContextParams(ctx, "bodyArg is a required argument")
	}
	var bodyArg CustomObject
	bodyArgBytes := []byte(bodyRaw)
	if err := codecs.JSON.Decode(bytes.NewReader(bodyArgBytes), &bodyArg); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}

	result, err := client.Bytes(ctx, bodyArg)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Printf("%v\n", string(resultBytes))
	return nil
}

func loadConfig(ctx context.Context, flags *pflag.FlagSet) (CLIConfig, error) {
	var emptyConfig CLIConfig
	configPath, err := flags.GetString("conf")
	if err != nil || configPath == "" {
		return emptyConfig, werror.WrapWithContextParams(ctx, err, "config file location must be specified")
	}
	confBytes, err := ioutil.ReadFile(configPath)
	if err != nil {
		return emptyConfig, err
	}
	var conf CLIConfig
	err = yaml.Unmarshal(confBytes, &conf)
	if err != nil {
		return emptyConfig, err
	}
	return conf, nil
}

func getCLIContext() context.Context {
	ctx := context.Background()
	wlog.SetDefaultLoggerProvider(wlogzap.LoggerProvider())
	ctx = svc1log.WithLogger(ctx, svc1log.New(os.Stdout, wlog.DebugLevel))
	traceLogger := trc1log.DefaultLogger()
	ctx = trc1log.WithLogger(ctx, traceLogger)
	ctx = evt2log.WithLogger(ctx, evt2log.New(os.Stdout))
	tracer, err := wzipkin.NewTracer(traceLogger)
	if err != nil {
		return ctx
	}
	return wtracing.ContextWithTracer(ctx, tracer)
}

func RegisterCommands(rootCmd *cobra.Command) {
	rootCmd.AddCommand(RootTestServiceCmd)
}

func init() {
	// TestService commands and flags
	RootTestServiceCmd.PersistentFlags().String("conf", "../var/conf/configuration.yml", "The configuration file is optional. The default path is ./var/conf/configuration.yml.")
	RootTestServiceCmd.AddCommand(TestServicebinaryAliasOptionalCmd)
	RootTestServiceCmd.AddCommand(TestServicebinaryOptionalCmd)
	RootTestServiceCmd.AddCommand(TestServicebinaryListCmd)
	TestServicebinaryListCmd.Flags().String("body", "", "body is a required param.")
	RootTestServiceCmd.AddCommand(TestServicebytesCmd)
	TestServicebytesCmd.Flags().String("body", "", "body is a required param.")
}
