// This file was generated by Conjure and should not be manually edited.

package api

import (
	"context"
	"encoding/base64"
	"io"
	"net/http"

	httpclient "github.com/palantir/conjure-go-runtime/v2/conjure-go-client/httpclient"
	codecs "github.com/palantir/conjure-go-runtime/v2/conjure-go-contract/codecs"
	binary "github.com/palantir/pkg/binary"
	werror "github.com/palantir/witchcraft-go-error"
	gjson "github.com/tidwall/gjson"
)

type TestServiceClient interface {
	BinaryAlias(ctx context.Context, bodyArg func() io.ReadCloser) (io.ReadCloser, error)
	BinaryAliasOptional(ctx context.Context) (*io.ReadCloser, error)
	BinaryAliasAlias(ctx context.Context, bodyArg func() io.ReadCloser) (*io.ReadCloser, error)
	Binary(ctx context.Context, bodyArg func() io.ReadCloser) (io.ReadCloser, error)
	BinaryOptional(ctx context.Context) (*io.ReadCloser, error)
	BinaryList(ctx context.Context, bodyArg [][]byte) ([][]byte, error)
	Bytes(ctx context.Context, bodyArg CustomObject) (CustomObject, error)
}

type testServiceClient struct {
	client httpclient.Client
}

func NewTestServiceClient(client httpclient.Client) TestServiceClient {
	return &testServiceClient{client: client}
}

func (c *testServiceClient) BinaryAlias(ctx context.Context, bodyArg func() io.ReadCloser) (returnVal io.ReadCloser, returnErr error) {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("BinaryAlias"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/binaryAlias"))
	requestParams = append(requestParams, httpclient.WithRawRequestBodyProvider(bodyArg))
	requestParams = append(requestParams, httpclient.WithRawResponseBody())
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		returnErr = werror.WrapWithContextParams(ctx, err, "binaryAlias failed")
		return
	}
	returnVal = resp.Body
	return
}

func (c *testServiceClient) BinaryAliasOptional(ctx context.Context) (returnVal *io.ReadCloser, returnErr error) {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("BinaryAliasOptional"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/binaryAliasOptional"))
	requestParams = append(requestParams, httpclient.WithRawResponseBody())
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		returnErr = werror.WrapWithContextParams(ctx, err, "binaryAliasOptional failed")
		return
	}
	if resp.StatusCode == http.StatusNoContent {
		return
	}
	returnVal = &resp.Body
	return
}

func (c *testServiceClient) BinaryAliasAlias(ctx context.Context, bodyArg func() io.ReadCloser) (returnVal *io.ReadCloser, returnErr error) {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("BinaryAliasAlias"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/binaryAliasAlias"))
	requestParams = append(requestParams, httpclient.WithRawRequestBodyProvider(bodyArg))
	requestParams = append(requestParams, httpclient.WithRawResponseBody())
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		returnErr = werror.WrapWithContextParams(ctx, err, "binaryAliasAlias failed")
		return
	}
	if resp.StatusCode == http.StatusNoContent {
		return
	}
	returnVal = &resp.Body
	return
}

func (c *testServiceClient) Binary(ctx context.Context, bodyArg func() io.ReadCloser) (returnVal io.ReadCloser, returnErr error) {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("Binary"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/binary"))
	requestParams = append(requestParams, httpclient.WithRawRequestBodyProvider(bodyArg))
	requestParams = append(requestParams, httpclient.WithRawResponseBody())
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		returnErr = werror.WrapWithContextParams(ctx, err, "binary failed")
		return
	}
	returnVal = resp.Body
	return
}

func (c *testServiceClient) BinaryOptional(ctx context.Context) (returnVal *io.ReadCloser, returnErr error) {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("BinaryOptional"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/binaryOptional"))
	requestParams = append(requestParams, httpclient.WithRawResponseBody())
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		returnErr = werror.WrapWithContextParams(ctx, err, "binaryOptional failed")
		return
	}
	if resp.StatusCode == http.StatusNoContent {
		return
	}
	returnVal = &resp.Body
	return
}

func (c *testServiceClient) BinaryList(ctx context.Context, bodyArg [][]byte) (returnVal [][]byte, returnErr error) {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("BinaryList"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/binaryList"))
	requestParams = append(requestParams, httpclient.WithRequestAppendFunc(codecs.JSON.ContentType(), func(out []byte) ([]byte, error) {
		out = append(out, '[')
		for i := range bodyArg {
			out = append(out, '"')
			if len(bodyArg[i]) > 0 {
				b64out := make([]byte, base64.StdEncoding.EncodedLen(len(bodyArg[i])))
				base64.StdEncoding.Encode(b64out, bodyArg[i])
				out = append(out, b64out...)
			}
			out = append(out, '"')
			if i < len(bodyArg)-1 {
				out = append(out, ',')
			}
		}
		out = append(out, ']')
		return out, nil
	}))
	requestParams = append(requestParams, httpclient.WithResponseUnmarshalFunc(codecs.JSON.Accept(), func(data []byte) error {
		ctx := ctx
		if !gjson.ValidBytes(data) {
			return werror.ErrorWithContextParams(ctx, "invalid JSON for list<binary>")
		}
		value := gjson.ParseBytes(data)
		var err error
		if !value.IsArray() {
			err = werror.ErrorWithContextParams(ctx, "list<binary> expected JSON array")
			return err
		}
		value.ForEach(func(_, value gjson.Result) bool {
			var listElement []byte
			if value.Type != gjson.String {
				err = werror.ErrorWithContextParams(ctx, "list<binary> list element expected JSON string")
				return false
			}
			listElement, err = binary.Binary(value.Str).Bytes()
			if err != nil {
				err = werror.WrapWithContextParams(ctx, err, "list<binary> list element")
				return false
			}
			returnVal = append(returnVal, listElement)
			return err == nil
		})
		if err != nil {
			return err
		}
		return nil
	}))
	requestParams = append(requestParams, httpclient.WithRequiredResponse())
	if _, err := c.client.Do(ctx, requestParams...); err != nil {
		returnErr = werror.WrapWithContextParams(ctx, err, "binaryList failed")
		return
	}
	return
}

func (c *testServiceClient) Bytes(ctx context.Context, bodyArg CustomObject) (returnVal CustomObject, returnErr error) {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("Bytes"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/bytes"))
	requestParams = append(requestParams, httpclient.WithRequestAppendFunc(codecs.JSON.ContentType(), bodyArg.AppendJSON))
	requestParams = append(requestParams, httpclient.WithResponseUnmarshalFunc(codecs.JSON.Accept(), returnVal.UnmarshalJSON))
	requestParams = append(requestParams, httpclient.WithRequiredResponse())
	if _, err := c.client.Do(ctx, requestParams...); err != nil {
		returnErr = werror.WrapWithContextParams(ctx, err, "bytes failed")
		return
	}
	return
}
