// This file was generated by Conjure and should not be manually edited.

package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"strconv"

	"github.com/palantir/conjure-go-runtime/v2/conjure-go-client/httpclient"
	"github.com/palantir/conjure-go-runtime/v2/conjure-go-contract/codecs"
	"github.com/palantir/conjure-go-runtime/v2/conjure-go-contract/errors"
	"github.com/palantir/pkg/bearertoken"
	"github.com/palantir/pkg/datetime"
	"github.com/palantir/pkg/rid"
	"github.com/palantir/pkg/safelong"
	"github.com/palantir/pkg/uuid"
	werror "github.com/palantir/witchcraft-go-error"
	"github.com/palantir/witchcraft-go-logging/wlog"
	wlogzap "github.com/palantir/witchcraft-go-logging/wlog-zap"
	"github.com/palantir/witchcraft-go-logging/wlog/evtlog/evt2log"
	"github.com/palantir/witchcraft-go-logging/wlog/svclog/svc1log"
	"github.com/palantir/witchcraft-go-logging/wlog/trclog/trc1log"
	"github.com/palantir/witchcraft-go-tracing/wtracing"
	"github.com/palantir/witchcraft-go-tracing/wzipkin"
	"github.com/spf13/cobra"
	pflag "github.com/spf13/pflag"
	"gopkg.in/yaml.v3"
)

type CLIConfig struct {
	Client httpclient.ClientConfig
}

// Commands for TestService

var RootTestServiceCmd = &cobra.Command{
	Short: "Runs commands on the TestService",
	Use:   "testService",
}

func getTestServiceClient(ctx context.Context, flags *pflag.FlagSet) (TestServiceClient, error) {
	conf, err := loadConfig(ctx, flags)
	if err != nil {
		return nil, werror.WrapWithContextParams(ctx, err, "failed to load CLI configuration file")
	}
	client, err := httpclient.NewClient(httpclient.WithConfig(conf.Client))
	if err != nil {
		return nil, werror.WrapWithContextParams(ctx, err, "failed to create client with provided config")
	}
	return NewTestServiceClient(client), nil
}

var TestServiceechoCmd = &cobra.Command{
	RunE:  testServiceechoCmdRun,
	Short: "Calls the echo endpoint",
	Use:   "echo",
}

func testServiceechoCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServiceechoCmdRunInternal(ctx, flags, client)
}

func testServiceechoCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	err = client.Echo(ctx, __authVarArg)
	return err
}

var TestServiceechoStringsCmd = &cobra.Command{
	RunE:  testServiceechoStringsCmdRun,
	Short: "Calls the echoStrings endpoint",
	Use:   "echoStrings",
}

func testServiceechoStringsCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServiceechoStringsCmdRunInternal(ctx, flags, client)
}

func testServiceechoStringsCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bodyRaw, err := flags.GetString("body")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument body")
	}
	if bodyRaw == "" {
		return werror.ErrorWithContextParams(ctx, "bodyArg is a required argument")
	}
	var bodyArg []string
	bodyArgBytes := []byte(bodyRaw)
	if err := codecs.JSON.Decode(bytes.NewReader(bodyArgBytes), &bodyArg); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}

	result, err := client.EchoStrings(ctx, bodyArg)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Printf("%v\n", string(resultBytes))
	return nil
}

var TestServiceechoCustomObjectCmd = &cobra.Command{
	RunE:  testServiceechoCustomObjectCmdRun,
	Short: "Calls the echoCustomObject endpoint",
	Use:   "echoCustomObject",
}

func testServiceechoCustomObjectCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServiceechoCustomObjectCmdRunInternal(ctx, flags, client)
}

func testServiceechoCustomObjectCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bodyRaw, err := flags.GetString("body")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument body")
	}
	var bodyArg *CustomObject
	bodyArgBytes := []byte(bodyRaw)
	if err := codecs.JSON.Decode(bytes.NewReader(bodyArgBytes), &bodyArg); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}

	result, err := client.EchoCustomObject(ctx, bodyArg)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Printf("%v\n", string(resultBytes))
	return nil
}

var TestServiceechoOptionalAliasCmd = &cobra.Command{
	RunE:  testServiceechoOptionalAliasCmdRun,
	Short: "Calls the echoOptionalAlias endpoint",
	Use:   "echoOptionalAlias",
}

func testServiceechoOptionalAliasCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServiceechoOptionalAliasCmdRunInternal(ctx, flags, client)
}

func testServiceechoOptionalAliasCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bodyRaw, err := flags.GetString("body")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument body")
	}
	var bodyArgValue *int
	if bodyArgValueStr1 := bodyRaw; bodyArgValueStr1 != "" {
		bodyArgValueInternal1, err := strconv.Atoi(bodyArgValueStr1)
		if err != nil {
			return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"body\" as integer")
		}
		bodyArgValue = &bodyArgValueInternal1
	}
	bodyArg := OptionalIntegerAlias{Value: bodyArgValue}

	result, err := client.EchoOptionalAlias(ctx, bodyArg)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Printf("%v\n", string(resultBytes))
	return nil
}

var TestServiceechoOptionalListAliasCmd = &cobra.Command{
	RunE:  testServiceechoOptionalListAliasCmdRun,
	Short: "Calls the echoOptionalListAlias endpoint",
	Use:   "echoOptionalListAlias",
}

func testServiceechoOptionalListAliasCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServiceechoOptionalListAliasCmdRunInternal(ctx, flags, client)
}

func testServiceechoOptionalListAliasCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bodyRaw, err := flags.GetString("body")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument body")
	}
	var bodyArg OptionalListAlias
	bodyArgBytes := []byte(bodyRaw)
	if err := codecs.JSON.Decode(bytes.NewReader(bodyArgBytes), &bodyArg); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}

	result, err := client.EchoOptionalListAlias(ctx, bodyArg)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Printf("%v\n", string(resultBytes))
	return nil
}

var TestServicegetPathParamCmd = &cobra.Command{
	RunE:  testServicegetPathParamCmdRun,
	Short: "Calls the getPathParam endpoint",
	Use:   "getPathParam",
}

func testServicegetPathParamCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicegetPathParamCmdRunInternal(ctx, flags, client)
}

func testServicegetPathParamCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	myPathParamRaw, err := flags.GetString("myPathParam")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myPathParam")
	}
	if myPathParamRaw == "" {
		return werror.ErrorWithContextParams(ctx, "myPathParamArg is a required argument")
	}
	myPathParamArg := myPathParamRaw

	err = client.GetPathParam(ctx, __authVarArg, myPathParamArg)
	return err
}

var TestServicegetPathParamAliasCmd = &cobra.Command{
	RunE:  testServicegetPathParamAliasCmdRun,
	Short: "Calls the getPathParamAlias endpoint",
	Use:   "getPathParamAlias",
}

func testServicegetPathParamAliasCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicegetPathParamAliasCmdRunInternal(ctx, flags, client)
}

func testServicegetPathParamAliasCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	myPathParamRaw, err := flags.GetString("myPathParam")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myPathParam")
	}
	if myPathParamRaw == "" {
		return werror.ErrorWithContextParams(ctx, "myPathParamArg is a required argument")
	}
	myPathParamArg := StringAlias(myPathParamRaw)

	err = client.GetPathParamAlias(ctx, __authVarArg, myPathParamArg)
	return err
}

var TestServicequeryParamListCmd = &cobra.Command{
	RunE:  testServicequeryParamListCmdRun,
	Short: "Calls the queryParamList endpoint",
	Use:   "queryParamList",
}

func testServicequeryParamListCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicequeryParamListCmdRunInternal(ctx, flags, client)
}

func testServicequeryParamListCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	myQueryParam1Raw, err := flags.GetString("myQueryParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam1")
	}
	if myQueryParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myQueryParam1Arg is a required argument")
	}
	var myQueryParam1Arg []string
	myQueryParam1ArgBytes := []byte(myQueryParam1Raw)
	if err := codecs.JSON.Decode(bytes.NewReader(myQueryParam1ArgBytes), &myQueryParam1Arg); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}

	err = client.QueryParamList(ctx, __authVarArg, myQueryParam1Arg)
	return err
}

var TestServicequeryParamListBooleanCmd = &cobra.Command{
	RunE:  testServicequeryParamListBooleanCmdRun,
	Short: "Calls the queryParamListBoolean endpoint",
	Use:   "queryParamListBoolean",
}

func testServicequeryParamListBooleanCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicequeryParamListBooleanCmdRunInternal(ctx, flags, client)
}

func testServicequeryParamListBooleanCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	myQueryParam1Raw, err := flags.GetString("myQueryParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam1")
	}
	if myQueryParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myQueryParam1Arg is a required argument")
	}
	var myQueryParam1Arg []bool
	myQueryParam1ArgBytes := []byte(myQueryParam1Raw)
	if err := codecs.JSON.Decode(bytes.NewReader(myQueryParam1ArgBytes), &myQueryParam1Arg); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}

	err = client.QueryParamListBoolean(ctx, __authVarArg, myQueryParam1Arg)
	return err
}

var TestServicequeryParamListDateTimeCmd = &cobra.Command{
	RunE:  testServicequeryParamListDateTimeCmdRun,
	Short: "Calls the queryParamListDateTime endpoint",
	Use:   "queryParamListDateTime",
}

func testServicequeryParamListDateTimeCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicequeryParamListDateTimeCmdRunInternal(ctx, flags, client)
}

func testServicequeryParamListDateTimeCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	myQueryParam1Raw, err := flags.GetString("myQueryParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam1")
	}
	if myQueryParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myQueryParam1Arg is a required argument")
	}
	var myQueryParam1Arg []datetime.DateTime
	myQueryParam1ArgBytes := []byte(myQueryParam1Raw)
	if err := codecs.JSON.Decode(bytes.NewReader(myQueryParam1ArgBytes), &myQueryParam1Arg); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}

	err = client.QueryParamListDateTime(ctx, __authVarArg, myQueryParam1Arg)
	return err
}

var TestServicequeryParamSetDateTimeCmd = &cobra.Command{
	RunE:  testServicequeryParamSetDateTimeCmdRun,
	Short: "Calls the queryParamSetDateTime endpoint",
	Use:   "queryParamSetDateTime",
}

func testServicequeryParamSetDateTimeCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicequeryParamSetDateTimeCmdRunInternal(ctx, flags, client)
}

func testServicequeryParamSetDateTimeCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	myQueryParam1Raw, err := flags.GetString("myQueryParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam1")
	}
	if myQueryParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myQueryParam1Arg is a required argument")
	}
	var myQueryParam1Arg []datetime.DateTime
	myQueryParam1ArgBytes := []byte(myQueryParam1Raw)
	if err := codecs.JSON.Decode(bytes.NewReader(myQueryParam1ArgBytes), &myQueryParam1Arg); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}

	result, err := client.QueryParamSetDateTime(ctx, __authVarArg, myQueryParam1Arg)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Printf("%v\n", string(resultBytes))
	return nil
}

var TestServicequeryParamListDoubleCmd = &cobra.Command{
	RunE:  testServicequeryParamListDoubleCmdRun,
	Short: "Calls the queryParamListDouble endpoint",
	Use:   "queryParamListDouble",
}

func testServicequeryParamListDoubleCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicequeryParamListDoubleCmdRunInternal(ctx, flags, client)
}

func testServicequeryParamListDoubleCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	myQueryParam1Raw, err := flags.GetString("myQueryParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam1")
	}
	if myQueryParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myQueryParam1Arg is a required argument")
	}
	var myQueryParam1Arg []float64
	myQueryParam1ArgBytes := []byte(myQueryParam1Raw)
	if err := codecs.JSON.Decode(bytes.NewReader(myQueryParam1ArgBytes), &myQueryParam1Arg); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}

	err = client.QueryParamListDouble(ctx, __authVarArg, myQueryParam1Arg)
	return err
}

var TestServicequeryParamListIntegerCmd = &cobra.Command{
	RunE:  testServicequeryParamListIntegerCmdRun,
	Short: "Calls the queryParamListInteger endpoint",
	Use:   "queryParamListInteger",
}

func testServicequeryParamListIntegerCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicequeryParamListIntegerCmdRunInternal(ctx, flags, client)
}

func testServicequeryParamListIntegerCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	myQueryParam1Raw, err := flags.GetString("myQueryParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam1")
	}
	if myQueryParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myQueryParam1Arg is a required argument")
	}
	var myQueryParam1Arg []int
	myQueryParam1ArgBytes := []byte(myQueryParam1Raw)
	if err := codecs.JSON.Decode(bytes.NewReader(myQueryParam1ArgBytes), &myQueryParam1Arg); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}

	err = client.QueryParamListInteger(ctx, __authVarArg, myQueryParam1Arg)
	return err
}

var TestServicequeryParamListRidCmd = &cobra.Command{
	RunE:  testServicequeryParamListRidCmdRun,
	Short: "Calls the queryParamListRid endpoint",
	Use:   "queryParamListRid",
}

func testServicequeryParamListRidCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicequeryParamListRidCmdRunInternal(ctx, flags, client)
}

func testServicequeryParamListRidCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	myQueryParam1Raw, err := flags.GetString("myQueryParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam1")
	}
	if myQueryParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myQueryParam1Arg is a required argument")
	}
	var myQueryParam1Arg []rid.ResourceIdentifier
	myQueryParam1ArgBytes := []byte(myQueryParam1Raw)
	if err := codecs.JSON.Decode(bytes.NewReader(myQueryParam1ArgBytes), &myQueryParam1Arg); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}

	err = client.QueryParamListRid(ctx, __authVarArg, myQueryParam1Arg)
	return err
}

var TestServicequeryParamListSafeLongCmd = &cobra.Command{
	RunE:  testServicequeryParamListSafeLongCmdRun,
	Short: "Calls the queryParamListSafeLong endpoint",
	Use:   "queryParamListSafeLong",
}

func testServicequeryParamListSafeLongCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicequeryParamListSafeLongCmdRunInternal(ctx, flags, client)
}

func testServicequeryParamListSafeLongCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	myQueryParam1Raw, err := flags.GetString("myQueryParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam1")
	}
	if myQueryParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myQueryParam1Arg is a required argument")
	}
	var myQueryParam1Arg []safelong.SafeLong
	myQueryParam1ArgBytes := []byte(myQueryParam1Raw)
	if err := codecs.JSON.Decode(bytes.NewReader(myQueryParam1ArgBytes), &myQueryParam1Arg); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}

	err = client.QueryParamListSafeLong(ctx, __authVarArg, myQueryParam1Arg)
	return err
}

var TestServicequeryParamListStringCmd = &cobra.Command{
	RunE:  testServicequeryParamListStringCmdRun,
	Short: "Calls the queryParamListString endpoint",
	Use:   "queryParamListString",
}

func testServicequeryParamListStringCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicequeryParamListStringCmdRunInternal(ctx, flags, client)
}

func testServicequeryParamListStringCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	myQueryParam1Raw, err := flags.GetString("myQueryParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam1")
	}
	if myQueryParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myQueryParam1Arg is a required argument")
	}
	var myQueryParam1Arg []string
	myQueryParam1ArgBytes := []byte(myQueryParam1Raw)
	if err := codecs.JSON.Decode(bytes.NewReader(myQueryParam1ArgBytes), &myQueryParam1Arg); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}

	err = client.QueryParamListString(ctx, __authVarArg, myQueryParam1Arg)
	return err
}

var TestServicequeryParamListUuidCmd = &cobra.Command{
	RunE:  testServicequeryParamListUuidCmdRun,
	Short: "Calls the queryParamListUuid endpoint",
	Use:   "queryParamListUuid",
}

func testServicequeryParamListUuidCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicequeryParamListUuidCmdRunInternal(ctx, flags, client)
}

func testServicequeryParamListUuidCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	myQueryParam1Raw, err := flags.GetString("myQueryParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam1")
	}
	if myQueryParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myQueryParam1Arg is a required argument")
	}
	var myQueryParam1Arg []uuid.UUID
	myQueryParam1ArgBytes := []byte(myQueryParam1Raw)
	if err := codecs.JSON.Decode(bytes.NewReader(myQueryParam1ArgBytes), &myQueryParam1Arg); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}

	err = client.QueryParamListUuid(ctx, __authVarArg, myQueryParam1Arg)
	return err
}

var TestServicequeryParamExternalStringCmd = &cobra.Command{
	RunE:  testServicequeryParamExternalStringCmdRun,
	Short: "Calls the queryParamExternalString endpoint",
	Use:   "queryParamExternalString",
}

func testServicequeryParamExternalStringCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicequeryParamExternalStringCmdRunInternal(ctx, flags, client)
}

func testServicequeryParamExternalStringCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	myQueryParam1Raw, err := flags.GetString("myQueryParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam1")
	}
	if myQueryParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myQueryParam1Arg is a required argument")
	}
	myQueryParam1Arg := myQueryParam1Raw

	err = client.QueryParamExternalString(ctx, __authVarArg, myQueryParam1Arg)
	return err
}

var TestServicequeryParamExternalIntegerCmd = &cobra.Command{
	RunE:  testServicequeryParamExternalIntegerCmdRun,
	Short: "Calls the queryParamExternalInteger endpoint",
	Use:   "queryParamExternalInteger",
}

func testServicequeryParamExternalIntegerCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicequeryParamExternalIntegerCmdRunInternal(ctx, flags, client)
}

func testServicequeryParamExternalIntegerCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	myQueryParam1Raw, err := flags.GetString("myQueryParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam1")
	}
	if myQueryParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myQueryParam1Arg is a required argument")
	}
	myQueryParam1Arg, err := strconv.Atoi(myQueryParam1Raw)
	if err != nil {
		return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"myQueryParam1\" as integer")
	}

	err = client.QueryParamExternalInteger(ctx, __authVarArg, myQueryParam1Arg)
	return err
}

var TestServicepathParamExternalStringCmd = &cobra.Command{
	RunE:  testServicepathParamExternalStringCmdRun,
	Short: "Calls the pathParamExternalString endpoint",
	Use:   "pathParamExternalString",
}

func testServicepathParamExternalStringCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicepathParamExternalStringCmdRunInternal(ctx, flags, client)
}

func testServicepathParamExternalStringCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	myPathParam1Raw, err := flags.GetString("myPathParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myPathParam1")
	}
	if myPathParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myPathParam1Arg is a required argument")
	}
	myPathParam1Arg := myPathParam1Raw

	err = client.PathParamExternalString(ctx, __authVarArg, myPathParam1Arg)
	return err
}

var TestServicepathParamExternalIntegerCmd = &cobra.Command{
	RunE:  testServicepathParamExternalIntegerCmdRun,
	Short: "Calls the pathParamExternalInteger endpoint",
	Use:   "pathParamExternalInteger",
}

func testServicepathParamExternalIntegerCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicepathParamExternalIntegerCmdRunInternal(ctx, flags, client)
}

func testServicepathParamExternalIntegerCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	myPathParam1Raw, err := flags.GetString("myPathParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myPathParam1")
	}
	if myPathParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myPathParam1Arg is a required argument")
	}
	myPathParam1Arg, err := strconv.Atoi(myPathParam1Raw)
	if err != nil {
		return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"myPathParam1\" as integer")
	}

	err = client.PathParamExternalInteger(ctx, __authVarArg, myPathParam1Arg)
	return err
}

var TestServicepostPathParamCmd = &cobra.Command{
	RunE:  testServicepostPathParamCmdRun,
	Short: "Calls the postPathParam endpoint",
	Use:   "postPathParam",
}

func testServicepostPathParamCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicepostPathParamCmdRunInternal(ctx, flags, client)
}

func testServicepostPathParamCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	myPathParam1Raw, err := flags.GetString("myPathParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myPathParam1")
	}
	if myPathParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myPathParam1Arg is a required argument")
	}
	myPathParam1Arg := myPathParam1Raw

	myPathParam2Raw, err := flags.GetString("myPathParam2")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myPathParam2")
	}
	if myPathParam2Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myPathParam2Arg is a required argument")
	}
	myPathParam2Arg, err := strconv.ParseBool(myPathParam2Raw)
	if err != nil {
		return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"myPathParam2\" as boolean")
	}

	myBodyParamRaw, err := flags.GetString("myBodyParam")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myBodyParam")
	}
	if myBodyParamRaw == "" {
		return werror.ErrorWithContextParams(ctx, "myBodyParamArg is a required argument")
	}
	var myBodyParamArg CustomObject
	myBodyParamArgBytes := []byte(myBodyParamRaw)
	if err := codecs.JSON.Decode(bytes.NewReader(myBodyParamArgBytes), &myBodyParamArg); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}

	myQueryParam1Raw, err := flags.GetString("myQueryParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam1")
	}
	if myQueryParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myQueryParam1Arg is a required argument")
	}
	myQueryParam1Arg := myQueryParam1Raw

	myQueryParam2Raw, err := flags.GetString("myQueryParam2")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam2")
	}
	if myQueryParam2Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myQueryParam2Arg is a required argument")
	}
	myQueryParam2Arg := myQueryParam2Raw

	myQueryParam3Raw, err := flags.GetString("myQueryParam3")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam3")
	}
	if myQueryParam3Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myQueryParam3Arg is a required argument")
	}
	myQueryParam3Arg, err := strconv.ParseFloat(myQueryParam3Raw, 64)
	if err != nil {
		return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"myQueryParam3\" as double")
	}

	myQueryParam4Raw, err := flags.GetString("myQueryParam4")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam4")
	}
	var myQueryParam4Arg *safelong.SafeLong
	if myQueryParam4ArgStr := myQueryParam4Raw; myQueryParam4ArgStr != "" {
		myQueryParam4ArgInternal, err := safelong.ParseSafeLong(myQueryParam4ArgStr)
		if err != nil {
			return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"myQueryParam4\" as safelong")
		}
		myQueryParam4Arg = &myQueryParam4ArgInternal
	}

	myQueryParam5Raw, err := flags.GetString("myQueryParam5")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam5")
	}
	var myQueryParam5Arg *string
	if myQueryParam5ArgStr := myQueryParam5Raw; myQueryParam5ArgStr != "" {
		myQueryParam5ArgInternal := myQueryParam5ArgStr
		myQueryParam5Arg = &myQueryParam5ArgInternal
	}

	myQueryParam6Raw, err := flags.GetString("myQueryParam6")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam6")
	}
	var myQueryParam6ArgValue *int
	if myQueryParam6ArgValueStr1 := myQueryParam6Raw; myQueryParam6ArgValueStr1 != "" {
		myQueryParam6ArgValueInternal1, err := strconv.Atoi(myQueryParam6ArgValueStr1)
		if err != nil {
			return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"myQueryParam6\" as integer")
		}
		myQueryParam6ArgValue = &myQueryParam6ArgValueInternal1
	}
	myQueryParam6Arg := OptionalIntegerAlias{Value: myQueryParam6ArgValue}

	myHeaderParam1Raw, err := flags.GetString("myHeaderParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myHeaderParam1")
	}
	if myHeaderParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myHeaderParam1Arg is a required argument")
	}
	myHeaderParam1Arg, err := safelong.ParseSafeLong(myHeaderParam1Raw)
	if err != nil {
		return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"myHeaderParam1\" as safelong")
	}

	myHeaderParam2Raw, err := flags.GetString("myHeaderParam2")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myHeaderParam2")
	}
	var myHeaderParam2Arg *uuid.UUID
	if myHeaderParam2ArgStr := myHeaderParam2Raw; myHeaderParam2ArgStr != "" {
		myHeaderParam2ArgInternal, err := uuid.ParseUUID(myHeaderParam2ArgStr)
		if err != nil {
			return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"myHeaderParam2\" as uuid")
		}
		myHeaderParam2Arg = &myHeaderParam2ArgInternal
	}

	result, err := client.PostPathParam(ctx, __authVarArg, myPathParam1Arg, myPathParam2Arg, myBodyParamArg, myQueryParam1Arg, myQueryParam2Arg, myQueryParam3Arg, myQueryParam4Arg, myQueryParam5Arg, myQueryParam6Arg, myHeaderParam1Arg, myHeaderParam2Arg)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Printf("%v\n", string(resultBytes))
	return nil
}

var TestServicepostSafeParamsCmd = &cobra.Command{
	RunE:  testServicepostSafeParamsCmdRun,
	Short: "Calls the postSafeParams endpoint",
	Use:   "postSafeParams",
}

func testServicepostSafeParamsCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicepostSafeParamsCmdRunInternal(ctx, flags, client)
}

func testServicepostSafeParamsCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	myPathParam1Raw, err := flags.GetString("myPathParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myPathParam1")
	}
	if myPathParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myPathParam1Arg is a required argument")
	}
	myPathParam1Arg := myPathParam1Raw

	myPathParam2Raw, err := flags.GetString("myPathParam2")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myPathParam2")
	}
	if myPathParam2Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myPathParam2Arg is a required argument")
	}
	myPathParam2Arg, err := strconv.ParseBool(myPathParam2Raw)
	if err != nil {
		return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"myPathParam2\" as boolean")
	}

	myBodyParamRaw, err := flags.GetString("myBodyParam")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myBodyParam")
	}
	if myBodyParamRaw == "" {
		return werror.ErrorWithContextParams(ctx, "myBodyParamArg is a required argument")
	}
	var myBodyParamArg CustomObject
	myBodyParamArgBytes := []byte(myBodyParamRaw)
	if err := codecs.JSON.Decode(bytes.NewReader(myBodyParamArgBytes), &myBodyParamArg); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}

	myQueryParam1Raw, err := flags.GetString("myQueryParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam1")
	}
	if myQueryParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myQueryParam1Arg is a required argument")
	}
	myQueryParam1Arg := myQueryParam1Raw

	myQueryParam2Raw, err := flags.GetString("myQueryParam2")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam2")
	}
	if myQueryParam2Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myQueryParam2Arg is a required argument")
	}
	myQueryParam2Arg := myQueryParam2Raw

	myQueryParam3Raw, err := flags.GetString("myQueryParam3")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam3")
	}
	if myQueryParam3Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myQueryParam3Arg is a required argument")
	}
	myQueryParam3Arg, err := strconv.ParseFloat(myQueryParam3Raw, 64)
	if err != nil {
		return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"myQueryParam3\" as double")
	}

	myQueryParam4Raw, err := flags.GetString("myQueryParam4")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam4")
	}
	var myQueryParam4Arg *safelong.SafeLong
	if myQueryParam4ArgStr := myQueryParam4Raw; myQueryParam4ArgStr != "" {
		myQueryParam4ArgInternal, err := safelong.ParseSafeLong(myQueryParam4ArgStr)
		if err != nil {
			return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"myQueryParam4\" as safelong")
		}
		myQueryParam4Arg = &myQueryParam4ArgInternal
	}

	myQueryParam5Raw, err := flags.GetString("myQueryParam5")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam5")
	}
	var myQueryParam5Arg *string
	if myQueryParam5ArgStr := myQueryParam5Raw; myQueryParam5ArgStr != "" {
		myQueryParam5ArgInternal := myQueryParam5ArgStr
		myQueryParam5Arg = &myQueryParam5ArgInternal
	}

	myHeaderParam1Raw, err := flags.GetString("myHeaderParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myHeaderParam1")
	}
	if myHeaderParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myHeaderParam1Arg is a required argument")
	}
	myHeaderParam1Arg, err := safelong.ParseSafeLong(myHeaderParam1Raw)
	if err != nil {
		return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"myHeaderParam1\" as safelong")
	}

	myHeaderParam2Raw, err := flags.GetString("myHeaderParam2")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myHeaderParam2")
	}
	var myHeaderParam2Arg *uuid.UUID
	if myHeaderParam2ArgStr := myHeaderParam2Raw; myHeaderParam2ArgStr != "" {
		myHeaderParam2ArgInternal, err := uuid.ParseUUID(myHeaderParam2ArgStr)
		if err != nil {
			return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"myHeaderParam2\" as uuid")
		}
		myHeaderParam2Arg = &myHeaderParam2ArgInternal
	}

	err = client.PostSafeParams(ctx, __authVarArg, myPathParam1Arg, myPathParam2Arg, myBodyParamArg, myQueryParam1Arg, myQueryParam2Arg, myQueryParam3Arg, myQueryParam4Arg, myQueryParam5Arg, myHeaderParam1Arg, myHeaderParam2Arg)
	return err
}

var TestServicebytesCmd = &cobra.Command{
	RunE:  testServicebytesCmdRun,
	Short: "Calls the bytes endpoint",
	Use:   "bytes",
}

func testServicebytesCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicebytesCmdRunInternal(ctx, flags, client)
}

func testServicebytesCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	result, err := client.Bytes(ctx)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Printf("%v\n", string(resultBytes))
	return nil
}

var TestServicegetBinaryCmd = &cobra.Command{
	RunE:  testServicegetBinaryCmdRun,
	Short: "Calls the getBinary endpoint",
	Use:   "getBinary",
}

func testServicegetBinaryCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicegetBinaryCmdRunInternal(ctx, flags, client)
}

func testServicegetBinaryCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	result, err := client.GetBinary(ctx)
	if err != nil {
		return err
	}
	_, err = io.Copy(os.Stdout, result)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to write result bytes to stdout")
	}
	return result.Close()
}

var TestServicegetOptionalBinaryCmd = &cobra.Command{
	RunE:  testServicegetOptionalBinaryCmdRun,
	Short: "Calls the getOptionalBinary endpoint",
	Use:   "getOptionalBinary",
}

func testServicegetOptionalBinaryCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicegetOptionalBinaryCmdRunInternal(ctx, flags, client)
}

func testServicegetOptionalBinaryCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	result, err := client.GetOptionalBinary(ctx)
	if err != nil {
		return err
	}
	if result == nil {
		return nil
	}
	resultDeref := *result
	_, err = io.Copy(os.Stdout, resultDeref)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to write result bytes to stdout")
	}
	return resultDeref.Close()
}

var TestServicechanCmd = &cobra.Command{
	RunE:  testServicechanCmdRun,
	Short: "Calls the chan endpoint",
	Use:   "chan",
}

func testServicechanCmdRun(cmd *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	flags := cmd.Flags()
	client, err := getTestServiceClient(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return testServicechanCmdRunInternal(ctx, flags, client)
}

func testServicechanCmdRunInternal(ctx context.Context, flags *pflag.FlagSet, client TestServiceClient) error {
	var err error

	varRaw, err := flags.GetString("var")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument var")
	}
	if varRaw == "" {
		return werror.ErrorWithContextParams(ctx, "varArg is a required argument")
	}
	varArg := varRaw

	importRaw, err := flags.GetString("import")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument import")
	}
	if importRaw == "" {
		return werror.ErrorWithContextParams(ctx, "importArg is a required argument")
	}
	var importArg map[string]string
	importArgBytes := []byte(importRaw)
	if err := codecs.JSON.Decode(bytes.NewReader(importArgBytes), &importArg); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}

	typeRaw, err := flags.GetString("type")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument type")
	}
	if typeRaw == "" {
		return werror.ErrorWithContextParams(ctx, "typeArg is a required argument")
	}
	typeArg := typeRaw

	returnRaw, err := flags.GetString("return")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument return")
	}
	if returnRaw == "" {
		return werror.ErrorWithContextParams(ctx, "returnArg is a required argument")
	}
	returnArg, err := safelong.ParseSafeLong(returnRaw)
	if err != nil {
		return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"return\" as safelong")
	}

	httpRaw, err := flags.GetString("http")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument http")
	}
	if httpRaw == "" {
		return werror.ErrorWithContextParams(ctx, "httpArg is a required argument")
	}
	httpArg := httpRaw

	jsonRaw, err := flags.GetString("json")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument json")
	}
	if jsonRaw == "" {
		return werror.ErrorWithContextParams(ctx, "jsonArg is a required argument")
	}
	jsonArg := jsonRaw

	reqRaw, err := flags.GetString("req")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument req")
	}
	if reqRaw == "" {
		return werror.ErrorWithContextParams(ctx, "reqArg is a required argument")
	}
	reqArg := reqRaw

	rwRaw, err := flags.GetString("rw")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument rw")
	}
	if rwRaw == "" {
		return werror.ErrorWithContextParams(ctx, "rwArg is a required argument")
	}
	rwArg := rwRaw

	err = client.Chan(ctx, varArg, importArg, typeArg, returnArg, httpArg, jsonArg, reqArg, rwArg)
	return err
}

func loadConfig(ctx context.Context, flags *pflag.FlagSet) (CLIConfig, error) {
	var emptyConfig CLIConfig
	configPath, err := flags.GetString("conf")
	if err != nil || configPath == "" {
		return emptyConfig, werror.WrapWithContextParams(ctx, err, "config file location must be specified")
	}
	confBytes, err := ioutil.ReadFile(configPath)
	if err != nil {
		return emptyConfig, err
	}
	var conf CLIConfig
	err = yaml.Unmarshal(confBytes, &conf)
	if err != nil {
		return emptyConfig, err
	}
	return conf, nil
}

func getCLIContext() context.Context {
	ctx := context.Background()
	wlog.SetDefaultLoggerProvider(wlogzap.LoggerProvider())
	ctx = svc1log.WithLogger(ctx, svc1log.New(os.Stdout, wlog.DebugLevel))
	traceLogger := trc1log.DefaultLogger()
	ctx = trc1log.WithLogger(ctx, traceLogger)
	ctx = evt2log.WithLogger(ctx, evt2log.New(os.Stdout))
	tracer, err := wzipkin.NewTracer(traceLogger)
	if err != nil {
		return ctx
	}
	return wtracing.ContextWithTracer(ctx, tracer)
}

func RegisterCommands(rootCmd *cobra.Command) {
	rootCmd.AddCommand(RootTestServiceCmd)
}

func init() {
	// TestService commands and flags
	RootTestServiceCmd.PersistentFlags().String("conf", "../var/conf/configuration.yml", "The configuration file is optional. The default path is ./var/conf/configuration.yml.")
	RootTestServiceCmd.AddCommand(TestServiceechoCmd)
	TestServiceechoCmd.Flags().String("bearer_token", "", "bearer_token is a required field.")
	RootTestServiceCmd.AddCommand(TestServiceechoStringsCmd)
	TestServiceechoStringsCmd.Flags().String("body", "", "body is a required param.")
	RootTestServiceCmd.AddCommand(TestServiceechoCustomObjectCmd)
	TestServiceechoCustomObjectCmd.Flags().String("body", "", "body is an optional param.")
	RootTestServiceCmd.AddCommand(TestServiceechoOptionalAliasCmd)
	TestServiceechoOptionalAliasCmd.Flags().String("body", "", "body is an optional param.")
	RootTestServiceCmd.AddCommand(TestServiceechoOptionalListAliasCmd)
	TestServiceechoOptionalListAliasCmd.Flags().String("body", "", "body is an optional param.")
	RootTestServiceCmd.AddCommand(TestServicegetPathParamCmd)
	TestServicegetPathParamCmd.Flags().String("myPathParam", "", "myPathParam is a required param.")
	TestServicegetPathParamCmd.Flags().String("bearer_token", "", "bearer_token is a required field.")
	RootTestServiceCmd.AddCommand(TestServicegetPathParamAliasCmd)
	TestServicegetPathParamAliasCmd.Flags().String("myPathParam", "", "myPathParam is a required param.")
	TestServicegetPathParamAliasCmd.Flags().String("bearer_token", "", "bearer_token is a required field.")
	RootTestServiceCmd.AddCommand(TestServicequeryParamListCmd)
	TestServicequeryParamListCmd.Flags().String("myQueryParam1", "", "myQueryParam1 is a required param.")
	TestServicequeryParamListCmd.Flags().String("bearer_token", "", "bearer_token is a required field.")
	RootTestServiceCmd.AddCommand(TestServicequeryParamListBooleanCmd)
	TestServicequeryParamListBooleanCmd.Flags().String("myQueryParam1", "", "myQueryParam1 is a required param.")
	TestServicequeryParamListBooleanCmd.Flags().String("bearer_token", "", "bearer_token is a required field.")
	RootTestServiceCmd.AddCommand(TestServicequeryParamListDateTimeCmd)
	TestServicequeryParamListDateTimeCmd.Flags().String("myQueryParam1", "", "myQueryParam1 is a required param.")
	TestServicequeryParamListDateTimeCmd.Flags().String("bearer_token", "", "bearer_token is a required field.")
	RootTestServiceCmd.AddCommand(TestServicequeryParamSetDateTimeCmd)
	TestServicequeryParamSetDateTimeCmd.Flags().String("myQueryParam1", "", "myQueryParam1 is a required param.")
	TestServicequeryParamSetDateTimeCmd.Flags().String("bearer_token", "", "bearer_token is a required field.")
	RootTestServiceCmd.AddCommand(TestServicequeryParamListDoubleCmd)
	TestServicequeryParamListDoubleCmd.Flags().String("myQueryParam1", "", "myQueryParam1 is a required param.")
	TestServicequeryParamListDoubleCmd.Flags().String("bearer_token", "", "bearer_token is a required field.")
	RootTestServiceCmd.AddCommand(TestServicequeryParamListIntegerCmd)
	TestServicequeryParamListIntegerCmd.Flags().String("myQueryParam1", "", "myQueryParam1 is a required param.")
	TestServicequeryParamListIntegerCmd.Flags().String("bearer_token", "", "bearer_token is a required field.")
	RootTestServiceCmd.AddCommand(TestServicequeryParamListRidCmd)
	TestServicequeryParamListRidCmd.Flags().String("myQueryParam1", "", "myQueryParam1 is a required param.")
	TestServicequeryParamListRidCmd.Flags().String("bearer_token", "", "bearer_token is a required field.")
	RootTestServiceCmd.AddCommand(TestServicequeryParamListSafeLongCmd)
	TestServicequeryParamListSafeLongCmd.Flags().String("myQueryParam1", "", "myQueryParam1 is a required param.")
	TestServicequeryParamListSafeLongCmd.Flags().String("bearer_token", "", "bearer_token is a required field.")
	RootTestServiceCmd.AddCommand(TestServicequeryParamListStringCmd)
	TestServicequeryParamListStringCmd.Flags().String("myQueryParam1", "", "myQueryParam1 is a required param.")
	TestServicequeryParamListStringCmd.Flags().String("bearer_token", "", "bearer_token is a required field.")
	RootTestServiceCmd.AddCommand(TestServicequeryParamListUuidCmd)
	TestServicequeryParamListUuidCmd.Flags().String("myQueryParam1", "", "myQueryParam1 is a required param.")
	TestServicequeryParamListUuidCmd.Flags().String("bearer_token", "", "bearer_token is a required field.")
	RootTestServiceCmd.AddCommand(TestServicequeryParamExternalStringCmd)
	TestServicequeryParamExternalStringCmd.Flags().String("myQueryParam1", "", "myQueryParam1 is a required param.")
	TestServicequeryParamExternalStringCmd.Flags().String("bearer_token", "", "bearer_token is a required field.")
	RootTestServiceCmd.AddCommand(TestServicequeryParamExternalIntegerCmd)
	TestServicequeryParamExternalIntegerCmd.Flags().String("myQueryParam1", "", "myQueryParam1 is a required param.")
	TestServicequeryParamExternalIntegerCmd.Flags().String("bearer_token", "", "bearer_token is a required field.")
	RootTestServiceCmd.AddCommand(TestServicepathParamExternalStringCmd)
	TestServicepathParamExternalStringCmd.Flags().String("myPathParam1", "", "myPathParam1 is a required param.")
	TestServicepathParamExternalStringCmd.Flags().String("bearer_token", "", "bearer_token is a required field.")
	RootTestServiceCmd.AddCommand(TestServicepathParamExternalIntegerCmd)
	TestServicepathParamExternalIntegerCmd.Flags().String("myPathParam1", "", "myPathParam1 is a required param.")
	TestServicepathParamExternalIntegerCmd.Flags().String("bearer_token", "", "bearer_token is a required field.")
	RootTestServiceCmd.AddCommand(TestServicepostPathParamCmd)
	TestServicepostPathParamCmd.Flags().String("myPathParam1", "", "myPathParam1 is a required param.")
	TestServicepostPathParamCmd.Flags().String("myPathParam2", "", "myPathParam2 is a required param.")
	TestServicepostPathParamCmd.Flags().String("myBodyParam", "", "myBodyParam is a required param.")
	TestServicepostPathParamCmd.Flags().String("myQueryParam1", "", "myQueryParam1 is a required param.")
	TestServicepostPathParamCmd.Flags().String("myQueryParam2", "", "myQueryParam2 is a required param.")
	TestServicepostPathParamCmd.Flags().String("myQueryParam3", "", "myQueryParam3 is a required param.")
	TestServicepostPathParamCmd.Flags().String("myQueryParam4", "", "myQueryParam4 is an optional param.")
	TestServicepostPathParamCmd.Flags().String("myQueryParam5", "", "myQueryParam5 is an optional param.")
	TestServicepostPathParamCmd.Flags().String("myQueryParam6", "", "myQueryParam6 is an optional param.")
	TestServicepostPathParamCmd.Flags().String("myHeaderParam1", "", "myHeaderParam1 is a required param.")
	TestServicepostPathParamCmd.Flags().String("myHeaderParam2", "", "myHeaderParam2 is an optional param.")
	TestServicepostPathParamCmd.Flags().String("bearer_token", "", "bearer_token is a required field.")
	RootTestServiceCmd.AddCommand(TestServicepostSafeParamsCmd)
	TestServicepostSafeParamsCmd.Flags().String("myPathParam1", "", "myPathParam1 is a required param.")
	TestServicepostSafeParamsCmd.Flags().String("myPathParam2", "", "myPathParam2 is a required param.")
	TestServicepostSafeParamsCmd.Flags().String("myBodyParam", "", "myBodyParam is a required param.")
	TestServicepostSafeParamsCmd.Flags().String("myQueryParam1", "", "myQueryParam1 is a required param.")
	TestServicepostSafeParamsCmd.Flags().String("myQueryParam2", "", "myQueryParam2 is a required param.")
	TestServicepostSafeParamsCmd.Flags().String("myQueryParam3", "", "myQueryParam3 is a required param.")
	TestServicepostSafeParamsCmd.Flags().String("myQueryParam4", "", "myQueryParam4 is an optional param.")
	TestServicepostSafeParamsCmd.Flags().String("myQueryParam5", "", "myQueryParam5 is an optional param.")
	TestServicepostSafeParamsCmd.Flags().String("myHeaderParam1", "", "myHeaderParam1 is a required param.")
	TestServicepostSafeParamsCmd.Flags().String("myHeaderParam2", "", "myHeaderParam2 is an optional param.")
	TestServicepostSafeParamsCmd.Flags().String("bearer_token", "", "bearer_token is a required field.")
	RootTestServiceCmd.AddCommand(TestServicebytesCmd)
	RootTestServiceCmd.AddCommand(TestServicegetBinaryCmd)
	RootTestServiceCmd.AddCommand(TestServicegetOptionalBinaryCmd)
	RootTestServiceCmd.AddCommand(TestServicechanCmd)
	TestServicechanCmd.Flags().String("var", "", "var is a required param.")
	TestServicechanCmd.Flags().String("import", "", "import is a required param.")
	TestServicechanCmd.Flags().String("type", "", "type is a required param.")
	TestServicechanCmd.Flags().String("return", "", "return is a required param.")
	TestServicechanCmd.Flags().String("http", "", "http is a required param.")
	TestServicechanCmd.Flags().String("json", "", "json is a required param.")
	TestServicechanCmd.Flags().String("req", "", "req is a required param.")
	TestServicechanCmd.Flags().String("rw", "", "rw is a required param.")
}
