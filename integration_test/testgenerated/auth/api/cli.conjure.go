// This file was generated by Conjure and should not be manually edited.

package api

import (
	"context"
	"fmt"
	"io"
	"io/ioutil"
	"os"

	"github.com/palantir/conjure-go-runtime/v2/conjure-go-client/httpclient"
	"github.com/palantir/pkg/bearertoken"
	werror "github.com/palantir/witchcraft-go-error"
	"github.com/palantir/witchcraft-go-logging/wlog"
	wlogzap "github.com/palantir/witchcraft-go-logging/wlog-zap"
	"github.com/palantir/witchcraft-go-logging/wlog/evtlog/evt2log"
	"github.com/palantir/witchcraft-go-logging/wlog/svclog/svc1log"
	"github.com/palantir/witchcraft-go-logging/wlog/trclog/trc1log"
	"github.com/palantir/witchcraft-go-tracing/wtracing"
	"github.com/palantir/witchcraft-go-tracing/wzipkin"
	"github.com/spf13/cobra"
	"gopkg.in/yaml.v3"
)

type CLIConfig struct {
	Client httpclient.ClientConfig
}

var configFile *string

// Commands for BothAuthService

var RootBothAuthServiceCmd = &cobra.Command{
	Short: "Runs commands on the BothAuthService",
	Use:   "bothAuthService",
}

func getBothAuthServiceClient(ctx context.Context) (BothAuthServiceClient, error) {
	conf, err := loadConfig(ctx)
	if err != nil {
		return nil, werror.WrapWithContextParams(ctx, err, "failed to load CLI configuration file")
	}
	client, err := httpclient.NewClient(httpclient.WithConfig(conf.Client))
	if err != nil {
		return nil, werror.WrapWithContextParams(ctx, err, "failed to create client with provided config")
	}
	return NewBothAuthServiceClient(client), nil
}

var BothAuthServicedefaultCmd = &cobra.Command{
	RunE:  bothAuthServicedefaultCmdRun,
	Short: "Calls the default endpoint",
	Use:   "default",
}

var bothAuthService_default__auth *string

func bothAuthServicedefaultCmdRun(_ *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	client, err := getBothAuthServiceClient(ctx)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return bothAuthServicedefaultCmdRunInternal(ctx, client)
}

func bothAuthServicedefaultCmdRunInternal(ctx context.Context, client BothAuthServiceClient) error {
	var err error

	if bothAuthService_default__auth == nil {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(*bothAuthService_default__auth)
	result, err := client.Default(ctx, __authVarArg)
	if err != nil {
		return err
	}
	fmt.Printf("%v\n", result)
	return nil
}

var BothAuthServicecookieCmd = &cobra.Command{
	RunE:  bothAuthServicecookieCmdRun,
	Short: "Calls the cookie endpoint",
	Use:   "cookie",
}

var bothAuthService_cookie__auth *string

func bothAuthServicecookieCmdRun(_ *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	client, err := getBothAuthServiceClient(ctx)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return bothAuthServicecookieCmdRunInternal(ctx, client)
}

func bothAuthServicecookieCmdRunInternal(ctx context.Context, client BothAuthServiceClient) error {
	var err error

	if bothAuthService_cookie__auth == nil {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(*bothAuthService_cookie__auth)
	err = client.Cookie(ctx, __authVarArg)
	return err
}

var BothAuthServicenoneCmd = &cobra.Command{
	RunE:  bothAuthServicenoneCmdRun,
	Short: "Calls the none endpoint",
	Use:   "none",
}

func bothAuthServicenoneCmdRun(_ *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	client, err := getBothAuthServiceClient(ctx)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return bothAuthServicenoneCmdRunInternal(ctx, client)
}

func bothAuthServicenoneCmdRunInternal(ctx context.Context, client BothAuthServiceClient) error {
	var err error

	err = client.None(ctx)
	return err
}

var BothAuthServicewithArgCmd = &cobra.Command{
	RunE:  bothAuthServicewithArgCmdRun,
	Short: "Calls the withArg endpoint",
	Use:   "withArg",
}

var bothAuthService_withArg_arg *string
var bothAuthService_withArg__auth *string

func bothAuthServicewithArgCmdRun(_ *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	client, err := getBothAuthServiceClient(ctx)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return bothAuthServicewithArgCmdRunInternal(ctx, client)
}

func bothAuthServicewithArgCmdRunInternal(ctx context.Context, client BothAuthServiceClient) error {
	var err error

	if bothAuthService_withArg__auth == nil {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(*bothAuthService_withArg__auth)
	if bothAuthService_withArg_arg == nil {
		return werror.ErrorWithContextParams(ctx, "argArg is a required argument")
	}
	argArg := *bothAuthService_withArg_arg

	err = client.WithArg(ctx, __authVarArg, argArg)
	return err
}

// Commands for CookieAuthService

var RootCookieAuthServiceCmd = &cobra.Command{
	Short: "Runs commands on the CookieAuthService",
	Use:   "cookieAuthService",
}

func getCookieAuthServiceClient(ctx context.Context) (CookieAuthServiceClient, error) {
	conf, err := loadConfig(ctx)
	if err != nil {
		return nil, werror.WrapWithContextParams(ctx, err, "failed to load CLI configuration file")
	}
	client, err := httpclient.NewClient(httpclient.WithConfig(conf.Client))
	if err != nil {
		return nil, werror.WrapWithContextParams(ctx, err, "failed to create client with provided config")
	}
	return NewCookieAuthServiceClient(client), nil
}

var CookieAuthServicecookieCmd = &cobra.Command{
	RunE:  cookieAuthServicecookieCmdRun,
	Short: "Calls the cookie endpoint",
	Use:   "cookie",
}

var cookieAuthService_cookie__auth *string

func cookieAuthServicecookieCmdRun(_ *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	client, err := getCookieAuthServiceClient(ctx)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return cookieAuthServicecookieCmdRunInternal(ctx, client)
}

func cookieAuthServicecookieCmdRunInternal(ctx context.Context, client CookieAuthServiceClient) error {
	var err error

	if cookieAuthService_cookie__auth == nil {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(*cookieAuthService_cookie__auth)
	err = client.Cookie(ctx, __authVarArg)
	return err
}

// Commands for HeaderAuthService

var RootHeaderAuthServiceCmd = &cobra.Command{
	Short: "Runs commands on the HeaderAuthService",
	Use:   "headerAuthService",
}

func getHeaderAuthServiceClient(ctx context.Context) (HeaderAuthServiceClient, error) {
	conf, err := loadConfig(ctx)
	if err != nil {
		return nil, werror.WrapWithContextParams(ctx, err, "failed to load CLI configuration file")
	}
	client, err := httpclient.NewClient(httpclient.WithConfig(conf.Client))
	if err != nil {
		return nil, werror.WrapWithContextParams(ctx, err, "failed to create client with provided config")
	}
	return NewHeaderAuthServiceClient(client), nil
}

var HeaderAuthServicedefaultCmd = &cobra.Command{
	RunE:  headerAuthServicedefaultCmdRun,
	Short: "Calls the default endpoint",
	Use:   "default",
}

var headerAuthService_default__auth *string

func headerAuthServicedefaultCmdRun(_ *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	client, err := getHeaderAuthServiceClient(ctx)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return headerAuthServicedefaultCmdRunInternal(ctx, client)
}

func headerAuthServicedefaultCmdRunInternal(ctx context.Context, client HeaderAuthServiceClient) error {
	var err error

	if headerAuthService_default__auth == nil {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(*headerAuthService_default__auth)
	result, err := client.Default(ctx, __authVarArg)
	if err != nil {
		return err
	}
	fmt.Printf("%v\n", result)
	return nil
}

var HeaderAuthServicebinaryCmd = &cobra.Command{
	RunE:  headerAuthServicebinaryCmdRun,
	Short: "Calls the binary endpoint",
	Use:   "binary",
}

var headerAuthService_binary__auth *string

func headerAuthServicebinaryCmdRun(_ *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	client, err := getHeaderAuthServiceClient(ctx)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return headerAuthServicebinaryCmdRunInternal(ctx, client)
}

func headerAuthServicebinaryCmdRunInternal(ctx context.Context, client HeaderAuthServiceClient) error {
	var err error

	if headerAuthService_binary__auth == nil {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(*headerAuthService_binary__auth)
	result, err := client.Binary(ctx, __authVarArg)
	if err != nil {
		return err
	}
	_, err = io.Copy(os.Stdout, result)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to write result bytes to stdout")
	}
	return result.Close()
}

var HeaderAuthServicebinaryOptionalCmd = &cobra.Command{
	RunE:  headerAuthServicebinaryOptionalCmdRun,
	Short: "Calls the binaryOptional endpoint",
	Use:   "binaryOptional",
}

var headerAuthService_binaryOptional__auth *string

func headerAuthServicebinaryOptionalCmdRun(_ *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	client, err := getHeaderAuthServiceClient(ctx)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return headerAuthServicebinaryOptionalCmdRunInternal(ctx, client)
}

func headerAuthServicebinaryOptionalCmdRunInternal(ctx context.Context, client HeaderAuthServiceClient) error {
	var err error

	if headerAuthService_binaryOptional__auth == nil {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(*headerAuthService_binaryOptional__auth)
	result, err := client.BinaryOptional(ctx, __authVarArg)
	if err != nil {
		return err
	}
	if result == nil {
		return nil
	}
	resultDeref := *result
	_, err = io.Copy(os.Stdout, resultDeref)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to write result bytes to stdout")
	}
	return resultDeref.Close()
}

// Commands for SomeHeaderAuthService

var RootSomeHeaderAuthServiceCmd = &cobra.Command{
	Short: "Runs commands on the SomeHeaderAuthService",
	Use:   "someHeaderAuthService",
}

func getSomeHeaderAuthServiceClient(ctx context.Context) (SomeHeaderAuthServiceClient, error) {
	conf, err := loadConfig(ctx)
	if err != nil {
		return nil, werror.WrapWithContextParams(ctx, err, "failed to load CLI configuration file")
	}
	client, err := httpclient.NewClient(httpclient.WithConfig(conf.Client))
	if err != nil {
		return nil, werror.WrapWithContextParams(ctx, err, "failed to create client with provided config")
	}
	return NewSomeHeaderAuthServiceClient(client), nil
}

var SomeHeaderAuthServicedefaultCmd = &cobra.Command{
	RunE:  someHeaderAuthServicedefaultCmdRun,
	Short: "Calls the default endpoint",
	Use:   "default",
}

var someHeaderAuthService_default__auth *string

func someHeaderAuthServicedefaultCmdRun(_ *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	client, err := getSomeHeaderAuthServiceClient(ctx)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return someHeaderAuthServicedefaultCmdRunInternal(ctx, client)
}

func someHeaderAuthServicedefaultCmdRunInternal(ctx context.Context, client SomeHeaderAuthServiceClient) error {
	var err error

	if someHeaderAuthService_default__auth == nil {
		return werror.ErrorWithContextParams(ctx, "__authVarArg is a required argument")
	}
	__authVarArg := bearertoken.Token(*someHeaderAuthService_default__auth)
	result, err := client.Default(ctx, __authVarArg)
	if err != nil {
		return err
	}
	fmt.Printf("%v\n", result)
	return nil
}

var SomeHeaderAuthServicenoneCmd = &cobra.Command{
	RunE:  someHeaderAuthServicenoneCmdRun,
	Short: "Calls the none endpoint",
	Use:   "none",
}

func someHeaderAuthServicenoneCmdRun(_ *cobra.Command, _ []string) error {
	ctx := getCLIContext()
	client, err := getSomeHeaderAuthServiceClient(ctx)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	return someHeaderAuthServicenoneCmdRunInternal(ctx, client)
}

func someHeaderAuthServicenoneCmdRunInternal(ctx context.Context, client SomeHeaderAuthServiceClient) error {
	var err error

	err = client.None(ctx)
	return err
}

func loadConfig(ctx context.Context) (CLIConfig, error) {
	var emptyConfig CLIConfig
	if configFile == nil {
		return emptyConfig, werror.ErrorWithContextParams(ctx, "config file location must be specified")
	}
	confBytes, err := ioutil.ReadFile(*configFile)
	if err != nil {
		return emptyConfig, err
	}
	var conf CLIConfig
	err = yaml.Unmarshal(confBytes, &conf)
	if err != nil {
		return emptyConfig, err
	}
	return conf, nil
}

func getCLIContext() context.Context {
	ctx := context.Background()
	wlog.SetDefaultLoggerProvider(wlogzap.LoggerProvider())
	ctx = svc1log.WithLogger(ctx, svc1log.New(os.Stdout, wlog.DebugLevel))
	traceLogger := trc1log.DefaultLogger()
	ctx = trc1log.WithLogger(ctx, traceLogger)
	ctx = evt2log.WithLogger(ctx, evt2log.New(os.Stdout))
	tracer, err := wzipkin.NewTracer(traceLogger)
	if err != nil {
		return ctx
	}
	return wtracing.ContextWithTracer(ctx, tracer)
}

func RegisterCommands(rootCmd *cobra.Command) {
	rootCmd.AddCommand(RootBothAuthServiceCmd)
	rootCmd.AddCommand(RootCookieAuthServiceCmd)
	rootCmd.AddCommand(RootHeaderAuthServiceCmd)
	rootCmd.AddCommand(RootSomeHeaderAuthServiceCmd)
}

func init() {
	// BothAuthService commands and flags
	RootBothAuthServiceCmd.PersistentFlags().StringVarP(configFile, "conf", "", "../var/conf/configuration.yml", "The configuration file is optional. The default path is ./var/conf/configuration.yml.")
	RootBothAuthServiceCmd.AddCommand(BothAuthServicedefaultCmd)
	BothAuthServicedefaultCmd.PersistentFlags().StringVarP(bothAuthService_default__auth, "bearer_token", "", "", "bearer_token is a required field.")
	RootBothAuthServiceCmd.AddCommand(BothAuthServicecookieCmd)
	BothAuthServicecookieCmd.PersistentFlags().StringVarP(bothAuthService_cookie__auth, "bearer_token", "", "", "bearer_token is a required field.")
	RootBothAuthServiceCmd.AddCommand(BothAuthServicenoneCmd)
	RootBothAuthServiceCmd.AddCommand(BothAuthServicewithArgCmd)
	BothAuthServicewithArgCmd.PersistentFlags().StringVarP(bothAuthService_withArg_arg, "arg", "", "", "arg is a required param.")
	BothAuthServicewithArgCmd.PersistentFlags().StringVarP(bothAuthService_withArg__auth, "bearer_token", "", "", "bearer_token is a required field.")

	// CookieAuthService commands and flags
	RootCookieAuthServiceCmd.PersistentFlags().StringVarP(configFile, "conf", "", "../var/conf/configuration.yml", "The configuration file is optional. The default path is ./var/conf/configuration.yml.")
	RootCookieAuthServiceCmd.AddCommand(CookieAuthServicecookieCmd)
	CookieAuthServicecookieCmd.PersistentFlags().StringVarP(cookieAuthService_cookie__auth, "bearer_token", "", "", "bearer_token is a required field.")

	// HeaderAuthService commands and flags
	RootHeaderAuthServiceCmd.PersistentFlags().StringVarP(configFile, "conf", "", "../var/conf/configuration.yml", "The configuration file is optional. The default path is ./var/conf/configuration.yml.")
	RootHeaderAuthServiceCmd.AddCommand(HeaderAuthServicedefaultCmd)
	HeaderAuthServicedefaultCmd.PersistentFlags().StringVarP(headerAuthService_default__auth, "bearer_token", "", "", "bearer_token is a required field.")
	RootHeaderAuthServiceCmd.AddCommand(HeaderAuthServicebinaryCmd)
	HeaderAuthServicebinaryCmd.PersistentFlags().StringVarP(headerAuthService_binary__auth, "bearer_token", "", "", "bearer_token is a required field.")
	RootHeaderAuthServiceCmd.AddCommand(HeaderAuthServicebinaryOptionalCmd)
	HeaderAuthServicebinaryOptionalCmd.PersistentFlags().StringVarP(headerAuthService_binaryOptional__auth, "bearer_token", "", "", "bearer_token is a required field.")

	// SomeHeaderAuthService commands and flags
	RootSomeHeaderAuthServiceCmd.PersistentFlags().StringVarP(configFile, "conf", "", "../var/conf/configuration.yml", "The configuration file is optional. The default path is ./var/conf/configuration.yml.")
	RootSomeHeaderAuthServiceCmd.AddCommand(SomeHeaderAuthServicedefaultCmd)
	SomeHeaderAuthServicedefaultCmd.PersistentFlags().StringVarP(someHeaderAuthService_default__auth, "bearer_token", "", "", "bearer_token is a required field.")
	RootSomeHeaderAuthServiceCmd.AddCommand(SomeHeaderAuthServicenoneCmd)
}
