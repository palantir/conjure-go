// This file was generated by Conjure and should not be manually edited.

package api

import (
	"strings"
)

type CustomEnum struct {
	val CustomEnum_Value
}

type CustomEnum_Value string

const (
	CustomEnum_STATE1  CustomEnum_Value = "STATE1"
	CustomEnum_STATE2  CustomEnum_Value = "STATE2"
	CustomEnum_UNKNOWN CustomEnum_Value = "UNKNOWN"
)

// CustomEnum_Values returns all known variants of CustomEnum.
func CustomEnum_Values() []CustomEnum_Value {
	return []CustomEnum_Value{CustomEnum_STATE1, CustomEnum_STATE2}
}

func New_CustomEnum(value CustomEnum_Value) CustomEnum {
	return CustomEnum{val: value}
}

// IsUnknown returns false for all known variants of CustomEnum and true otherwise.
func (e CustomEnum) IsUnknown() bool {
	switch e.val {
	case CustomEnum_STATE1, CustomEnum_STATE2:
		return false
	}
	return true
}

func (e CustomEnum) Value() CustomEnum_Value {
	if e.IsUnknown() {
		return CustomEnum_UNKNOWN
	}
	return e.val
}

func (e CustomEnum) String() string {
	return string(e.val)
}

func (e CustomEnum) MarshalText() ([]byte, error) {
	return []byte(e.val), nil
}

func (e *CustomEnum) UnmarshalText(data []byte) error {
	switch v := strings.ToUpper(string(data)); v {
	default:
		*e = New_CustomEnum(CustomEnum_Value(v))
	case "STATE1":
		*e = New_CustomEnum(CustomEnum_STATE1)
	case "STATE2":
		*e = New_CustomEnum(CustomEnum_STATE2)
	}
	return nil
}
