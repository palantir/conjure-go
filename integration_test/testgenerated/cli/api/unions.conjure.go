// This file was generated by Conjure and should not be manually edited.

package api

import (
	"context"
	"fmt"

	"github.com/palantir/pkg/safejson"
	"github.com/palantir/pkg/safeyaml"
)

type CustomUnion struct {
	typ       string
	asString  *string
	asInteger *int
}

type customUnionDeserializer struct {
	Type      string  `json:"type"`
	AsString  *string `json:"asString"`
	AsInteger *int    `json:"asInteger"`
}

func (u *customUnionDeserializer) toStruct() CustomUnion {
	return CustomUnion{typ: u.Type, asString: u.AsString, asInteger: u.AsInteger}
}

func (u *CustomUnion) toSerializer() (interface{}, error) {
	switch u.typ {
	default:
		return nil, fmt.Errorf("unknown type %q", u.typ)
	case "asString":
		if u.asString == nil {
			return nil, fmt.Errorf("field \"asString\" is required")
		}
		return struct {
			Type     string `json:"type"`
			AsString string `json:"asString"`
		}{Type: "asString", AsString: *u.asString}, nil
	case "asInteger":
		if u.asInteger == nil {
			return nil, fmt.Errorf("field \"asInteger\" is required")
		}
		return struct {
			Type      string `json:"type"`
			AsInteger int    `json:"asInteger"`
		}{Type: "asInteger", AsInteger: *u.asInteger}, nil
	}
}

func (u CustomUnion) MarshalJSON() ([]byte, error) {
	ser, err := u.toSerializer()
	if err != nil {
		return nil, err
	}
	return safejson.Marshal(ser)
}

func (u *CustomUnion) UnmarshalJSON(data []byte) error {
	var deser customUnionDeserializer
	if err := safejson.Unmarshal(data, &deser); err != nil {
		return err
	}
	*u = deser.toStruct()
	switch u.typ {
	case "asString":
		if u.asString == nil {
			return fmt.Errorf("field \"asString\" is required")
		}
	case "asInteger":
		if u.asInteger == nil {
			return fmt.Errorf("field \"asInteger\" is required")
		}
	}
	return nil
}

func (u CustomUnion) MarshalYAML() (interface{}, error) {
	jsonBytes, err := u.MarshalJSON()
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (u *CustomUnion) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return u.UnmarshalJSON(jsonBytes)
}

func (u *CustomUnion) AcceptFuncs(asStringFunc func(string) error, asIntegerFunc func(int) error, unknownFunc func(string) error) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return unknownFunc(u.typ)
	case "asString":
		if u.asString == nil {
			return fmt.Errorf("field \"asString\" is required")
		}
		return asStringFunc(*u.asString)
	case "asInteger":
		if u.asInteger == nil {
			return fmt.Errorf("field \"asInteger\" is required")
		}
		return asIntegerFunc(*u.asInteger)
	}
}

func (u *CustomUnion) AsStringNoopSuccess(string) error {
	return nil
}

func (u *CustomUnion) AsIntegerNoopSuccess(int) error {
	return nil
}

func (u *CustomUnion) ErrorOnUnknown(typeName string) error {
	return fmt.Errorf("invalid value in union type. Type name: %s", typeName)
}

func (u *CustomUnion) Accept(v CustomUnionVisitor) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknown(u.typ)
	case "asString":
		if u.asString == nil {
			return fmt.Errorf("field \"asString\" is required")
		}
		return v.VisitAsString(*u.asString)
	case "asInteger":
		if u.asInteger == nil {
			return fmt.Errorf("field \"asInteger\" is required")
		}
		return v.VisitAsInteger(*u.asInteger)
	}
}

type CustomUnionVisitor interface {
	VisitAsString(v string) error
	VisitAsInteger(v int) error
	VisitUnknown(typeName string) error
}

func (u *CustomUnion) AcceptWithContext(ctx context.Context, v CustomUnionVisitorWithContext) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknownWithContext(ctx, u.typ)
	case "asString":
		if u.asString == nil {
			return fmt.Errorf("field \"asString\" is required")
		}
		return v.VisitAsStringWithContext(ctx, *u.asString)
	case "asInteger":
		if u.asInteger == nil {
			return fmt.Errorf("field \"asInteger\" is required")
		}
		return v.VisitAsIntegerWithContext(ctx, *u.asInteger)
	}
}

type CustomUnionVisitorWithContext interface {
	VisitAsStringWithContext(ctx context.Context, v string) error
	VisitAsIntegerWithContext(ctx context.Context, v int) error
	VisitUnknownWithContext(ctx context.Context, typeName string) error
}

func NewCustomUnionFromAsString(v string) CustomUnion {
	return CustomUnion{typ: "asString", asString: &v}
}

func NewCustomUnionFromAsInteger(v int) CustomUnion {
	return CustomUnion{typ: "asInteger", asInteger: &v}
}
