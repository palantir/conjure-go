// This file was generated by Conjure and should not be manually edited.

package api

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"os"
	"strconv"
	"strings"

	"github.com/palantir/conjure-go-runtime/v2/conjure-go-client/httpclient"
	"github.com/palantir/conjure-go-runtime/v2/conjure-go-contract/codecs"
	"github.com/palantir/conjure-go-runtime/v2/conjure-go-contract/errors"
	"github.com/palantir/pkg/bearertoken"
	"github.com/palantir/pkg/datetime"
	"github.com/palantir/pkg/rid"
	"github.com/palantir/pkg/safelong"
	"github.com/palantir/pkg/uuid"
	werror "github.com/palantir/witchcraft-go-error"
	"github.com/palantir/witchcraft-go-logging/wlog"
	wlogzap "github.com/palantir/witchcraft-go-logging/wlog-zap"
	"github.com/palantir/witchcraft-go-logging/wlog/evtlog/evt2log"
	"github.com/palantir/witchcraft-go-logging/wlog/svclog/svc1log"
	"github.com/palantir/witchcraft-go-logging/wlog/trclog/trc1log"
	"github.com/palantir/witchcraft-go-tracing/wtracing"
	"github.com/palantir/witchcraft-go-tracing/wzipkin"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
	"gopkg.in/yaml.v3"
)

type CLIConfig struct {
	Client httpclient.ClientConfig `yaml:",inline"`
}

// Commands for TestService

type CLITestServiceClientProvider interface {
	Get(ctx context.Context, flags *pflag.FlagSet) (TestServiceClient, error)
}

type defaultCLITestServiceClientProvider struct{}

func NewDefaultCLITestServiceClientProvider() CLITestServiceClientProvider {
	return defaultCLITestServiceClientProvider{}
}

func (d defaultCLITestServiceClientProvider) Get(ctx context.Context, flags *pflag.FlagSet) (TestServiceClient, error) {
	conf, err := loadCLIConfig(ctx, flags)
	if err != nil {
		return nil, werror.WrapWithContextParams(ctx, err, "failed to load CLI configuration file")
	}
	client, err := httpclient.NewClient(httpclient.WithConfig(conf.Client))
	if err != nil {
		return nil, werror.WrapWithContextParams(ctx, err, "failed to create client with provided config")
	}
	return NewTestServiceClient(client), nil
}

type TestServiceCLICommand struct {
	clientProvider CLITestServiceClientProvider
}

func NewTestServiceCLICommand() *cobra.Command {
	return NewTestServiceCLICommandWithClientProvider(NewDefaultCLITestServiceClientProvider())
}

func NewTestServiceCLICommandWithClientProvider(clientProvider CLITestServiceClientProvider) *cobra.Command {
	rootCmd := &cobra.Command{
		Short: "Runs commands on the TestService",
		Use:   "testService",
	}
	rootCmd.PersistentFlags().String("conf", "var/conf/configuration.yml", "The configuration file is optional. The default path is ./var/conf/configuration.yml.")
	rootCmd.PersistentFlags().BoolP("verbose", "v", false, "Enables verbose mode for debugging client connections.")

	cliCommand := TestServiceCLICommand{clientProvider: clientProvider}

	testService_Echo_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_Echo_CmdRun,
		Short: "Calls the echo endpoint.",
		Use:   "echo",
	}
	rootCmd.AddCommand(testService_Echo_Cmd)
	testService_Echo_Cmd.Flags().String("bearer_token", "", "bearer_token is a required field.")

	testService_EchoStrings_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_EchoStrings_CmdRun,
		Short: "These are some endpoint docs",
		Use:   "echoStrings",
	}
	rootCmd.AddCommand(testService_EchoStrings_Cmd)
	testService_EchoStrings_Cmd.Flags().String("body", "", "Required. These are some argument docs")

	testService_EchoCustomObject_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_EchoCustomObject_CmdRun,
		Short: "Calls the echoCustomObject endpoint.",
		Use:   "echoCustomObject",
	}
	rootCmd.AddCommand(testService_EchoCustomObject_Cmd)
	testService_EchoCustomObject_Cmd.Flags().String("body", "", "Optional. ")

	testService_EchoOptionalAlias_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_EchoOptionalAlias_CmdRun,
		Short: "Calls the echoOptionalAlias endpoint.",
		Use:   "echoOptionalAlias",
	}
	rootCmd.AddCommand(testService_EchoOptionalAlias_Cmd)
	testService_EchoOptionalAlias_Cmd.Flags().String("body", "", "Optional. ")

	testService_EchoOptionalListAlias_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_EchoOptionalListAlias_CmdRun,
		Short: "Calls the echoOptionalListAlias endpoint.",
		Use:   "echoOptionalListAlias",
	}
	rootCmd.AddCommand(testService_EchoOptionalListAlias_Cmd)
	testService_EchoOptionalListAlias_Cmd.Flags().String("body", "", "Optional. ")

	testService_GetPathParam_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_GetPathParam_CmdRun,
		Short: "Calls the getPathParam endpoint.",
		Use:   "getPathParam",
	}
	rootCmd.AddCommand(testService_GetPathParam_Cmd)
	testService_GetPathParam_Cmd.Flags().String("myPathParam", "", "Required. ")
	testService_GetPathParam_Cmd.Flags().String("bearer_token", "", "bearer_token is a required field.")

	testService_GetListBoolean_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_GetListBoolean_CmdRun,
		Short: "Calls the getListBoolean endpoint.",
		Use:   "getListBoolean",
	}
	rootCmd.AddCommand(testService_GetListBoolean_Cmd)
	testService_GetListBoolean_Cmd.Flags().String("myQueryParam1", "", "Required. ")

	testService_PutMapStringString_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_PutMapStringString_CmdRun,
		Short: "Calls the putMapStringString endpoint.",
		Use:   "putMapStringString",
	}
	rootCmd.AddCommand(testService_PutMapStringString_Cmd)
	testService_PutMapStringString_Cmd.Flags().String("myParam", "", "Required. ")

	testService_PutMapStringAny_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_PutMapStringAny_CmdRun,
		Short: "Calls the putMapStringAny endpoint.",
		Use:   "putMapStringAny",
	}
	rootCmd.AddCommand(testService_PutMapStringAny_Cmd)
	testService_PutMapStringAny_Cmd.Flags().String("myParam", "", "Required. ")

	testService_GetDateTime_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_GetDateTime_CmdRun,
		Short: "Calls the getDateTime endpoint.",
		Use:   "getDateTime",
	}
	rootCmd.AddCommand(testService_GetDateTime_Cmd)
	testService_GetDateTime_Cmd.Flags().String("myParam", "", "Required. ")

	testService_GetDouble_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_GetDouble_CmdRun,
		Short: "Calls the getDouble endpoint.",
		Use:   "getDouble",
	}
	rootCmd.AddCommand(testService_GetDouble_Cmd)
	testService_GetDouble_Cmd.Flags().String("myParam", "", "Required. ")

	testService_GetRid_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_GetRid_CmdRun,
		Short: "Calls the getRid endpoint.",
		Use:   "getRid",
	}
	rootCmd.AddCommand(testService_GetRid_Cmd)
	testService_GetRid_Cmd.Flags().String("myParam", "", "Required. ")

	testService_GetSafeLong_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_GetSafeLong_CmdRun,
		Short: "Calls the getSafeLong endpoint.",
		Use:   "getSafeLong",
	}
	rootCmd.AddCommand(testService_GetSafeLong_Cmd)
	testService_GetSafeLong_Cmd.Flags().String("myParam", "", "Required. ")

	testService_GetUuid_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_GetUuid_CmdRun,
		Short: "Calls the getUuid endpoint.",
		Use:   "getUuid",
	}
	rootCmd.AddCommand(testService_GetUuid_Cmd)
	testService_GetUuid_Cmd.Flags().String("myParam", "", "Required. ")

	testService_GetEnum_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_GetEnum_CmdRun,
		Short: "Calls the getEnum endpoint.",
		Use:   "getEnum",
	}
	rootCmd.AddCommand(testService_GetEnum_Cmd)
	testService_GetEnum_Cmd.Flags().String("myParam", "", "Required. ")

	testService_PutBinary_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_PutBinary_CmdRun,
		Short: "Calls the putBinary endpoint.",
		Use:   "putBinary",
	}
	rootCmd.AddCommand(testService_PutBinary_Cmd)
	testService_PutBinary_Cmd.Flags().String("myParam", "", "Required. ")

	testService_GetOptionalBinary_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_GetOptionalBinary_CmdRun,
		Short: "Calls the getOptionalBinary endpoint.",
		Use:   "getOptionalBinary",
	}
	rootCmd.AddCommand(testService_GetOptionalBinary_Cmd)

	testService_PutCustomUnion_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_PutCustomUnion_CmdRun,
		Short: "Calls the putCustomUnion endpoint.",
		Use:   "putCustomUnion",
	}
	rootCmd.AddCommand(testService_PutCustomUnion_Cmd)
	testService_PutCustomUnion_Cmd.Flags().String("myParam", "", "Required. ")

	testService_GetReserved_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_GetReserved_CmdRun,
		Short: "An endpoint that uses reserved flag names",
		Use:   "getReserved",
	}
	rootCmd.AddCommand(testService_GetReserved_Cmd)
	testService_GetReserved_Cmd.Flags().String("conf_Arg", "", "Required. ")
	testService_GetReserved_Cmd.Flags().String("bearertoken", "", "Required. ")

	testService_Chan_Cmd := &cobra.Command{
		RunE:  cliCommand.testService_Chan_CmdRun,
		Short: "An endpoint that uses go keywords",
		Use:   "chan",
	}
	rootCmd.AddCommand(testService_Chan_Cmd)
	testService_Chan_Cmd.Flags().String("var", "", "Required. ")
	testService_Chan_Cmd.Flags().String("import", "", "Required. ")
	testService_Chan_Cmd.Flags().String("type", "", "Required. ")
	testService_Chan_Cmd.Flags().String("return", "", "Required. ")
	testService_Chan_Cmd.Flags().String("http", "", "Required. ")
	testService_Chan_Cmd.Flags().String("json", "", "Required. ")
	testService_Chan_Cmd.Flags().String("req", "", "Required. ")
	testService_Chan_Cmd.Flags().String("rw", "", "Required. ")

	return rootCmd
}

func (c TestServiceCLICommand) testService_Echo_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "bearer_token is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	return client.Echo(ctx, __authVarArg)
}

func (c TestServiceCLICommand) testService_EchoStrings_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	bodyRaw, err := flags.GetString("body")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument body")
	}
	if bodyRaw == "" {
		return werror.ErrorWithContextParams(ctx, "body is a required argument")
	}
	var bodyArg []string
	var bodyArgReader io.ReadCloser
	switch {
	case bodyRaw == "@-":
		bodyArgReader = io.NopCloser(cmd.InOrStdin())
	case strings.HasPrefix(bodyRaw, "@"):
		bodyArgReader, err = os.Open(strings.TrimSpace(bodyRaw[1:]))
		if err != nil {
			return werror.WrapWithContextParams(ctx, err, "failed to open file for argument body")
		}
	default:
		bodyArgReader = io.NopCloser(bytes.NewReader([]byte(bodyRaw)))
	}
	defer bodyArgReader.Close()
	if err := codecs.JSON.Decode(bodyArgReader, &bodyArg); err != nil {
		return werror.WrapWithContextParams(ctx, err, "invalid value for body argument")
	}

	result, err := client.EchoStrings(ctx, bodyArg)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Fprintf(cmd.OutOrStdout(), "%v\n", string(resultBytes))
	return nil
}

func (c TestServiceCLICommand) testService_EchoCustomObject_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	bodyRaw, err := flags.GetString("body")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument body")
	}
	var bodyArg *CustomObject
	if bodyRaw != "" {
		var bodyArgReader io.ReadCloser
		switch {
		case bodyRaw == "@-":
			bodyArgReader = io.NopCloser(cmd.InOrStdin())
		case strings.HasPrefix(bodyRaw, "@"):
			bodyArgReader, err = os.Open(strings.TrimSpace(bodyRaw[1:]))
			if err != nil {
				return werror.WrapWithContextParams(ctx, err, "failed to open file for argument body")
			}
		default:
			bodyArgReader = io.NopCloser(bytes.NewReader([]byte(bodyRaw)))
		}
		defer bodyArgReader.Close()
		if err := codecs.JSON.Decode(bodyArgReader, &bodyArg); err != nil {
			return werror.WrapWithContextParams(ctx, err, "invalid value for body argument")
		}
	}

	result, err := client.EchoCustomObject(ctx, bodyArg)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Fprintf(cmd.OutOrStdout(), "%v\n", string(resultBytes))
	return nil
}

func (c TestServiceCLICommand) testService_EchoOptionalAlias_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	bodyRaw, err := flags.GetString("body")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument body")
	}
	var bodyArgValue *int
	if bodyArgValueStr1 := bodyRaw; bodyArgValueStr1 != "" {
		bodyArgValueInternal1, err := strconv.Atoi(bodyArgValueStr1)
		if err != nil {
			return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"body\" as integer")
		}
		bodyArgValue = &bodyArgValueInternal1
	}
	bodyArg := OptionalIntegerAlias{Value: bodyArgValue}

	result, err := client.EchoOptionalAlias(ctx, bodyArg)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Fprintf(cmd.OutOrStdout(), "%v\n", string(resultBytes))
	return nil
}

func (c TestServiceCLICommand) testService_EchoOptionalListAlias_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	bodyRaw, err := flags.GetString("body")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument body")
	}
	var bodyArg OptionalListAlias
	if bodyRaw != "" {
		var bodyArgReader io.ReadCloser
		switch {
		case bodyRaw == "@-":
			bodyArgReader = io.NopCloser(cmd.InOrStdin())
		case strings.HasPrefix(bodyRaw, "@"):
			bodyArgReader, err = os.Open(strings.TrimSpace(bodyRaw[1:]))
			if err != nil {
				return werror.WrapWithContextParams(ctx, err, "failed to open file for argument body")
			}
		default:
			bodyArgReader = io.NopCloser(bytes.NewReader([]byte(bodyRaw)))
		}
		defer bodyArgReader.Close()
		if err := codecs.JSON.Decode(bodyArgReader, &bodyArg); err != nil {
			return werror.WrapWithContextParams(ctx, err, "invalid value for body argument")
		}
	}

	result, err := client.EchoOptionalListAlias(ctx, bodyArg)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Fprintf(cmd.OutOrStdout(), "%v\n", string(resultBytes))
	return nil
}

func (c TestServiceCLICommand) testService_GetPathParam_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	bearer_tokenRaw, err := flags.GetString("bearer_token")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument __authVar")
	}
	if bearer_tokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "bearer_token is a required argument")
	}
	__authVarArg := bearertoken.Token(bearer_tokenRaw)
	myPathParamRaw, err := flags.GetString("myPathParam")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myPathParam")
	}
	if myPathParamRaw == "" {
		return werror.ErrorWithContextParams(ctx, "myPathParam is a required argument")
	}
	myPathParamArg := myPathParamRaw

	return client.GetPathParam(ctx, __authVarArg, myPathParamArg)
}

func (c TestServiceCLICommand) testService_GetListBoolean_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	myQueryParam1Raw, err := flags.GetString("myQueryParam1")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myQueryParam1")
	}
	if myQueryParam1Raw == "" {
		return werror.ErrorWithContextParams(ctx, "myQueryParam1 is a required argument")
	}
	var myQueryParam1Arg []bool
	var myQueryParam1ArgReader io.ReadCloser
	switch {
	case myQueryParam1Raw == "@-":
		myQueryParam1ArgReader = io.NopCloser(cmd.InOrStdin())
	case strings.HasPrefix(myQueryParam1Raw, "@"):
		myQueryParam1ArgReader, err = os.Open(strings.TrimSpace(myQueryParam1Raw[1:]))
		if err != nil {
			return werror.WrapWithContextParams(ctx, err, "failed to open file for argument myQueryParam1")
		}
	default:
		myQueryParam1ArgReader = io.NopCloser(bytes.NewReader([]byte(myQueryParam1Raw)))
	}
	defer myQueryParam1ArgReader.Close()
	if err := codecs.JSON.Decode(myQueryParam1ArgReader, &myQueryParam1Arg); err != nil {
		return werror.WrapWithContextParams(ctx, err, "invalid value for myQueryParam1 argument")
	}

	result, err := client.GetListBoolean(ctx, myQueryParam1Arg)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Fprintf(cmd.OutOrStdout(), "%v\n", string(resultBytes))
	return nil
}

func (c TestServiceCLICommand) testService_PutMapStringString_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	myParamRaw, err := flags.GetString("myParam")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myParam")
	}
	if myParamRaw == "" {
		return werror.ErrorWithContextParams(ctx, "myParam is a required argument")
	}
	var myParamArg map[string]string
	var myParamArgReader io.ReadCloser
	switch {
	case myParamRaw == "@-":
		myParamArgReader = io.NopCloser(cmd.InOrStdin())
	case strings.HasPrefix(myParamRaw, "@"):
		myParamArgReader, err = os.Open(strings.TrimSpace(myParamRaw[1:]))
		if err != nil {
			return werror.WrapWithContextParams(ctx, err, "failed to open file for argument myParam")
		}
	default:
		myParamArgReader = io.NopCloser(bytes.NewReader([]byte(myParamRaw)))
	}
	defer myParamArgReader.Close()
	if err := codecs.JSON.Decode(myParamArgReader, &myParamArg); err != nil {
		return werror.WrapWithContextParams(ctx, err, "invalid value for myParam argument")
	}

	result, err := client.PutMapStringString(ctx, myParamArg)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Fprintf(cmd.OutOrStdout(), "%v\n", string(resultBytes))
	return nil
}

func (c TestServiceCLICommand) testService_PutMapStringAny_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	myParamRaw, err := flags.GetString("myParam")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myParam")
	}
	if myParamRaw == "" {
		return werror.ErrorWithContextParams(ctx, "myParam is a required argument")
	}
	var myParamArg map[string]interface{}
	var myParamArgReader io.ReadCloser
	switch {
	case myParamRaw == "@-":
		myParamArgReader = io.NopCloser(cmd.InOrStdin())
	case strings.HasPrefix(myParamRaw, "@"):
		myParamArgReader, err = os.Open(strings.TrimSpace(myParamRaw[1:]))
		if err != nil {
			return werror.WrapWithContextParams(ctx, err, "failed to open file for argument myParam")
		}
	default:
		myParamArgReader = io.NopCloser(bytes.NewReader([]byte(myParamRaw)))
	}
	defer myParamArgReader.Close()
	if err := codecs.JSON.Decode(myParamArgReader, &myParamArg); err != nil {
		return werror.WrapWithContextParams(ctx, err, "invalid value for myParam argument")
	}

	result, err := client.PutMapStringAny(ctx, myParamArg)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Fprintf(cmd.OutOrStdout(), "%v\n", string(resultBytes))
	return nil
}

func (c TestServiceCLICommand) testService_GetDateTime_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	myParamRaw, err := flags.GetString("myParam")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myParam")
	}
	if myParamRaw == "" {
		return werror.ErrorWithContextParams(ctx, "myParam is a required argument")
	}
	myParamArg, err := datetime.ParseDateTime(myParamRaw)
	if err != nil {
		return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"myParam\" as datetime")
	}

	result, err := client.GetDateTime(ctx, myParamArg)
	if err != nil {
		return err
	}
	fmt.Fprintf(cmd.OutOrStdout(), "%v\n", result)
	return nil
}

func (c TestServiceCLICommand) testService_GetDouble_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	myParamRaw, err := flags.GetString("myParam")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myParam")
	}
	if myParamRaw == "" {
		return werror.ErrorWithContextParams(ctx, "myParam is a required argument")
	}
	myParamArg, err := strconv.ParseFloat(myParamRaw, 64)
	if err != nil {
		return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"myParam\" as double")
	}

	result, err := client.GetDouble(ctx, myParamArg)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Fprintf(cmd.OutOrStdout(), "%v\n", string(resultBytes))
	return nil
}

func (c TestServiceCLICommand) testService_GetRid_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	myParamRaw, err := flags.GetString("myParam")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myParam")
	}
	if myParamRaw == "" {
		return werror.ErrorWithContextParams(ctx, "myParam is a required argument")
	}
	myParamArg, err := rid.ParseRID(myParamRaw)
	if err != nil {
		return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"myParam\" as rid")
	}

	result, err := client.GetRid(ctx, myParamArg)
	if err != nil {
		return err
	}
	fmt.Fprintf(cmd.OutOrStdout(), "%v\n", result)
	return nil
}

func (c TestServiceCLICommand) testService_GetSafeLong_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	myParamRaw, err := flags.GetString("myParam")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myParam")
	}
	if myParamRaw == "" {
		return werror.ErrorWithContextParams(ctx, "myParam is a required argument")
	}
	myParamArg, err := safelong.ParseSafeLong(myParamRaw)
	if err != nil {
		return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"myParam\" as safelong")
	}

	result, err := client.GetSafeLong(ctx, myParamArg)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Fprintf(cmd.OutOrStdout(), "%v\n", string(resultBytes))
	return nil
}

func (c TestServiceCLICommand) testService_GetUuid_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	myParamRaw, err := flags.GetString("myParam")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myParam")
	}
	if myParamRaw == "" {
		return werror.ErrorWithContextParams(ctx, "myParam is a required argument")
	}
	myParamArg, err := uuid.ParseUUID(myParamRaw)
	if err != nil {
		return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"myParam\" as uuid")
	}

	result, err := client.GetUuid(ctx, myParamArg)
	if err != nil {
		return err
	}
	fmt.Fprintf(cmd.OutOrStdout(), "%v\n", result)
	return nil
}

func (c TestServiceCLICommand) testService_GetEnum_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	myParamRaw, err := flags.GetString("myParam")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myParam")
	}
	if myParamRaw == "" {
		return werror.ErrorWithContextParams(ctx, "myParam is a required argument")
	}
	var myParamArg CustomEnum
	if err := myParamArg.UnmarshalText([]byte(myParamRaw)); err != nil {
		return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"myParam\" as CustomEnum")
	}

	result, err := client.GetEnum(ctx, myParamArg)
	if err != nil {
		return err
	}
	fmt.Fprintf(cmd.OutOrStdout(), "%v\n", result)
	return nil
}

func (c TestServiceCLICommand) testService_PutBinary_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	myParamRaw, err := flags.GetString("myParam")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myParam")
	}
	if myParamRaw == "" {
		return werror.ErrorWithContextParams(ctx, "myParam is a required argument")
	}
	var myParamArg func() (io.ReadCloser, error)
	var myParamArgReader io.ReadCloser
	switch {
	case myParamRaw == "@-":
		myParamArgReader = io.NopCloser(cmd.InOrStdin())
	case strings.HasPrefix(myParamRaw, "@"):
		myParamArgReader, err = os.Open(strings.TrimSpace(myParamRaw[1:]))
		if err != nil {
			return werror.WrapWithContextParams(ctx, err, "failed to open file for argument myParam")
		}
	default:
		myParamArgReader = io.NopCloser(base64.NewDecoder(base64.StdEncoding, bytes.NewReader([]byte(myParamRaw))))
	}
	myParamArg = func() (io.ReadCloser, error) {
		return myParamArgReader, nil
	}

	result, err := client.PutBinary(ctx, myParamArg)
	if err != nil {
		return err
	}
	_, err = io.Copy(cmd.OutOrStdout(), result)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to write result bytes to stdout")
	}
	return result.Close()
}

func (c TestServiceCLICommand) testService_GetOptionalBinary_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	result, err := client.GetOptionalBinary(ctx)
	if err != nil {
		return err
	}
	if result == nil {
		return nil
	}
	resultDeref := *result
	_, err = io.Copy(cmd.OutOrStdout(), resultDeref)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to write result bytes to stdout")
	}
	return resultDeref.Close()
}

func (c TestServiceCLICommand) testService_PutCustomUnion_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	myParamRaw, err := flags.GetString("myParam")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument myParam")
	}
	if myParamRaw == "" {
		return werror.ErrorWithContextParams(ctx, "myParam is a required argument")
	}
	var myParamArg CustomUnion
	var myParamArgReader io.ReadCloser
	switch {
	case myParamRaw == "@-":
		myParamArgReader = io.NopCloser(cmd.InOrStdin())
	case strings.HasPrefix(myParamRaw, "@"):
		myParamArgReader, err = os.Open(strings.TrimSpace(myParamRaw[1:]))
		if err != nil {
			return werror.WrapWithContextParams(ctx, err, "failed to open file for argument myParam")
		}
	default:
		myParamArgReader = io.NopCloser(bytes.NewReader([]byte(myParamRaw)))
	}
	defer myParamArgReader.Close()
	if err := codecs.JSON.Decode(myParamArgReader, &myParamArg); err != nil {
		return werror.WrapWithContextParams(ctx, err, "invalid value for myParam argument")
	}

	result, err := client.PutCustomUnion(ctx, myParamArg)
	if err != nil {
		return err
	}
	resultBytes, err := json.MarshalIndent(result, "", "    ")
	if err != nil {
		fmt.Printf("Failed to marshal to json with err: %v\n\nPrinting as string:\n%v\n", err, result)
		return nil
	}
	fmt.Fprintf(cmd.OutOrStdout(), "%v\n", string(resultBytes))
	return nil
}

func (c TestServiceCLICommand) testService_GetReserved_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	confRaw, err := flags.GetString("conf")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument conf")
	}
	if confRaw == "" {
		return werror.ErrorWithContextParams(ctx, "conf is a required argument")
	}
	confArg := confRaw

	bearertokenRaw, err := flags.GetString("bearertoken")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument bearertoken")
	}
	if bearertokenRaw == "" {
		return werror.ErrorWithContextParams(ctx, "bearertoken is a required argument")
	}
	bearertokenArg := bearertokenRaw

	return client.GetReserved(ctx, confArg, bearertokenArg)
}

func (c TestServiceCLICommand) testService_Chan_CmdRun(cmd *cobra.Command, _ []string) error {
	flags := cmd.Flags()
	ctx := getCLIContext(flags)
	client, err := c.clientProvider.Get(ctx, flags)
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to initialize client")
	}
	varRaw, err := flags.GetString("var")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument var")
	}
	if varRaw == "" {
		return werror.ErrorWithContextParams(ctx, "var is a required argument")
	}
	varArg := varRaw

	importRaw, err := flags.GetString("import")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument import")
	}
	if importRaw == "" {
		return werror.ErrorWithContextParams(ctx, "import is a required argument")
	}
	var importArg map[string]string
	var importArgReader io.ReadCloser
	switch {
	case importRaw == "@-":
		importArgReader = io.NopCloser(cmd.InOrStdin())
	case strings.HasPrefix(importRaw, "@"):
		importArgReader, err = os.Open(strings.TrimSpace(importRaw[1:]))
		if err != nil {
			return werror.WrapWithContextParams(ctx, err, "failed to open file for argument import")
		}
	default:
		importArgReader = io.NopCloser(bytes.NewReader([]byte(importRaw)))
	}
	defer importArgReader.Close()
	if err := codecs.JSON.Decode(importArgReader, &importArg); err != nil {
		return werror.WrapWithContextParams(ctx, err, "invalid value for import argument")
	}

	typeRaw, err := flags.GetString("type")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument type")
	}
	if typeRaw == "" {
		return werror.ErrorWithContextParams(ctx, "type is a required argument")
	}
	typeArg := typeRaw

	returnRaw, err := flags.GetString("return")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument return")
	}
	if returnRaw == "" {
		return werror.ErrorWithContextParams(ctx, "return is a required argument")
	}
	returnArg, err := safelong.ParseSafeLong(returnRaw)
	if err != nil {
		return werror.WrapWithContextParams(ctx, errors.WrapWithInvalidArgument(err), "failed to parse \"return\" as safelong")
	}

	httpRaw, err := flags.GetString("http")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument http")
	}
	if httpRaw == "" {
		return werror.ErrorWithContextParams(ctx, "http is a required argument")
	}
	httpArg := httpRaw

	jsonRaw, err := flags.GetString("json")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument json")
	}
	if jsonRaw == "" {
		return werror.ErrorWithContextParams(ctx, "json is a required argument")
	}
	jsonArg := jsonRaw

	reqRaw, err := flags.GetString("req")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument req")
	}
	if reqRaw == "" {
		return werror.ErrorWithContextParams(ctx, "req is a required argument")
	}
	reqArg := reqRaw

	rwRaw, err := flags.GetString("rw")
	if err != nil {
		return werror.WrapWithContextParams(ctx, err, "failed to parse argument rw")
	}
	if rwRaw == "" {
		return werror.ErrorWithContextParams(ctx, "rw is a required argument")
	}
	rwArg := rwRaw

	return client.Chan(ctx, varArg, importArg, typeArg, returnArg, httpArg, jsonArg, reqArg, rwArg)
}

func loadCLIConfig(ctx context.Context, flags *pflag.FlagSet) (CLIConfig, error) {
	var emptyConfig CLIConfig
	configPath, err := flags.GetString("conf")
	if err != nil || configPath == "" {
		return emptyConfig, werror.WrapWithContextParams(ctx, err, "config file location must be specified")
	}
	confBytes, err := os.ReadFile(configPath)
	if err != nil {
		return emptyConfig, err
	}
	var conf CLIConfig
	err = yaml.Unmarshal(confBytes, &conf)
	if err != nil {
		return emptyConfig, err
	}
	return conf, nil
}

func getCLIContext(flags *pflag.FlagSet) context.Context {
	ctx := context.Background()
	logProvider := wlog.NewNoopLoggerProvider()
	logWriter := io.Discard
	verbose, err := flags.GetBool("verbose")
	if verbose && err == nil {
		logProvider = wlogzap.LoggerProvider()
		logWriter = os.Stdout
	}
	wlog.SetDefaultLoggerProvider(logProvider)
	ctx = svc1log.WithLogger(ctx, svc1log.New(logWriter, wlog.DebugLevel))
	traceLogger := trc1log.New(logWriter)
	ctx = trc1log.WithLogger(ctx, traceLogger)
	ctx = evt2log.WithLogger(ctx, evt2log.New(logWriter))
	tracer, err := wzipkin.NewTracer(traceLogger)
	if err != nil {
		return ctx
	}
	return wtracing.ContextWithTracer(ctx, tracer)
}
