// This file was generated by Conjure and should not be manually edited.

package api

import (
	"context"
	"fmt"

	"github.com/palantir/conjure-go/v6/integration_test/testgenerated/imports/pkg1/api"
	api1 "github.com/palantir/conjure-go/v6/integration_test/testgenerated/imports/pkg2/api"
	"github.com/palantir/pkg/safejson"
	"github.com/palantir/pkg/safeyaml"
)

type Union struct {
	typ string
	one *api.Struct1
	two *api1.Struct2
}

type unionDeserializer struct {
	Type string        `json:"type"`
	One  *api.Struct1  `json:"one"`
	Two  *api1.Struct2 `json:"two"`
}

func (u *unionDeserializer) toStruct() Union {
	return Union{typ: u.Type, one: u.One, two: u.Two}
}

func (u *Union) toSerializer() (interface{}, error) {
	switch u.typ {
	default:
		return nil, fmt.Errorf("unknown type %s", u.typ)
	case "one":
		return struct {
			Type string      `json:"type"`
			One  api.Struct1 `json:"one"`
		}{Type: "one", One: *u.one}, nil
	case "two":
		return struct {
			Type string       `json:"type"`
			Two  api1.Struct2 `json:"two"`
		}{Type: "two", Two: *u.two}, nil
	}
}

func (u Union) MarshalJSON() ([]byte, error) {
	ser, err := u.toSerializer()
	if err != nil {
		return nil, err
	}
	return safejson.Marshal(ser)
}

func (u *Union) UnmarshalJSON(data []byte) error {
	var deser unionDeserializer
	if err := safejson.Unmarshal(data, &deser); err != nil {
		return err
	}
	*u = deser.toStruct()
	return nil
}

func (u Union) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(u)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (u *Union) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&u)
}

func (u *Union) AcceptFuncs(oneFunc func(api.Struct1) error, twoFunc func(api1.Struct2) error, unknownFunc func(string) error) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return unknownFunc(u.typ)
	case "one":
		return oneFunc(*u.one)
	case "two":
		return twoFunc(*u.two)
	}
}

func (u *Union) OneNoopSuccess(api.Struct1) error {
	return nil
}

func (u *Union) TwoNoopSuccess(api1.Struct2) error {
	return nil
}

func (u *Union) ErrorOnUnknown(typeName string) error {
	return fmt.Errorf("invalid value in union type. Type name: %s", typeName)
}

func (u *Union) Accept(v UnionVisitor) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknown(u.typ)
	case "one":
		return v.VisitOne(*u.one)
	case "two":
		return v.VisitTwo(*u.two)
	}
}

type UnionVisitor interface {
	VisitOne(v api.Struct1) error
	VisitTwo(v api1.Struct2) error
	VisitUnknown(typeName string) error
}

func (u *Union) AcceptWithContext(ctx context.Context, v UnionVisitorWithContext) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknownWithContext(ctx, u.typ)
	case "one":
		return v.VisitOneWithContext(ctx, *u.one)
	case "two":
		return v.VisitTwoWithContext(ctx, *u.two)
	}
}

type UnionVisitorWithContext interface {
	VisitOneWithContext(ctx context.Context, v api.Struct1) error
	VisitTwoWithContext(ctx context.Context, v api1.Struct2) error
	VisitUnknownWithContext(ctx context.Context, typeName string) error
}

type UnionWithT[T any] Union

func (u *UnionWithT[T]) Accept(ctx context.Context, v UnionVisitorWithT[T]) (T, error) {
	switch u.typ {
	default:
		if u.typ == "" {
			var result T
			return result, fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknown(ctx, u.typ)
	case "one":
		return v.VisitOne(ctx, *u.one)
	case "two":
		return v.VisitTwo(ctx, *u.two)
	}
}

type UnionVisitorWithT[T any] interface {
	VisitOne(ctx context.Context, v api.Struct1) (T, error)
	VisitTwo(ctx context.Context, v api1.Struct2) (T, error)
	VisitUnknown(ctx context.Context, typ string) (T, error)
}

func NewUnionFromOne(v api.Struct1) Union {
	return Union{typ: "one", one: &v}
}

func NewUnionFromTwo(v api1.Struct2) Union {
	return Union{typ: "two", two: &v}
}
