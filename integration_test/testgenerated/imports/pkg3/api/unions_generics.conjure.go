// This file was generated by Conjure and should not be manually edited.

//go:build go1.18

package api

import (
	"context"
	"fmt"

	"github.com/palantir/conjure-go/v6/integration_test/testgenerated/imports/pkg1/api"
	api1 "github.com/palantir/conjure-go/v6/integration_test/testgenerated/imports/pkg2/api"
	v2 "github.com/palantir/conjure-go/v6/integration_test/testgenerated/imports/pkg4/v2"
	v21 "github.com/palantir/conjure-go/v6/integration_test/testgenerated/imports/pkg5/v2"
)

type UnionWithT[T any] Union

func (u *UnionWithT[T]) Accept(ctx context.Context, v UnionVisitorWithT[T]) (T, error) {
	switch u.typ {
	default:
		if u.typ == "" {
			var result T
			return result, fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknown(ctx, u.typ)
	case "one":
		return v.VisitOne(ctx, *u.one)
	case "two":
		return v.VisitTwo(ctx, *u.two)
	case "three":
		return v.VisitThree(ctx, *u.three)
	case "four":
		return v.VisitFour(ctx, *u.four)
	}
}

type UnionVisitorWithT[T any] interface {
	VisitOne(ctx context.Context, v api.Struct1) (T, error)
	VisitTwo(ctx context.Context, v api1.Struct2) (T, error)
	VisitThree(ctx context.Context, v v2.ObjectInPackageEndingInVersion) (T, error)
	VisitFour(ctx context.Context, v v21.DifferentPackageEndingInVersion) (T, error)
	VisitUnknown(ctx context.Context, typ string) (T, error)
}
