// This file was generated by Conjure and should not be manually edited.

package api

import (
	"github.com/palantir/pkg/safejson"
	"github.com/palantir/pkg/safeyaml"
	"github.com/palantir/pkg/uuid"
)

type Response struct {
	Input                string               `json:"input"`
	Reps                 int                  `json:"reps"`
	Optional             *string              `json:"optional"`
	ListParam            []int                `json:"listParam"`
	LastParam            *string              `json:"lastParam"`
	AliasString          AliasString          `json:"aliasString"`
	AliasAliasString     AliasAliasString     `json:"aliasAliasString"`
	OptionalAliasString  OptionalAliasString  `json:"optionalAliasString"`
	AliasInteger         AliasInteger         `json:"aliasInteger"`
	AliasAliasInteger    AliasAliasInteger    `json:"aliasAliasInteger"`
	OptionalAliasInteger OptionalAliasInteger `json:"optionalAliasInteger"`
	Uuid                 uuid.UUID            `json:"uuid"`
	SetUuid              []uuid.UUID          `json:"setUuid"`
	SetAliasUuid         []AliasUuid          `json:"setAliasUuid"`
	AliasUuid            AliasUuid            `json:"aliasUuid"`
	AliasAliasUuid       AliasAliasUuid       `json:"aliasAliasUuid"`
	OptionalAliasUuid    OptionalAliasUuid    `json:"optionalAliasUuid"`
	Enum                 Enum                 `json:"enum"`
	AliasOptionalEnum    AliasOptionalEnum    `json:"aliasOptionalEnum"`
	AliasEnum            AliasEnum            `json:"aliasEnum"`
	OptionalAliasEnum    OptionalAliasEnum    `json:"optionalAliasEnum"`
	ListAliasEnum        ListAliasEnum        `json:"listAliasEnum"`
}

func (o Response) MarshalJSON() ([]byte, error) {
	if o.ListParam == nil {
		o.ListParam = make([]int, 0)
	}
	if o.SetUuid == nil {
		o.SetUuid = make([]uuid.UUID, 0)
	}
	if o.SetAliasUuid == nil {
		o.SetAliasUuid = make([]AliasUuid, 0)
	}
	if o.ListAliasEnum == nil {
		o.ListAliasEnum = make([]AliasEnum, 0)
	}
	type ResponseAlias Response
	return safejson.Marshal(ResponseAlias(o))
}

func (o *Response) UnmarshalJSON(data []byte) error {
	type ResponseAlias Response
	var rawResponse ResponseAlias
	if err := safejson.Unmarshal(data, &rawResponse); err != nil {
		return err
	}
	if rawResponse.ListParam == nil {
		rawResponse.ListParam = make([]int, 0)
	}
	if rawResponse.SetUuid == nil {
		rawResponse.SetUuid = make([]uuid.UUID, 0)
	}
	if rawResponse.SetAliasUuid == nil {
		rawResponse.SetAliasUuid = make([]AliasUuid, 0)
	}
	if rawResponse.ListAliasEnum == nil {
		rawResponse.ListAliasEnum = make([]AliasEnum, 0)
	}
	*o = Response(rawResponse)
	return nil
}

func (o Response) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(o)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (o *Response) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&o)
}
