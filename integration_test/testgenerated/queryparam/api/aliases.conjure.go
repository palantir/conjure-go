// This file was generated by Conjure and should not be manually edited.

package api

import (
	"github.com/palantir/pkg/safejson"
	"github.com/palantir/pkg/safeyaml"
	"github.com/palantir/pkg/uuid"
)

type AliasAliasInteger AliasInteger
type AliasAliasString AliasString
type AliasAliasUuid AliasUuid

func (a AliasAliasUuid) String() string {
	return AliasUuid(a).String()
}

func (a AliasAliasUuid) MarshalText() ([]byte, error) {
	return AliasUuid(a).MarshalText()
}

func (a *AliasAliasUuid) UnmarshalText(data []byte) error {
	var rawAliasAliasUuid AliasUuid
	if err := rawAliasAliasUuid.UnmarshalText(data); err != nil {
		return err
	}
	*a = AliasAliasUuid(rawAliasAliasUuid)
	return nil
}

func (a AliasAliasUuid) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(a)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (a *AliasAliasUuid) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&a)
}

type AliasEnum Enum

func (a AliasEnum) String() string {
	return Enum(a).String()
}

func (a AliasEnum) MarshalText() ([]byte, error) {
	return Enum(a).MarshalText()
}

func (a *AliasEnum) UnmarshalText(data []byte) error {
	var rawAliasEnum Enum
	if err := rawAliasEnum.UnmarshalText(data); err != nil {
		return err
	}
	*a = AliasEnum(rawAliasEnum)
	return nil
}

func (a AliasEnum) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(a)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (a *AliasEnum) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&a)
}

type AliasInteger int
type AliasOptionalEnum struct {
	Value *Enum
}

func (a AliasOptionalEnum) MarshalText() ([]byte, error) {
	if a.Value == nil {
		return nil, nil
	}
	return a.Value.MarshalText()
}

func (a *AliasOptionalEnum) UnmarshalText(data []byte) error {
	if a.Value == nil {
		a.Value = new(Enum)
	}
	return a.Value.UnmarshalText(data)
}

func (a AliasOptionalEnum) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(a)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (a *AliasOptionalEnum) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&a)
}

type AliasString string
type AliasUuid uuid.UUID

func (a AliasUuid) String() string {
	return uuid.UUID(a).String()
}

func (a AliasUuid) MarshalText() ([]byte, error) {
	return uuid.UUID(a).MarshalText()
}

func (a *AliasUuid) UnmarshalText(data []byte) error {
	var rawAliasUuid uuid.UUID
	if err := rawAliasUuid.UnmarshalText(data); err != nil {
		return err
	}
	*a = AliasUuid(rawAliasUuid)
	return nil
}

func (a AliasUuid) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(a)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (a *AliasUuid) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&a)
}

type ListAliasEnum []AliasEnum

func (a ListAliasEnum) MarshalJSON() ([]byte, error) {
	return safejson.Marshal([]AliasEnum(a))
}

func (a *ListAliasEnum) UnmarshalJSON(data []byte) error {
	var rawListAliasEnum []AliasEnum
	if err := safejson.Unmarshal(data, &rawListAliasEnum); err != nil {
		return err
	}
	*a = ListAliasEnum(rawListAliasEnum)
	return nil
}

func (a ListAliasEnum) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(a)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (a *ListAliasEnum) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&a)
}

type OptionalAliasEnum struct {
	Value *AliasEnum
}

func (a OptionalAliasEnum) MarshalText() ([]byte, error) {
	if a.Value == nil {
		return nil, nil
	}
	return a.Value.MarshalText()
}

func (a *OptionalAliasEnum) UnmarshalText(data []byte) error {
	if a.Value == nil {
		a.Value = new(AliasEnum)
	}
	return a.Value.UnmarshalText(data)
}

func (a OptionalAliasEnum) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(a)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (a *OptionalAliasEnum) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&a)
}

type OptionalAliasInteger struct {
	Value *AliasInteger
}

func (a OptionalAliasInteger) MarshalJSON() ([]byte, error) {
	if a.Value == nil {
		return []byte("null"), nil
	}
	return safejson.Marshal(a.Value)
}

func (a *OptionalAliasInteger) UnmarshalJSON(data []byte) error {
	if a.Value == nil {
		a.Value = new(AliasInteger)
	}
	return safejson.Unmarshal(data, a.Value)
}

func (a OptionalAliasInteger) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(a)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (a *OptionalAliasInteger) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&a)
}

type OptionalAliasString struct {
	Value *AliasString
}

func (a OptionalAliasString) MarshalText() ([]byte, error) {
	if a.Value == nil {
		return nil, nil
	}
	return []byte(*a.Value), nil
}

func (a *OptionalAliasString) UnmarshalText(data []byte) error {
	rawOptionalAliasString := AliasString(data)
	a.Value = &rawOptionalAliasString
	return nil
}

func (a OptionalAliasString) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(a)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (a *OptionalAliasString) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&a)
}

type OptionalAliasUuid struct {
	Value *AliasUuid
}

func (a OptionalAliasUuid) MarshalText() ([]byte, error) {
	if a.Value == nil {
		return nil, nil
	}
	return a.Value.MarshalText()
}

func (a *OptionalAliasUuid) UnmarshalText(data []byte) error {
	if a.Value == nil {
		a.Value = new(AliasUuid)
	}
	return a.Value.UnmarshalText(data)
}

func (a OptionalAliasUuid) MarshalYAML() (interface{}, error) {
	jsonBytes, err := safejson.Marshal(a)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (a *OptionalAliasUuid) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return safejson.Unmarshal(jsonBytes, *&a)
}
