// This file was generated by Conjure and should not be manually edited.

package api

import (
	"strings"
)

type Enum struct {
	val Enum_Value
}

type Enum_Value string

const (
	Enum_VAL1    Enum_Value = "VAL1"
	Enum_VAL2    Enum_Value = "VAL2"
	Enum_UNKNOWN Enum_Value = "UNKNOWN"
)

// Enum_Values returns all known variants of Enum.
func Enum_Values() []Enum_Value {
	return []Enum_Value{Enum_VAL1, Enum_VAL2}
}

func New_Enum(value Enum_Value) Enum {
	return Enum{val: value}
}

// IsUnknown returns false for all known variants of Enum and true otherwise.
func (e Enum) IsUnknown() bool {
	switch e.val {
	case Enum_VAL1, Enum_VAL2:
		return false
	}
	return true
}

func (e Enum) Value() Enum_Value {
	if e.IsUnknown() {
		return Enum_UNKNOWN
	}
	return e.val
}

func (e Enum) String() string {
	return string(e.val)
}

func (e Enum) MarshalText() ([]byte, error) {
	return []byte(e.val), nil
}

func (e *Enum) UnmarshalText(data []byte) error {
	switch v := strings.ToUpper(string(data)); v {
	default:
		*e = New_Enum(Enum_Value(v))
	case "VAL1":
		*e = New_Enum(Enum_VAL1)
	case "VAL2":
		*e = New_Enum(Enum_VAL2)
	}
	return nil
}
