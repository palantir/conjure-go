// This file was generated by Conjure and should not be manually edited.

package verification

import (
	"context"
	"fmt"
	"net/url"

	"github.com/palantir/conjure-go-runtime/conjure-go-client/httpclient"
	"github.com/palantir/pkg/bearertoken"
	"github.com/palantir/pkg/datetime"
	"github.com/palantir/pkg/rid"
	"github.com/palantir/pkg/safelong"
	"github.com/palantir/pkg/uuid"
)

type SingleQueryParamServiceClient interface {
	QueryParamBearertoken(ctx context.Context, indexArg int, someQueryArg bearertoken.Token) error
	QueryParamBoolean(ctx context.Context, indexArg int, someQueryArg bool) error
	QueryParamDouble(ctx context.Context, indexArg int, someQueryArg float64) error
	QueryParamInteger(ctx context.Context, indexArg int, someQueryArg int) error
	QueryParamRid(ctx context.Context, indexArg int, someQueryArg rid.ResourceIdentifier) error
	QueryParamSafelong(ctx context.Context, indexArg int, someQueryArg safelong.SafeLong) error
	QueryParamString(ctx context.Context, indexArg int, someQueryArg string) error
	QueryParamUuid(ctx context.Context, indexArg int, someQueryArg uuid.UUID) error
	QueryParamOptionalString(ctx context.Context, indexArg int, someQueryArg *string) error
	QueryParamAliasString(ctx context.Context, indexArg int, someQueryArg AliasString) error
}

type singleQueryParamServiceClient struct {
	client httpclient.Client
}

func NewSingleQueryParamServiceClient(client httpclient.Client) SingleQueryParamServiceClient {
	return &singleQueryParamServiceClient{client: client}
}

func (c *singleQueryParamServiceClient) QueryParamBearertoken(ctx context.Context, indexArg int, someQueryArg bearertoken.Token) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("QueryParamBearertoken"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/queryParamBearertoken/%s", url.PathEscape(fmt.Sprint(indexArg))))
	queryParams := make(url.Values)
	queryParams.Set("foo", fmt.Sprint(someQueryArg))
	requestParams = append(requestParams, httpclient.WithQueryValues(queryParams))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleQueryParamServiceClient) QueryParamBoolean(ctx context.Context, indexArg int, someQueryArg bool) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("QueryParamBoolean"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/queryParamBoolean/%s", url.PathEscape(fmt.Sprint(indexArg))))
	queryParams := make(url.Values)
	queryParams.Set("foo", fmt.Sprint(someQueryArg))
	requestParams = append(requestParams, httpclient.WithQueryValues(queryParams))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleQueryParamServiceClient) QueryParamDouble(ctx context.Context, indexArg int, someQueryArg float64) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("QueryParamDouble"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/queryParamDouble/%s", url.PathEscape(fmt.Sprint(indexArg))))
	queryParams := make(url.Values)
	queryParams.Set("foo", fmt.Sprint(someQueryArg))
	requestParams = append(requestParams, httpclient.WithQueryValues(queryParams))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleQueryParamServiceClient) QueryParamInteger(ctx context.Context, indexArg int, someQueryArg int) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("QueryParamInteger"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/queryParamInteger/%s", url.PathEscape(fmt.Sprint(indexArg))))
	queryParams := make(url.Values)
	queryParams.Set("foo", fmt.Sprint(someQueryArg))
	requestParams = append(requestParams, httpclient.WithQueryValues(queryParams))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleQueryParamServiceClient) QueryParamRid(ctx context.Context, indexArg int, someQueryArg rid.ResourceIdentifier) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("QueryParamRid"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/queryParamRid/%s", url.PathEscape(fmt.Sprint(indexArg))))
	queryParams := make(url.Values)
	queryParams.Set("foo", fmt.Sprint(someQueryArg))
	requestParams = append(requestParams, httpclient.WithQueryValues(queryParams))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleQueryParamServiceClient) QueryParamSafelong(ctx context.Context, indexArg int, someQueryArg safelong.SafeLong) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("QueryParamSafelong"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/queryParamSafelong/%s", url.PathEscape(fmt.Sprint(indexArg))))
	queryParams := make(url.Values)
	queryParams.Set("foo", fmt.Sprint(someQueryArg))
	requestParams = append(requestParams, httpclient.WithQueryValues(queryParams))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleQueryParamServiceClient) QueryParamString(ctx context.Context, indexArg int, someQueryArg string) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("QueryParamString"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/queryParamString/%s", url.PathEscape(fmt.Sprint(indexArg))))
	queryParams := make(url.Values)
	queryParams.Set("foo", fmt.Sprint(someQueryArg))
	requestParams = append(requestParams, httpclient.WithQueryValues(queryParams))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleQueryParamServiceClient) QueryParamUuid(ctx context.Context, indexArg int, someQueryArg uuid.UUID) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("QueryParamUuid"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/queryParamUuid/%s", url.PathEscape(fmt.Sprint(indexArg))))
	queryParams := make(url.Values)
	queryParams.Set("foo", fmt.Sprint(someQueryArg))
	requestParams = append(requestParams, httpclient.WithQueryValues(queryParams))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleQueryParamServiceClient) QueryParamOptionalString(ctx context.Context, indexArg int, someQueryArg *string) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("QueryParamOptionalString"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/queryParamOptionalString/%s", url.PathEscape(fmt.Sprint(indexArg))))
	queryParams := make(url.Values)
	if someQueryArg != nil {
		queryParams.Set("foo", fmt.Sprint(*someQueryArg))
	}
	requestParams = append(requestParams, httpclient.WithQueryValues(queryParams))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleQueryParamServiceClient) QueryParamAliasString(ctx context.Context, indexArg int, someQueryArg AliasString) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("QueryParamAliasString"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/queryParamAliasString/%s", url.PathEscape(fmt.Sprint(indexArg))))
	queryParams := make(url.Values)
	queryParams.Set("foo", fmt.Sprint(someQueryArg))
	requestParams = append(requestParams, httpclient.WithQueryValues(queryParams))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

type SingleHeaderServiceClient interface {
	HeaderBearertoken(ctx context.Context, indexArg int, headerBearertokenArg bearertoken.Token) error
	HeaderBoolean(ctx context.Context, indexArg int, headerBooleanArg bool) error
	HeaderDatetime(ctx context.Context, indexArg int, headerDatetimeArg datetime.DateTime) error
	HeaderDouble(ctx context.Context, indexArg int, headerDoubleArg float64) error
	HeaderInteger(ctx context.Context, indexArg int, headerIntegerArg int) error
	HeaderRid(ctx context.Context, indexArg int, headerRidArg rid.ResourceIdentifier) error
	HeaderSafelong(ctx context.Context, indexArg int, headerSafelongArg safelong.SafeLong) error
	HeaderString(ctx context.Context, indexArg int, headerStringArg string) error
	HeaderUuid(ctx context.Context, indexArg int, headerUuidArg uuid.UUID) error
	HeaderOptionalString(ctx context.Context, indexArg int, headerOptionalStringArg *string) error
	HeaderAliasString(ctx context.Context, indexArg int, headerAliasStringArg AliasString) error
}

type singleHeaderServiceClient struct {
	client httpclient.Client
}

func NewSingleHeaderServiceClient(client httpclient.Client) SingleHeaderServiceClient {
	return &singleHeaderServiceClient{client: client}
}

func (c *singleHeaderServiceClient) HeaderBearertoken(ctx context.Context, indexArg int, headerBearertokenArg bearertoken.Token) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderBearertoken"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/headerBearertoken/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerBearertokenArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderBoolean(ctx context.Context, indexArg int, headerBooleanArg bool) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderBoolean"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/headerBoolean/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerBooleanArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderDatetime(ctx context.Context, indexArg int, headerDatetimeArg datetime.DateTime) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderDatetime"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/headerDatetime/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerDatetimeArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderDouble(ctx context.Context, indexArg int, headerDoubleArg float64) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderDouble"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/headerDouble/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerDoubleArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderInteger(ctx context.Context, indexArg int, headerIntegerArg int) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderInteger"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/headerInteger/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerIntegerArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderRid(ctx context.Context, indexArg int, headerRidArg rid.ResourceIdentifier) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderRid"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/headerRid/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerRidArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderSafelong(ctx context.Context, indexArg int, headerSafelongArg safelong.SafeLong) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderSafelong"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/headerSafelong/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerSafelongArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderString(ctx context.Context, indexArg int, headerStringArg string) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderString"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/headerString/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerStringArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderUuid(ctx context.Context, indexArg int, headerUuidArg uuid.UUID) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderUuid"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/headerUuid/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerUuidArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderOptionalString(ctx context.Context, indexArg int, headerOptionalStringArg *string) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderOptionalString"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/headerOptionalString/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerOptionalStringArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singleHeaderServiceClient) HeaderAliasString(ctx context.Context, indexArg int, headerAliasStringArg AliasString) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("HeaderAliasString"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/headerAliasString/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithHeader("Some-Header", fmt.Sprint(headerAliasStringArg)))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

type SinglePathParamServiceClient interface {
	PathParamBoolean(ctx context.Context, indexArg int, booleanParamArg bool) error
	PathParamDatetime(ctx context.Context, indexArg int, datetimeParamArg datetime.DateTime) error
	PathParamDouble(ctx context.Context, indexArg int, doubleParamArg float64) error
	PathParamInteger(ctx context.Context, indexArg int, integerParamArg int) error
	PathParamRid(ctx context.Context, indexArg int, ridParamArg rid.ResourceIdentifier) error
	PathParamSafelong(ctx context.Context, indexArg int, safelongParamArg safelong.SafeLong) error
	PathParamString(ctx context.Context, indexArg int, stringParamArg string) error
	PathParamUuid(ctx context.Context, indexArg int, uuidParamArg uuid.UUID) error
	PathParamAliasString(ctx context.Context, indexArg int, aliasStringParamArg AliasString) error
}

type singlePathParamServiceClient struct {
	client httpclient.Client
}

func NewSinglePathParamServiceClient(client httpclient.Client) SinglePathParamServiceClient {
	return &singlePathParamServiceClient{client: client}
}

func (c *singlePathParamServiceClient) PathParamBoolean(ctx context.Context, indexArg int, booleanParamArg bool) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("PathParamBoolean"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/pathParamBoolean/%s/%s", url.PathEscape(fmt.Sprint(indexArg)), url.PathEscape(fmt.Sprint(booleanParamArg))))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singlePathParamServiceClient) PathParamDatetime(ctx context.Context, indexArg int, datetimeParamArg datetime.DateTime) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("PathParamDatetime"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/pathParamDatetime/%s/%s", url.PathEscape(fmt.Sprint(indexArg)), url.PathEscape(fmt.Sprint(datetimeParamArg))))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singlePathParamServiceClient) PathParamDouble(ctx context.Context, indexArg int, doubleParamArg float64) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("PathParamDouble"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/pathParamDouble/%s/%s", url.PathEscape(fmt.Sprint(indexArg)), url.PathEscape(fmt.Sprint(doubleParamArg))))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singlePathParamServiceClient) PathParamInteger(ctx context.Context, indexArg int, integerParamArg int) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("PathParamInteger"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/pathParamInteger/%s/%s", url.PathEscape(fmt.Sprint(indexArg)), url.PathEscape(fmt.Sprint(integerParamArg))))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singlePathParamServiceClient) PathParamRid(ctx context.Context, indexArg int, ridParamArg rid.ResourceIdentifier) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("PathParamRid"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/pathParamRid/%s/%s", url.PathEscape(fmt.Sprint(indexArg)), url.PathEscape(fmt.Sprint(ridParamArg))))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singlePathParamServiceClient) PathParamSafelong(ctx context.Context, indexArg int, safelongParamArg safelong.SafeLong) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("PathParamSafelong"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/pathParamSafelong/%s/%s", url.PathEscape(fmt.Sprint(indexArg)), url.PathEscape(fmt.Sprint(safelongParamArg))))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singlePathParamServiceClient) PathParamString(ctx context.Context, indexArg int, stringParamArg string) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("PathParamString"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/pathParamString/%s/%s", url.PathEscape(fmt.Sprint(indexArg)), url.PathEscape(fmt.Sprint(stringParamArg))))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singlePathParamServiceClient) PathParamUuid(ctx context.Context, indexArg int, uuidParamArg uuid.UUID) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("PathParamUuid"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/pathParamUuid/%s/%s", url.PathEscape(fmt.Sprint(indexArg)), url.PathEscape(fmt.Sprint(uuidParamArg))))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

func (c *singlePathParamServiceClient) PathParamAliasString(ctx context.Context, indexArg int, aliasStringParamArg AliasString) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("PathParamAliasString"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/pathParamAliasString/%s/%s", url.PathEscape(fmt.Sprint(indexArg)), url.PathEscape(fmt.Sprint(aliasStringParamArg))))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

type AutoDeserializeConfirmServiceClient interface {
	// Send the response received for positive test cases here to verify that it has been serialized and deserialized properly.
	Confirm(ctx context.Context, endpointArg EndpointName, indexArg int, bodyArg interface{}) error
}

type autoDeserializeConfirmServiceClient struct {
	client httpclient.Client
}

func NewAutoDeserializeConfirmServiceClient(client httpclient.Client) AutoDeserializeConfirmServiceClient {
	return &autoDeserializeConfirmServiceClient{client: client}
}

func (c *autoDeserializeConfirmServiceClient) Confirm(ctx context.Context, endpointArg EndpointName, indexArg int, bodyArg interface{}) error {
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("Confirm"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("POST"))
	requestParams = append(requestParams, httpclient.WithPathf("/confirm/%s/%s", url.PathEscape(fmt.Sprint(endpointArg)), url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONRequest(bodyArg))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return err
	}
	_ = resp
	return nil
}

type AutoDeserializeServiceClient interface {
	ReceiveBearerTokenExample(ctx context.Context, indexArg int) (BearerTokenExample, error)
	ReceiveBooleanExample(ctx context.Context, indexArg int) (BooleanExample, error)
	ReceiveDateTimeExample(ctx context.Context, indexArg int) (DateTimeExample, error)
	ReceiveDoubleExample(ctx context.Context, indexArg int) (DoubleExample, error)
	ReceiveIntegerExample(ctx context.Context, indexArg int) (IntegerExample, error)
	ReceiveRidExample(ctx context.Context, indexArg int) (RidExample, error)
	ReceiveSafeLongExample(ctx context.Context, indexArg int) (SafeLongExample, error)
	ReceiveStringExample(ctx context.Context, indexArg int) (StringExample, error)
	ReceiveUuidExample(ctx context.Context, indexArg int) (UuidExample, error)
	ReceiveAnyExample(ctx context.Context, indexArg int) (AnyExample, error)
	ReceiveListExample(ctx context.Context, indexArg int) (ListExample, error)
	ReceiveSetStringExample(ctx context.Context, indexArg int) (SetStringExample, error)
	ReceiveSetDoubleExample(ctx context.Context, indexArg int) (SetDoubleExample, error)
	ReceiveMapExample(ctx context.Context, indexArg int) (MapExample, error)
	ReceiveOptionalExample(ctx context.Context, indexArg int) (OptionalExample, error)
	ReceiveLongOptionalExample(ctx context.Context, indexArg int) (LongOptionalExample, error)
	ReceiveStringAliasExample(ctx context.Context, indexArg int) (StringAliasExample, error)
	ReceiveDoubleAliasExample(ctx context.Context, indexArg int) (DoubleAliasExample, error)
	ReceiveIntegerAliasExample(ctx context.Context, indexArg int) (IntegerAliasExample, error)
	ReceiveBooleanAliasExample(ctx context.Context, indexArg int) (BooleanAliasExample, error)
	ReceiveSafeLongAliasExample(ctx context.Context, indexArg int) (SafeLongAliasExample, error)
	ReceiveRidAliasExample(ctx context.Context, indexArg int) (RidAliasExample, error)
	ReceiveBearerTokenAliasExample(ctx context.Context, indexArg int) (BearerTokenAliasExample, error)
	ReceiveUuidAliasExample(ctx context.Context, indexArg int) (UuidAliasExample, error)
	ReceiveReferenceAliasExample(ctx context.Context, indexArg int) (ReferenceAliasExample, error)
	ReceiveDateTimeAliasExample(ctx context.Context, indexArg int) (DateTimeAliasExample, error)
	ReceiveKebabCaseObjectExample(ctx context.Context, indexArg int) (KebabCaseObjectExample, error)
	ReceiveSnakeCaseObjectExample(ctx context.Context, indexArg int) (SnakeCaseObjectExample, error)
}

type autoDeserializeServiceClient struct {
	client httpclient.Client
}

func NewAutoDeserializeServiceClient(client httpclient.Client) AutoDeserializeServiceClient {
	return &autoDeserializeServiceClient{client: client}
}

func (c *autoDeserializeServiceClient) ReceiveBearerTokenExample(ctx context.Context, indexArg int) (BearerTokenExample, error) {
	var defaultReturnVal BearerTokenExample
	var returnVal *BearerTokenExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveBearerTokenExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveBearerTokenExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveBooleanExample(ctx context.Context, indexArg int) (BooleanExample, error) {
	var defaultReturnVal BooleanExample
	var returnVal *BooleanExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveBooleanExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveBooleanExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveDateTimeExample(ctx context.Context, indexArg int) (DateTimeExample, error) {
	var defaultReturnVal DateTimeExample
	var returnVal *DateTimeExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveDateTimeExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveDateTimeExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveDoubleExample(ctx context.Context, indexArg int) (DoubleExample, error) {
	var defaultReturnVal DoubleExample
	var returnVal *DoubleExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveDoubleExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveDoubleExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveIntegerExample(ctx context.Context, indexArg int) (IntegerExample, error) {
	var defaultReturnVal IntegerExample
	var returnVal *IntegerExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveIntegerExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveIntegerExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveRidExample(ctx context.Context, indexArg int) (RidExample, error) {
	var defaultReturnVal RidExample
	var returnVal *RidExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveRidExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveRidExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSafeLongExample(ctx context.Context, indexArg int) (SafeLongExample, error) {
	var defaultReturnVal SafeLongExample
	var returnVal *SafeLongExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSafeLongExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveSafeLongExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveStringExample(ctx context.Context, indexArg int) (StringExample, error) {
	var defaultReturnVal StringExample
	var returnVal *StringExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveStringExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveStringExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveUuidExample(ctx context.Context, indexArg int) (UuidExample, error) {
	var defaultReturnVal UuidExample
	var returnVal *UuidExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveUuidExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveUuidExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveAnyExample(ctx context.Context, indexArg int) (AnyExample, error) {
	var defaultReturnVal AnyExample
	var returnVal *AnyExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveAnyExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveAnyExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveListExample(ctx context.Context, indexArg int) (ListExample, error) {
	var defaultReturnVal ListExample
	var returnVal *ListExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveListExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveListExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSetStringExample(ctx context.Context, indexArg int) (SetStringExample, error) {
	var defaultReturnVal SetStringExample
	var returnVal *SetStringExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSetStringExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveSetStringExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSetDoubleExample(ctx context.Context, indexArg int) (SetDoubleExample, error) {
	var defaultReturnVal SetDoubleExample
	var returnVal *SetDoubleExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSetDoubleExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveSetDoubleExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveMapExample(ctx context.Context, indexArg int) (MapExample, error) {
	var defaultReturnVal MapExample
	var returnVal *MapExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveMapExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveMapExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveOptionalExample(ctx context.Context, indexArg int) (OptionalExample, error) {
	var defaultReturnVal OptionalExample
	var returnVal *OptionalExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveOptionalExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveOptionalExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveLongOptionalExample(ctx context.Context, indexArg int) (LongOptionalExample, error) {
	var defaultReturnVal LongOptionalExample
	var returnVal *LongOptionalExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveLongOptionalExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveLongOptionalExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveStringAliasExample(ctx context.Context, indexArg int) (StringAliasExample, error) {
	var defaultReturnVal StringAliasExample
	var returnVal *StringAliasExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveStringAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveStringAliasExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveDoubleAliasExample(ctx context.Context, indexArg int) (DoubleAliasExample, error) {
	var defaultReturnVal DoubleAliasExample
	var returnVal *DoubleAliasExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveDoubleAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveDoubleAliasExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveIntegerAliasExample(ctx context.Context, indexArg int) (IntegerAliasExample, error) {
	var defaultReturnVal IntegerAliasExample
	var returnVal *IntegerAliasExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveIntegerAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveIntegerAliasExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveBooleanAliasExample(ctx context.Context, indexArg int) (BooleanAliasExample, error) {
	var defaultReturnVal BooleanAliasExample
	var returnVal *BooleanAliasExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveBooleanAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveBooleanAliasExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSafeLongAliasExample(ctx context.Context, indexArg int) (SafeLongAliasExample, error) {
	var defaultReturnVal SafeLongAliasExample
	var returnVal *SafeLongAliasExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSafeLongAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveSafeLongAliasExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveRidAliasExample(ctx context.Context, indexArg int) (RidAliasExample, error) {
	var defaultReturnVal RidAliasExample
	var returnVal *RidAliasExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveRidAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveRidAliasExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveBearerTokenAliasExample(ctx context.Context, indexArg int) (BearerTokenAliasExample, error) {
	var defaultReturnVal BearerTokenAliasExample
	var returnVal *BearerTokenAliasExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveBearerTokenAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveBearerTokenAliasExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveUuidAliasExample(ctx context.Context, indexArg int) (UuidAliasExample, error) {
	var defaultReturnVal UuidAliasExample
	var returnVal *UuidAliasExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveUuidAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveUuidAliasExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveReferenceAliasExample(ctx context.Context, indexArg int) (ReferenceAliasExample, error) {
	var defaultReturnVal ReferenceAliasExample
	var returnVal *ReferenceAliasExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveReferenceAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveReferenceAliasExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveDateTimeAliasExample(ctx context.Context, indexArg int) (DateTimeAliasExample, error) {
	var defaultReturnVal DateTimeAliasExample
	var returnVal *DateTimeAliasExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveDateTimeAliasExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveDateTimeAliasExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveKebabCaseObjectExample(ctx context.Context, indexArg int) (KebabCaseObjectExample, error) {
	var defaultReturnVal KebabCaseObjectExample
	var returnVal *KebabCaseObjectExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveKebabCaseObjectExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveKebabCaseObjectExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}

func (c *autoDeserializeServiceClient) ReceiveSnakeCaseObjectExample(ctx context.Context, indexArg int) (SnakeCaseObjectExample, error) {
	var defaultReturnVal SnakeCaseObjectExample
	var returnVal *SnakeCaseObjectExample
	var requestParams []httpclient.RequestParam
	requestParams = append(requestParams, httpclient.WithRPCMethodName("ReceiveSnakeCaseObjectExample"))
	requestParams = append(requestParams, httpclient.WithRequestMethod("GET"))
	requestParams = append(requestParams, httpclient.WithPathf("/receiveSnakeCaseObjectExample/%s", url.PathEscape(fmt.Sprint(indexArg))))
	requestParams = append(requestParams, httpclient.WithJSONResponse(&returnVal))
	resp, err := c.client.Do(ctx, requestParams...)
	if err != nil {
		return defaultReturnVal, err
	}
	_ = resp
	if returnVal == nil {
		return defaultReturnVal, fmt.Errorf("returnVal cannot be nil")
	}
	return *returnVal, nil
}
