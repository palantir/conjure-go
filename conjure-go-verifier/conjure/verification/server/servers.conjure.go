// This file was generated by Conjure and should not be manually edited.

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"

	codecs "github.com/palantir/conjure-go-runtime/v2/conjure-go-contract/codecs"
	errors "github.com/palantir/conjure-go-runtime/v2/conjure-go-contract/errors"
	httpserver "github.com/palantir/conjure-go-runtime/v2/conjure-go-server/httpserver"
	types "github.com/palantir/conjure-go/v6/conjure-go-verifier/conjure/verification/types"
	bearertoken "github.com/palantir/pkg/bearertoken"
	datetime "github.com/palantir/pkg/datetime"
	rid "github.com/palantir/pkg/rid"
	safelong "github.com/palantir/pkg/safelong"
	uuid "github.com/palantir/pkg/uuid"
	werror "github.com/palantir/witchcraft-go-error"
	wresource "github.com/palantir/witchcraft-go-server/v2/witchcraft/wresource"
	wrouter "github.com/palantir/witchcraft-go-server/v2/wrouter"
)

type AutoDeserializeConfirmService interface {
	// Send the response received for positive test cases here to verify that it has been serialized and deserialized properly.
	Confirm(ctx context.Context, endpointArg EndpointName, indexArg int, bodyArg interface{}) error
	ReceiveBearerTokenExample(ctx context.Context, indexArg int, bodyArg types.BearerTokenExample) error
	ReceiveBinaryExample(ctx context.Context, indexArg int, bodyArg types.BinaryExample) error
	ReceiveBooleanExample(ctx context.Context, indexArg int, bodyArg types.BooleanExample) error
	ReceiveDateTimeExample(ctx context.Context, indexArg int, bodyArg types.DateTimeExample) error
	ReceiveDoubleExample(ctx context.Context, indexArg int, bodyArg types.DoubleExample) error
	ReceiveIntegerExample(ctx context.Context, indexArg int, bodyArg types.IntegerExample) error
	ReceiveRidExample(ctx context.Context, indexArg int, bodyArg types.RidExample) error
	ReceiveSafeLongExample(ctx context.Context, indexArg int, bodyArg types.SafeLongExample) error
	ReceiveStringExample(ctx context.Context, indexArg int, bodyArg types.StringExample) error
	ReceiveUuidExample(ctx context.Context, indexArg int, bodyArg types.UuidExample) error
	ReceiveAnyExample(ctx context.Context, indexArg int, bodyArg types.AnyExample) error
	ReceiveEnumExample(ctx context.Context, indexArg int, bodyArg types.EnumExample) error
	ReceiveListExample(ctx context.Context, indexArg int, bodyArg types.ListExample) error
	ReceiveSetStringExample(ctx context.Context, indexArg int, bodyArg types.SetStringExample) error
	ReceiveSetDoubleExample(ctx context.Context, indexArg int, bodyArg types.SetDoubleExample) error
	ReceiveMapExample(ctx context.Context, indexArg int, bodyArg types.MapExample) error
	ReceiveOptionalExample(ctx context.Context, indexArg int, bodyArg types.OptionalExample) error
	ReceiveOptionalBooleanExample(ctx context.Context, indexArg int, bodyArg types.OptionalBooleanExample) error
	ReceiveOptionalIntegerExample(ctx context.Context, indexArg int, bodyArg types.OptionalIntegerExample) error
	ReceiveLongFieldNameOptionalExample(ctx context.Context, indexArg int, bodyArg types.LongFieldNameOptionalExample) error
	ReceiveRawOptionalExample(ctx context.Context, indexArg int, bodyArg types.RawOptionalExample) error
	ReceiveStringAliasExample(ctx context.Context, indexArg int, bodyArg types.StringAliasExample) error
	ReceiveDoubleAliasExample(ctx context.Context, indexArg int, bodyArg types.DoubleAliasExample) error
	ReceiveIntegerAliasExample(ctx context.Context, indexArg int, bodyArg types.IntegerAliasExample) error
	ReceiveBooleanAliasExample(ctx context.Context, indexArg int, bodyArg types.BooleanAliasExample) error
	ReceiveSafeLongAliasExample(ctx context.Context, indexArg int, bodyArg types.SafeLongAliasExample) error
	ReceiveRidAliasExample(ctx context.Context, indexArg int, bodyArg types.RidAliasExample) error
	ReceiveBearerTokenAliasExample(ctx context.Context, indexArg int, bodyArg types.BearerTokenAliasExample) error
	ReceiveUuidAliasExample(ctx context.Context, indexArg int, bodyArg types.UuidAliasExample) error
	ReceiveReferenceAliasExample(ctx context.Context, indexArg int, bodyArg types.ReferenceAliasExample) error
	ReceiveDateTimeAliasExample(ctx context.Context, indexArg int, bodyArg types.DateTimeAliasExample) error
	ReceiveBinaryAliasExample(ctx context.Context, indexArg int, bodyArg io.ReadCloser) error
	ReceiveKebabCaseObjectExample(ctx context.Context, indexArg int, bodyArg types.KebabCaseObjectExample) error
	ReceiveSnakeCaseObjectExample(ctx context.Context, indexArg int, bodyArg types.SnakeCaseObjectExample) error
	ReceiveOptionalBearerTokenAliasExample(ctx context.Context, indexArg int, bodyArg types.OptionalBearerTokenAliasExample) error
	ReceiveOptionalBooleanAliasExample(ctx context.Context, indexArg int, bodyArg types.OptionalBooleanAliasExample) error
	ReceiveOptionalDateTimeAliasExample(ctx context.Context, indexArg int, bodyArg types.OptionalDateTimeAliasExample) error
	ReceiveOptionalDoubleAliasExample(ctx context.Context, indexArg int, bodyArg types.OptionalDoubleAliasExample) error
	ReceiveOptionalIntegerAliasExample(ctx context.Context, indexArg int, bodyArg types.OptionalIntegerAliasExample) error
	ReceiveOptionalRidAliasExample(ctx context.Context, indexArg int, bodyArg types.OptionalRidAliasExample) error
	ReceiveOptionalSafeLongAliasExample(ctx context.Context, indexArg int, bodyArg types.OptionalSafeLongAliasExample) error
	ReceiveOptionalStringAliasExample(ctx context.Context, indexArg int, bodyArg types.OptionalStringAliasExample) error
	ReceiveOptionalUuidAliasExample(ctx context.Context, indexArg int, bodyArg types.OptionalUuidAliasExample) error
	ReceiveOptionalAnyAliasExample(ctx context.Context, indexArg int, bodyArg types.OptionalAnyAliasExample) error
	ReceiveListBearerTokenAliasExample(ctx context.Context, indexArg int, bodyArg types.ListBearerTokenAliasExample) error
	ReceiveListBinaryAliasExample(ctx context.Context, indexArg int, bodyArg types.ListBinaryAliasExample) error
	ReceiveListBooleanAliasExample(ctx context.Context, indexArg int, bodyArg types.ListBooleanAliasExample) error
	ReceiveListDateTimeAliasExample(ctx context.Context, indexArg int, bodyArg types.ListDateTimeAliasExample) error
	ReceiveListDoubleAliasExample(ctx context.Context, indexArg int, bodyArg types.ListDoubleAliasExample) error
	ReceiveListIntegerAliasExample(ctx context.Context, indexArg int, bodyArg types.ListIntegerAliasExample) error
	ReceiveListRidAliasExample(ctx context.Context, indexArg int, bodyArg types.ListRidAliasExample) error
	ReceiveListSafeLongAliasExample(ctx context.Context, indexArg int, bodyArg types.ListSafeLongAliasExample) error
	ReceiveListStringAliasExample(ctx context.Context, indexArg int, bodyArg types.ListStringAliasExample) error
	ReceiveListUuidAliasExample(ctx context.Context, indexArg int, bodyArg types.ListUuidAliasExample) error
	ReceiveListAnyAliasExample(ctx context.Context, indexArg int, bodyArg types.ListAnyAliasExample) error
	ReceiveListOptionalAnyAliasExample(ctx context.Context, indexArg int, bodyArg types.ListOptionalAnyAliasExample) error
	ReceiveSetBearerTokenAliasExample(ctx context.Context, indexArg int, bodyArg types.SetBearerTokenAliasExample) error
	ReceiveSetBinaryAliasExample(ctx context.Context, indexArg int, bodyArg types.SetBinaryAliasExample) error
	ReceiveSetBooleanAliasExample(ctx context.Context, indexArg int, bodyArg types.SetBooleanAliasExample) error
	ReceiveSetDateTimeAliasExample(ctx context.Context, indexArg int, bodyArg types.SetDateTimeAliasExample) error
	ReceiveSetDoubleAliasExample(ctx context.Context, indexArg int, bodyArg types.SetDoubleAliasExample) error
	ReceiveSetIntegerAliasExample(ctx context.Context, indexArg int, bodyArg types.SetIntegerAliasExample) error
	ReceiveSetRidAliasExample(ctx context.Context, indexArg int, bodyArg types.SetRidAliasExample) error
	ReceiveSetSafeLongAliasExample(ctx context.Context, indexArg int, bodyArg types.SetSafeLongAliasExample) error
	ReceiveSetStringAliasExample(ctx context.Context, indexArg int, bodyArg types.SetStringAliasExample) error
	ReceiveSetUuidAliasExample(ctx context.Context, indexArg int, bodyArg types.SetUuidAliasExample) error
	ReceiveSetAnyAliasExample(ctx context.Context, indexArg int, bodyArg types.SetAnyAliasExample) error
	ReceiveSetOptionalAnyAliasExample(ctx context.Context, indexArg int, bodyArg types.SetOptionalAnyAliasExample) error
	ReceiveMapBearerTokenAliasExample(ctx context.Context, indexArg int, bodyArg types.MapBearerTokenAliasExample) error
	ReceiveMapBinaryAliasExample(ctx context.Context, indexArg int, bodyArg types.MapBinaryAliasExample) error
	ReceiveMapBooleanAliasExample(ctx context.Context, indexArg int, bodyArg types.MapBooleanAliasExample) error
	ReceiveMapDateTimeAliasExample(ctx context.Context, indexArg int, bodyArg types.MapDateTimeAliasExample) error
	ReceiveMapDoubleAliasExample(ctx context.Context, indexArg int, bodyArg types.MapDoubleAliasExample) error
	ReceiveMapIntegerAliasExample(ctx context.Context, indexArg int, bodyArg types.MapIntegerAliasExample) error
	ReceiveMapRidAliasExample(ctx context.Context, indexArg int, bodyArg types.MapRidAliasExample) error
	ReceiveMapSafeLongAliasExample(ctx context.Context, indexArg int, bodyArg types.MapSafeLongAliasExample) error
	ReceiveMapStringAliasExample(ctx context.Context, indexArg int, bodyArg types.MapStringAliasExample) error
	ReceiveMapUuidAliasExample(ctx context.Context, indexArg int, bodyArg types.MapUuidAliasExample) error
	ReceiveMapEnumExampleAlias(ctx context.Context, indexArg int, bodyArg types.MapEnumExampleAlias) error
}

// RegisterRoutesAutoDeserializeConfirmService registers handlers for the AutoDeserializeConfirmService endpoints with a witchcraft wrouter.
// This should typically be called in a witchcraft server's InitFunc.
// impl provides an implementation of each endpoint, which can assume the request parameters have been parsed
// in accordance with the Conjure specification.
func RegisterRoutesAutoDeserializeConfirmService(router wrouter.Router, impl AutoDeserializeConfirmService) error {
	handler := autoDeserializeConfirmServiceHandler{impl: impl}
	resource := wresource.New("autodeserializeconfirmservice", router)
	if err := resource.Post(
		"Confirm",
		"/confirm/{endpoint}/{index}",
		httpserver.NewJSONHandler(handler.HandleConfirm, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add confirm route")
	}
	if err := resource.Post(
		"ReceiveBearerTokenExample",
		"/confirm/receiveBearerTokenExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveBearerTokenExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveBearerTokenExample route")
	}
	if err := resource.Post(
		"ReceiveBinaryExample",
		"/confirm/receiveBinaryExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveBinaryExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveBinaryExample route")
	}
	if err := resource.Post(
		"ReceiveBooleanExample",
		"/confirm/receiveBooleanExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveBooleanExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveBooleanExample route")
	}
	if err := resource.Post(
		"ReceiveDateTimeExample",
		"/confirm/receiveDateTimeExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveDateTimeExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveDateTimeExample route")
	}
	if err := resource.Post(
		"ReceiveDoubleExample",
		"/confirm/receiveDoubleExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveDoubleExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveDoubleExample route")
	}
	if err := resource.Post(
		"ReceiveIntegerExample",
		"/confirm/receiveIntegerExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveIntegerExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveIntegerExample route")
	}
	if err := resource.Post(
		"ReceiveRidExample",
		"/confirm/receiveRidExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveRidExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveRidExample route")
	}
	if err := resource.Post(
		"ReceiveSafeLongExample",
		"/confirm/receiveSafeLongExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSafeLongExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSafeLongExample route")
	}
	if err := resource.Post(
		"ReceiveStringExample",
		"/confirm/receiveStringExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveStringExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveStringExample route")
	}
	if err := resource.Post(
		"ReceiveUuidExample",
		"/confirm/receiveUuidExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveUuidExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveUuidExample route")
	}
	if err := resource.Post(
		"ReceiveAnyExample",
		"/confirm/receiveAnyExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveAnyExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveAnyExample route")
	}
	if err := resource.Post(
		"ReceiveEnumExample",
		"/confirm/receiveEnumExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveEnumExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveEnumExample route")
	}
	if err := resource.Post(
		"ReceiveListExample",
		"/confirm/receiveListExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListExample route")
	}
	if err := resource.Post(
		"ReceiveSetStringExample",
		"/confirm/receiveSetStringExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetStringExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetStringExample route")
	}
	if err := resource.Post(
		"ReceiveSetDoubleExample",
		"/confirm/receiveSetDoubleExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetDoubleExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetDoubleExample route")
	}
	if err := resource.Post(
		"ReceiveMapExample",
		"/confirm/receiveMapExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapExample route")
	}
	if err := resource.Post(
		"ReceiveOptionalExample",
		"/confirm/receiveOptionalExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalExample route")
	}
	if err := resource.Post(
		"ReceiveOptionalBooleanExample",
		"/confirm/receiveOptionalBooleanExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalBooleanExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalBooleanExample route")
	}
	if err := resource.Post(
		"ReceiveOptionalIntegerExample",
		"/confirm/receiveOptionalIntegerExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalIntegerExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalIntegerExample route")
	}
	if err := resource.Post(
		"ReceiveLongFieldNameOptionalExample",
		"/confirm/receiveLongFieldNameOptionalExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveLongFieldNameOptionalExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveLongFieldNameOptionalExample route")
	}
	if err := resource.Post(
		"ReceiveRawOptionalExample",
		"/confirm/receiveRawOptionalExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveRawOptionalExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveRawOptionalExample route")
	}
	if err := resource.Post(
		"ReceiveStringAliasExample",
		"/confirm/receiveStringAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveStringAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveStringAliasExample route")
	}
	if err := resource.Post(
		"ReceiveDoubleAliasExample",
		"/confirm/receiveDoubleAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveDoubleAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveDoubleAliasExample route")
	}
	if err := resource.Post(
		"ReceiveIntegerAliasExample",
		"/confirm/receiveIntegerAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveIntegerAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveIntegerAliasExample route")
	}
	if err := resource.Post(
		"ReceiveBooleanAliasExample",
		"/confirm/receiveBooleanAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveBooleanAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveBooleanAliasExample route")
	}
	if err := resource.Post(
		"ReceiveSafeLongAliasExample",
		"/confirm/receiveSafeLongAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSafeLongAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSafeLongAliasExample route")
	}
	if err := resource.Post(
		"ReceiveRidAliasExample",
		"/confirm/receiveRidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveRidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveRidAliasExample route")
	}
	if err := resource.Post(
		"ReceiveBearerTokenAliasExample",
		"/confirm/receiveBearerTokenAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveBearerTokenAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveBearerTokenAliasExample route")
	}
	if err := resource.Post(
		"ReceiveUuidAliasExample",
		"/confirm/receiveUuidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveUuidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveUuidAliasExample route")
	}
	if err := resource.Post(
		"ReceiveReferenceAliasExample",
		"/confirm/receiveReferenceAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveReferenceAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveReferenceAliasExample route")
	}
	if err := resource.Post(
		"ReceiveDateTimeAliasExample",
		"/confirm/receiveDateTimeAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveDateTimeAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveDateTimeAliasExample route")
	}
	if err := resource.Post(
		"ReceiveBinaryAliasExample",
		"/confirm/receiveBinaryAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveBinaryAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveBinaryAliasExample route")
	}
	if err := resource.Post(
		"ReceiveKebabCaseObjectExample",
		"/confirm/receiveKebabCaseObjectExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveKebabCaseObjectExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveKebabCaseObjectExample route")
	}
	if err := resource.Post(
		"ReceiveSnakeCaseObjectExample",
		"/confirm/receiveSnakeCaseObjectExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSnakeCaseObjectExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSnakeCaseObjectExample route")
	}
	if err := resource.Post(
		"ReceiveOptionalBearerTokenAliasExample",
		"/confirm/receiveOptionalBearerTokenAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalBearerTokenAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalBearerTokenAliasExample route")
	}
	if err := resource.Post(
		"ReceiveOptionalBooleanAliasExample",
		"/confirm/receiveOptionalBooleanAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalBooleanAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalBooleanAliasExample route")
	}
	if err := resource.Post(
		"ReceiveOptionalDateTimeAliasExample",
		"/confirm/receiveOptionalDateTimeAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalDateTimeAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalDateTimeAliasExample route")
	}
	if err := resource.Post(
		"ReceiveOptionalDoubleAliasExample",
		"/confirm/receiveOptionalDoubleAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalDoubleAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalDoubleAliasExample route")
	}
	if err := resource.Post(
		"ReceiveOptionalIntegerAliasExample",
		"/confirm/receiveOptionalIntegerAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalIntegerAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalIntegerAliasExample route")
	}
	if err := resource.Post(
		"ReceiveOptionalRidAliasExample",
		"/confirm/receiveOptionalRidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalRidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalRidAliasExample route")
	}
	if err := resource.Post(
		"ReceiveOptionalSafeLongAliasExample",
		"/confirm/receiveOptionalSafeLongAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalSafeLongAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalSafeLongAliasExample route")
	}
	if err := resource.Post(
		"ReceiveOptionalStringAliasExample",
		"/confirm/receiveOptionalStringAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalStringAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalStringAliasExample route")
	}
	if err := resource.Post(
		"ReceiveOptionalUuidAliasExample",
		"/confirm/receiveOptionalUuidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalUuidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalUuidAliasExample route")
	}
	if err := resource.Post(
		"ReceiveOptionalAnyAliasExample",
		"/confirm/receiveOptionalAnyAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalAnyAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalAnyAliasExample route")
	}
	if err := resource.Post(
		"ReceiveListBearerTokenAliasExample",
		"/confirm/receiveListBearerTokenAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListBearerTokenAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListBearerTokenAliasExample route")
	}
	if err := resource.Post(
		"ReceiveListBinaryAliasExample",
		"/confirm/receiveListBinaryAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListBinaryAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListBinaryAliasExample route")
	}
	if err := resource.Post(
		"ReceiveListBooleanAliasExample",
		"/confirm/receiveListBooleanAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListBooleanAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListBooleanAliasExample route")
	}
	if err := resource.Post(
		"ReceiveListDateTimeAliasExample",
		"/confirm/receiveListDateTimeAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListDateTimeAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListDateTimeAliasExample route")
	}
	if err := resource.Post(
		"ReceiveListDoubleAliasExample",
		"/confirm/receiveListDoubleAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListDoubleAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListDoubleAliasExample route")
	}
	if err := resource.Post(
		"ReceiveListIntegerAliasExample",
		"/confirm/receiveListIntegerAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListIntegerAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListIntegerAliasExample route")
	}
	if err := resource.Post(
		"ReceiveListRidAliasExample",
		"/confirm/receiveListRidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListRidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListRidAliasExample route")
	}
	if err := resource.Post(
		"ReceiveListSafeLongAliasExample",
		"/confirm/receiveListSafeLongAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListSafeLongAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListSafeLongAliasExample route")
	}
	if err := resource.Post(
		"ReceiveListStringAliasExample",
		"/confirm/receiveListStringAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListStringAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListStringAliasExample route")
	}
	if err := resource.Post(
		"ReceiveListUuidAliasExample",
		"/confirm/receiveListUuidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListUuidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListUuidAliasExample route")
	}
	if err := resource.Post(
		"ReceiveListAnyAliasExample",
		"/confirm/receiveListAnyAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListAnyAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListAnyAliasExample route")
	}
	if err := resource.Post(
		"ReceiveListOptionalAnyAliasExample",
		"/confirm/receiveListOptionalAnyAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListOptionalAnyAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListOptionalAnyAliasExample route")
	}
	if err := resource.Post(
		"ReceiveSetBearerTokenAliasExample",
		"/confirm/receiveSetBearerTokenAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetBearerTokenAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetBearerTokenAliasExample route")
	}
	if err := resource.Post(
		"ReceiveSetBinaryAliasExample",
		"/confirm/receiveSetBinaryAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetBinaryAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetBinaryAliasExample route")
	}
	if err := resource.Post(
		"ReceiveSetBooleanAliasExample",
		"/confirm/receiveSetBooleanAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetBooleanAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetBooleanAliasExample route")
	}
	if err := resource.Post(
		"ReceiveSetDateTimeAliasExample",
		"/confirm/receiveSetDateTimeAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetDateTimeAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetDateTimeAliasExample route")
	}
	if err := resource.Post(
		"ReceiveSetDoubleAliasExample",
		"/confirm/receiveSetDoubleAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetDoubleAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetDoubleAliasExample route")
	}
	if err := resource.Post(
		"ReceiveSetIntegerAliasExample",
		"/confirm/receiveSetIntegerAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetIntegerAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetIntegerAliasExample route")
	}
	if err := resource.Post(
		"ReceiveSetRidAliasExample",
		"/confirm/receiveSetRidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetRidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetRidAliasExample route")
	}
	if err := resource.Post(
		"ReceiveSetSafeLongAliasExample",
		"/confirm/receiveSetSafeLongAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetSafeLongAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetSafeLongAliasExample route")
	}
	if err := resource.Post(
		"ReceiveSetStringAliasExample",
		"/confirm/receiveSetStringAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetStringAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetStringAliasExample route")
	}
	if err := resource.Post(
		"ReceiveSetUuidAliasExample",
		"/confirm/receiveSetUuidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetUuidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetUuidAliasExample route")
	}
	if err := resource.Post(
		"ReceiveSetAnyAliasExample",
		"/confirm/receiveSetAnyAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetAnyAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetAnyAliasExample route")
	}
	if err := resource.Post(
		"ReceiveSetOptionalAnyAliasExample",
		"/confirm/receiveSetOptionalAnyAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetOptionalAnyAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetOptionalAnyAliasExample route")
	}
	if err := resource.Post(
		"ReceiveMapBearerTokenAliasExample",
		"/confirm/receiveMapBearerTokenAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapBearerTokenAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapBearerTokenAliasExample route")
	}
	if err := resource.Post(
		"ReceiveMapBinaryAliasExample",
		"/confirm/receiveMapBinaryAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapBinaryAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapBinaryAliasExample route")
	}
	if err := resource.Post(
		"ReceiveMapBooleanAliasExample",
		"/confirm/receiveMapBooleanAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapBooleanAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapBooleanAliasExample route")
	}
	if err := resource.Post(
		"ReceiveMapDateTimeAliasExample",
		"/confirm/receiveMapDateTimeAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapDateTimeAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapDateTimeAliasExample route")
	}
	if err := resource.Post(
		"ReceiveMapDoubleAliasExample",
		"/confirm/receiveMapDoubleAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapDoubleAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapDoubleAliasExample route")
	}
	if err := resource.Post(
		"ReceiveMapIntegerAliasExample",
		"/confirm/receiveMapIntegerAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapIntegerAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapIntegerAliasExample route")
	}
	if err := resource.Post(
		"ReceiveMapRidAliasExample",
		"/confirm/receiveMapRidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapRidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapRidAliasExample route")
	}
	if err := resource.Post(
		"ReceiveMapSafeLongAliasExample",
		"/confirm/receiveMapSafeLongAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapSafeLongAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapSafeLongAliasExample route")
	}
	if err := resource.Post(
		"ReceiveMapStringAliasExample",
		"/confirm/receiveMapStringAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapStringAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapStringAliasExample route")
	}
	if err := resource.Post(
		"ReceiveMapUuidAliasExample",
		"/confirm/receiveMapUuidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapUuidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapUuidAliasExample route")
	}
	if err := resource.Post(
		"ReceiveMapEnumExampleAlias",
		"/confirm/receiveMapEnumExampleAlias/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapEnumExampleAlias, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapEnumExampleAlias route")
	}
	return nil
}

type autoDeserializeConfirmServiceHandler struct {
	impl AutoDeserializeConfirmService
}

func (a *autoDeserializeConfirmServiceHandler) HandleConfirm(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	endpointStr, ok := pathParams["endpoint"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"endpoint\" not present")
	}
	var endpoint EndpointName
	if err := endpoint.UnmarshalString(endpointStr); err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"endpoint\"] as EndpointName(string)")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body interface{}
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.Confirm(req.Context(), endpoint, index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveBearerTokenExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.BearerTokenExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveBearerTokenExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveBinaryExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.BinaryExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveBinaryExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveBooleanExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.BooleanExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveBooleanExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveDateTimeExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.DateTimeExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveDateTimeExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveDoubleExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.DoubleExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveDoubleExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveIntegerExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.IntegerExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveIntegerExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveRidExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.RidExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveRidExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveSafeLongExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.SafeLongExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveSafeLongExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveStringExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.StringExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveStringExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveUuidExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.UuidExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveUuidExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveAnyExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.AnyExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveAnyExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveEnumExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.EnumExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveEnumExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveListExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.ListExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveListExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveSetStringExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.SetStringExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveSetStringExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveSetDoubleExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.SetDoubleExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveSetDoubleExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveMapExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.MapExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveMapExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveOptionalExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.OptionalExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveOptionalExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveOptionalBooleanExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.OptionalBooleanExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveOptionalBooleanExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveOptionalIntegerExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.OptionalIntegerExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveOptionalIntegerExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveLongFieldNameOptionalExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.LongFieldNameOptionalExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveLongFieldNameOptionalExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveRawOptionalExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.RawOptionalExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveRawOptionalExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveStringAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.StringAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveStringAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveDoubleAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.DoubleAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveDoubleAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveIntegerAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.IntegerAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveIntegerAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveBooleanAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.BooleanAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveBooleanAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveSafeLongAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.SafeLongAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveSafeLongAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveRidAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.RidAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveRidAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveBearerTokenAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.BearerTokenAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveBearerTokenAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveUuidAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.UuidAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveUuidAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveReferenceAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.ReferenceAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveReferenceAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveDateTimeAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.DateTimeAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveDateTimeAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveBinaryAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	body := req.Body
	return a.impl.ReceiveBinaryAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveKebabCaseObjectExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.KebabCaseObjectExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveKebabCaseObjectExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveSnakeCaseObjectExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.SnakeCaseObjectExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveSnakeCaseObjectExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveOptionalBearerTokenAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.OptionalBearerTokenAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveOptionalBearerTokenAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveOptionalBooleanAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.OptionalBooleanAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveOptionalBooleanAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveOptionalDateTimeAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.OptionalDateTimeAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveOptionalDateTimeAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveOptionalDoubleAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.OptionalDoubleAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveOptionalDoubleAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveOptionalIntegerAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.OptionalIntegerAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveOptionalIntegerAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveOptionalRidAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.OptionalRidAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveOptionalRidAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveOptionalSafeLongAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.OptionalSafeLongAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveOptionalSafeLongAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveOptionalStringAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.OptionalStringAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveOptionalStringAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveOptionalUuidAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.OptionalUuidAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveOptionalUuidAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveOptionalAnyAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.OptionalAnyAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveOptionalAnyAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveListBearerTokenAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.ListBearerTokenAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveListBearerTokenAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveListBinaryAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.ListBinaryAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveListBinaryAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveListBooleanAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.ListBooleanAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveListBooleanAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveListDateTimeAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.ListDateTimeAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveListDateTimeAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveListDoubleAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.ListDoubleAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveListDoubleAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveListIntegerAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.ListIntegerAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveListIntegerAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveListRidAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.ListRidAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveListRidAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveListSafeLongAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.ListSafeLongAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveListSafeLongAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveListStringAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.ListStringAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveListStringAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveListUuidAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.ListUuidAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveListUuidAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveListAnyAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.ListAnyAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveListAnyAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveListOptionalAnyAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.ListOptionalAnyAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveListOptionalAnyAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveSetBearerTokenAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.SetBearerTokenAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveSetBearerTokenAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveSetBinaryAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.SetBinaryAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveSetBinaryAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveSetBooleanAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.SetBooleanAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveSetBooleanAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveSetDateTimeAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.SetDateTimeAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveSetDateTimeAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveSetDoubleAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.SetDoubleAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveSetDoubleAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveSetIntegerAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.SetIntegerAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveSetIntegerAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveSetRidAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.SetRidAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveSetRidAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveSetSafeLongAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.SetSafeLongAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveSetSafeLongAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveSetStringAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.SetStringAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveSetStringAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveSetUuidAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.SetUuidAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveSetUuidAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveSetAnyAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.SetAnyAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveSetAnyAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveSetOptionalAnyAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.SetOptionalAnyAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveSetOptionalAnyAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveMapBearerTokenAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.MapBearerTokenAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveMapBearerTokenAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveMapBinaryAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.MapBinaryAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveMapBinaryAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveMapBooleanAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.MapBooleanAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveMapBooleanAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveMapDateTimeAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.MapDateTimeAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveMapDateTimeAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveMapDoubleAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.MapDoubleAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveMapDoubleAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveMapIntegerAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.MapIntegerAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveMapIntegerAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveMapRidAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.MapRidAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveMapRidAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveMapSafeLongAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.MapSafeLongAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveMapSafeLongAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveMapStringAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.MapStringAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveMapStringAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveMapUuidAliasExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.MapUuidAliasExample
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveMapUuidAliasExample(req.Context(), index, body)
}

func (a *autoDeserializeConfirmServiceHandler) HandleReceiveMapEnumExampleAlias(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var body types.MapEnumExampleAlias
	if err := codecs.JSON.Decode(req.Body, &body); err != nil {
		return errors.WrapWithInvalidArgument(err)
	}
	return a.impl.ReceiveMapEnumExampleAlias(req.Context(), index, body)
}

type AutoDeserializeService interface {
	ReceiveBearerTokenExample(ctx context.Context, indexArg int) (types.BearerTokenExample, error)
	ReceiveBinaryExample(ctx context.Context, indexArg int) (types.BinaryExample, error)
	ReceiveBooleanExample(ctx context.Context, indexArg int) (types.BooleanExample, error)
	ReceiveDateTimeExample(ctx context.Context, indexArg int) (types.DateTimeExample, error)
	ReceiveDoubleExample(ctx context.Context, indexArg int) (types.DoubleExample, error)
	ReceiveIntegerExample(ctx context.Context, indexArg int) (types.IntegerExample, error)
	ReceiveRidExample(ctx context.Context, indexArg int) (types.RidExample, error)
	ReceiveSafeLongExample(ctx context.Context, indexArg int) (types.SafeLongExample, error)
	ReceiveStringExample(ctx context.Context, indexArg int) (types.StringExample, error)
	ReceiveUuidExample(ctx context.Context, indexArg int) (types.UuidExample, error)
	ReceiveAnyExample(ctx context.Context, indexArg int) (types.AnyExample, error)
	ReceiveEnumExample(ctx context.Context, indexArg int) (types.EnumExample, error)
	ReceiveListExample(ctx context.Context, indexArg int) (types.ListExample, error)
	ReceiveSetStringExample(ctx context.Context, indexArg int) (types.SetStringExample, error)
	ReceiveSetDoubleExample(ctx context.Context, indexArg int) (types.SetDoubleExample, error)
	ReceiveMapExample(ctx context.Context, indexArg int) (types.MapExample, error)
	ReceiveOptionalExample(ctx context.Context, indexArg int) (types.OptionalExample, error)
	ReceiveOptionalBooleanExample(ctx context.Context, indexArg int) (types.OptionalBooleanExample, error)
	ReceiveOptionalIntegerExample(ctx context.Context, indexArg int) (types.OptionalIntegerExample, error)
	ReceiveLongFieldNameOptionalExample(ctx context.Context, indexArg int) (types.LongFieldNameOptionalExample, error)
	ReceiveRawOptionalExample(ctx context.Context, indexArg int) (types.RawOptionalExample, error)
	ReceiveStringAliasExample(ctx context.Context, indexArg int) (types.StringAliasExample, error)
	ReceiveDoubleAliasExample(ctx context.Context, indexArg int) (types.DoubleAliasExample, error)
	ReceiveIntegerAliasExample(ctx context.Context, indexArg int) (types.IntegerAliasExample, error)
	ReceiveBooleanAliasExample(ctx context.Context, indexArg int) (types.BooleanAliasExample, error)
	ReceiveSafeLongAliasExample(ctx context.Context, indexArg int) (types.SafeLongAliasExample, error)
	ReceiveRidAliasExample(ctx context.Context, indexArg int) (types.RidAliasExample, error)
	ReceiveBearerTokenAliasExample(ctx context.Context, indexArg int) (types.BearerTokenAliasExample, error)
	ReceiveUuidAliasExample(ctx context.Context, indexArg int) (types.UuidAliasExample, error)
	ReceiveReferenceAliasExample(ctx context.Context, indexArg int) (types.ReferenceAliasExample, error)
	ReceiveDateTimeAliasExample(ctx context.Context, indexArg int) (types.DateTimeAliasExample, error)
	ReceiveBinaryAliasExample(ctx context.Context, indexArg int) (io.ReadCloser, error)
	ReceiveKebabCaseObjectExample(ctx context.Context, indexArg int) (types.KebabCaseObjectExample, error)
	ReceiveSnakeCaseObjectExample(ctx context.Context, indexArg int) (types.SnakeCaseObjectExample, error)
	ReceiveOptionalBearerTokenAliasExample(ctx context.Context, indexArg int) (types.OptionalBearerTokenAliasExample, error)
	ReceiveOptionalBooleanAliasExample(ctx context.Context, indexArg int) (types.OptionalBooleanAliasExample, error)
	ReceiveOptionalDateTimeAliasExample(ctx context.Context, indexArg int) (types.OptionalDateTimeAliasExample, error)
	ReceiveOptionalDoubleAliasExample(ctx context.Context, indexArg int) (types.OptionalDoubleAliasExample, error)
	ReceiveOptionalIntegerAliasExample(ctx context.Context, indexArg int) (types.OptionalIntegerAliasExample, error)
	ReceiveOptionalRidAliasExample(ctx context.Context, indexArg int) (types.OptionalRidAliasExample, error)
	ReceiveOptionalSafeLongAliasExample(ctx context.Context, indexArg int) (types.OptionalSafeLongAliasExample, error)
	ReceiveOptionalStringAliasExample(ctx context.Context, indexArg int) (types.OptionalStringAliasExample, error)
	ReceiveOptionalUuidAliasExample(ctx context.Context, indexArg int) (types.OptionalUuidAliasExample, error)
	ReceiveOptionalAnyAliasExample(ctx context.Context, indexArg int) (types.OptionalAnyAliasExample, error)
	ReceiveListBearerTokenAliasExample(ctx context.Context, indexArg int) (types.ListBearerTokenAliasExample, error)
	ReceiveListBinaryAliasExample(ctx context.Context, indexArg int) (types.ListBinaryAliasExample, error)
	ReceiveListBooleanAliasExample(ctx context.Context, indexArg int) (types.ListBooleanAliasExample, error)
	ReceiveListDateTimeAliasExample(ctx context.Context, indexArg int) (types.ListDateTimeAliasExample, error)
	ReceiveListDoubleAliasExample(ctx context.Context, indexArg int) (types.ListDoubleAliasExample, error)
	ReceiveListIntegerAliasExample(ctx context.Context, indexArg int) (types.ListIntegerAliasExample, error)
	ReceiveListRidAliasExample(ctx context.Context, indexArg int) (types.ListRidAliasExample, error)
	ReceiveListSafeLongAliasExample(ctx context.Context, indexArg int) (types.ListSafeLongAliasExample, error)
	ReceiveListStringAliasExample(ctx context.Context, indexArg int) (types.ListStringAliasExample, error)
	ReceiveListUuidAliasExample(ctx context.Context, indexArg int) (types.ListUuidAliasExample, error)
	ReceiveListAnyAliasExample(ctx context.Context, indexArg int) (types.ListAnyAliasExample, error)
	ReceiveListOptionalAnyAliasExample(ctx context.Context, indexArg int) (types.ListOptionalAnyAliasExample, error)
	ReceiveSetBearerTokenAliasExample(ctx context.Context, indexArg int) (types.SetBearerTokenAliasExample, error)
	ReceiveSetBinaryAliasExample(ctx context.Context, indexArg int) (types.SetBinaryAliasExample, error)
	ReceiveSetBooleanAliasExample(ctx context.Context, indexArg int) (types.SetBooleanAliasExample, error)
	ReceiveSetDateTimeAliasExample(ctx context.Context, indexArg int) (types.SetDateTimeAliasExample, error)
	ReceiveSetDoubleAliasExample(ctx context.Context, indexArg int) (types.SetDoubleAliasExample, error)
	ReceiveSetIntegerAliasExample(ctx context.Context, indexArg int) (types.SetIntegerAliasExample, error)
	ReceiveSetRidAliasExample(ctx context.Context, indexArg int) (types.SetRidAliasExample, error)
	ReceiveSetSafeLongAliasExample(ctx context.Context, indexArg int) (types.SetSafeLongAliasExample, error)
	ReceiveSetStringAliasExample(ctx context.Context, indexArg int) (types.SetStringAliasExample, error)
	ReceiveSetUuidAliasExample(ctx context.Context, indexArg int) (types.SetUuidAliasExample, error)
	ReceiveSetAnyAliasExample(ctx context.Context, indexArg int) (types.SetAnyAliasExample, error)
	ReceiveSetOptionalAnyAliasExample(ctx context.Context, indexArg int) (types.SetOptionalAnyAliasExample, error)
	ReceiveMapBearerTokenAliasExample(ctx context.Context, indexArg int) (types.MapBearerTokenAliasExample, error)
	ReceiveMapBinaryAliasExample(ctx context.Context, indexArg int) (types.MapBinaryAliasExample, error)
	ReceiveMapBooleanAliasExample(ctx context.Context, indexArg int) (types.MapBooleanAliasExample, error)
	ReceiveMapDateTimeAliasExample(ctx context.Context, indexArg int) (types.MapDateTimeAliasExample, error)
	ReceiveMapDoubleAliasExample(ctx context.Context, indexArg int) (types.MapDoubleAliasExample, error)
	ReceiveMapIntegerAliasExample(ctx context.Context, indexArg int) (types.MapIntegerAliasExample, error)
	ReceiveMapRidAliasExample(ctx context.Context, indexArg int) (types.MapRidAliasExample, error)
	ReceiveMapSafeLongAliasExample(ctx context.Context, indexArg int) (types.MapSafeLongAliasExample, error)
	ReceiveMapStringAliasExample(ctx context.Context, indexArg int) (types.MapStringAliasExample, error)
	ReceiveMapUuidAliasExample(ctx context.Context, indexArg int) (types.MapUuidAliasExample, error)
	ReceiveMapEnumExampleAlias(ctx context.Context, indexArg int) (types.MapEnumExampleAlias, error)
}

// RegisterRoutesAutoDeserializeService registers handlers for the AutoDeserializeService endpoints with a witchcraft wrouter.
// This should typically be called in a witchcraft server's InitFunc.
// impl provides an implementation of each endpoint, which can assume the request parameters have been parsed
// in accordance with the Conjure specification.
func RegisterRoutesAutoDeserializeService(router wrouter.Router, impl AutoDeserializeService) error {
	handler := autoDeserializeServiceHandler{impl: impl}
	resource := wresource.New("autodeserializeservice", router)
	if err := resource.Get(
		"ReceiveBearerTokenExample",
		"/body/receiveBearerTokenExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveBearerTokenExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveBearerTokenExample route")
	}
	if err := resource.Get(
		"ReceiveBinaryExample",
		"/body/receiveBinaryExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveBinaryExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveBinaryExample route")
	}
	if err := resource.Get(
		"ReceiveBooleanExample",
		"/body/receiveBooleanExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveBooleanExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveBooleanExample route")
	}
	if err := resource.Get(
		"ReceiveDateTimeExample",
		"/body/receiveDateTimeExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveDateTimeExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveDateTimeExample route")
	}
	if err := resource.Get(
		"ReceiveDoubleExample",
		"/body/receiveDoubleExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveDoubleExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveDoubleExample route")
	}
	if err := resource.Get(
		"ReceiveIntegerExample",
		"/body/receiveIntegerExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveIntegerExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveIntegerExample route")
	}
	if err := resource.Get(
		"ReceiveRidExample",
		"/body/receiveRidExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveRidExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveRidExample route")
	}
	if err := resource.Get(
		"ReceiveSafeLongExample",
		"/body/receiveSafeLongExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSafeLongExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSafeLongExample route")
	}
	if err := resource.Get(
		"ReceiveStringExample",
		"/body/receiveStringExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveStringExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveStringExample route")
	}
	if err := resource.Get(
		"ReceiveUuidExample",
		"/body/receiveUuidExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveUuidExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveUuidExample route")
	}
	if err := resource.Get(
		"ReceiveAnyExample",
		"/body/receiveAnyExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveAnyExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveAnyExample route")
	}
	if err := resource.Get(
		"ReceiveEnumExample",
		"/body/receiveEnumExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveEnumExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveEnumExample route")
	}
	if err := resource.Get(
		"ReceiveListExample",
		"/body/receiveListExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListExample route")
	}
	if err := resource.Get(
		"ReceiveSetStringExample",
		"/body/receiveSetStringExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetStringExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetStringExample route")
	}
	if err := resource.Get(
		"ReceiveSetDoubleExample",
		"/body/receiveSetDoubleExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetDoubleExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetDoubleExample route")
	}
	if err := resource.Get(
		"ReceiveMapExample",
		"/body/receiveMapExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapExample route")
	}
	if err := resource.Get(
		"ReceiveOptionalExample",
		"/body/receiveOptionalExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalExample route")
	}
	if err := resource.Get(
		"ReceiveOptionalBooleanExample",
		"/body/receiveOptionalBooleanExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalBooleanExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalBooleanExample route")
	}
	if err := resource.Get(
		"ReceiveOptionalIntegerExample",
		"/body/receiveOptionalIntegerExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalIntegerExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalIntegerExample route")
	}
	if err := resource.Get(
		"ReceiveLongFieldNameOptionalExample",
		"/body/receiveLongFieldNameOptionalExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveLongFieldNameOptionalExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveLongFieldNameOptionalExample route")
	}
	if err := resource.Get(
		"ReceiveRawOptionalExample",
		"/body/receiveRawOptionalExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveRawOptionalExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveRawOptionalExample route")
	}
	if err := resource.Get(
		"ReceiveStringAliasExample",
		"/body/receiveStringAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveStringAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveStringAliasExample route")
	}
	if err := resource.Get(
		"ReceiveDoubleAliasExample",
		"/body/receiveDoubleAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveDoubleAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveDoubleAliasExample route")
	}
	if err := resource.Get(
		"ReceiveIntegerAliasExample",
		"/body/receiveIntegerAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveIntegerAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveIntegerAliasExample route")
	}
	if err := resource.Get(
		"ReceiveBooleanAliasExample",
		"/body/receiveBooleanAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveBooleanAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveBooleanAliasExample route")
	}
	if err := resource.Get(
		"ReceiveSafeLongAliasExample",
		"/body/receiveSafeLongAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSafeLongAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSafeLongAliasExample route")
	}
	if err := resource.Get(
		"ReceiveRidAliasExample",
		"/body/receiveRidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveRidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveRidAliasExample route")
	}
	if err := resource.Get(
		"ReceiveBearerTokenAliasExample",
		"/body/receiveBearerTokenAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveBearerTokenAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveBearerTokenAliasExample route")
	}
	if err := resource.Get(
		"ReceiveUuidAliasExample",
		"/body/receiveUuidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveUuidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveUuidAliasExample route")
	}
	if err := resource.Get(
		"ReceiveReferenceAliasExample",
		"/body/receiveReferenceAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveReferenceAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveReferenceAliasExample route")
	}
	if err := resource.Get(
		"ReceiveDateTimeAliasExample",
		"/body/receiveDateTimeAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveDateTimeAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveDateTimeAliasExample route")
	}
	if err := resource.Get(
		"ReceiveBinaryAliasExample",
		"/body/receiveBinaryAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveBinaryAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveBinaryAliasExample route")
	}
	if err := resource.Get(
		"ReceiveKebabCaseObjectExample",
		"/body/receiveKebabCaseObjectExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveKebabCaseObjectExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveKebabCaseObjectExample route")
	}
	if err := resource.Get(
		"ReceiveSnakeCaseObjectExample",
		"/body/receiveSnakeCaseObjectExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSnakeCaseObjectExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSnakeCaseObjectExample route")
	}
	if err := resource.Get(
		"ReceiveOptionalBearerTokenAliasExample",
		"/body/receiveOptionalBearerTokenAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalBearerTokenAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalBearerTokenAliasExample route")
	}
	if err := resource.Get(
		"ReceiveOptionalBooleanAliasExample",
		"/body/receiveOptionalBooleanAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalBooleanAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalBooleanAliasExample route")
	}
	if err := resource.Get(
		"ReceiveOptionalDateTimeAliasExample",
		"/body/receiveOptionalDateTimeAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalDateTimeAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalDateTimeAliasExample route")
	}
	if err := resource.Get(
		"ReceiveOptionalDoubleAliasExample",
		"/body/receiveOptionalDoubleAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalDoubleAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalDoubleAliasExample route")
	}
	if err := resource.Get(
		"ReceiveOptionalIntegerAliasExample",
		"/body/receiveOptionalIntegerAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalIntegerAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalIntegerAliasExample route")
	}
	if err := resource.Get(
		"ReceiveOptionalRidAliasExample",
		"/body/receiveOptionalRidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalRidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalRidAliasExample route")
	}
	if err := resource.Get(
		"ReceiveOptionalSafeLongAliasExample",
		"/body/receiveOptionalSafeLongAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalSafeLongAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalSafeLongAliasExample route")
	}
	if err := resource.Get(
		"ReceiveOptionalStringAliasExample",
		"/body/receiveOptionalStringAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalStringAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalStringAliasExample route")
	}
	if err := resource.Get(
		"ReceiveOptionalUuidAliasExample",
		"/body/receiveOptionalUuidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalUuidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalUuidAliasExample route")
	}
	if err := resource.Get(
		"ReceiveOptionalAnyAliasExample",
		"/body/receiveOptionalAnyAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveOptionalAnyAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveOptionalAnyAliasExample route")
	}
	if err := resource.Get(
		"ReceiveListBearerTokenAliasExample",
		"/body/receiveListBearerTokenAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListBearerTokenAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListBearerTokenAliasExample route")
	}
	if err := resource.Get(
		"ReceiveListBinaryAliasExample",
		"/body/receiveListBinaryAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListBinaryAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListBinaryAliasExample route")
	}
	if err := resource.Get(
		"ReceiveListBooleanAliasExample",
		"/body/receiveListBooleanAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListBooleanAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListBooleanAliasExample route")
	}
	if err := resource.Get(
		"ReceiveListDateTimeAliasExample",
		"/body/receiveListDateTimeAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListDateTimeAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListDateTimeAliasExample route")
	}
	if err := resource.Get(
		"ReceiveListDoubleAliasExample",
		"/body/receiveListDoubleAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListDoubleAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListDoubleAliasExample route")
	}
	if err := resource.Get(
		"ReceiveListIntegerAliasExample",
		"/body/receiveListIntegerAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListIntegerAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListIntegerAliasExample route")
	}
	if err := resource.Get(
		"ReceiveListRidAliasExample",
		"/body/receiveListRidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListRidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListRidAliasExample route")
	}
	if err := resource.Get(
		"ReceiveListSafeLongAliasExample",
		"/body/receiveListSafeLongAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListSafeLongAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListSafeLongAliasExample route")
	}
	if err := resource.Get(
		"ReceiveListStringAliasExample",
		"/body/receiveListStringAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListStringAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListStringAliasExample route")
	}
	if err := resource.Get(
		"ReceiveListUuidAliasExample",
		"/body/receiveListUuidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListUuidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListUuidAliasExample route")
	}
	if err := resource.Get(
		"ReceiveListAnyAliasExample",
		"/body/receiveListAnyAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListAnyAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListAnyAliasExample route")
	}
	if err := resource.Get(
		"ReceiveListOptionalAnyAliasExample",
		"/body/receiveListOptionalAnyAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveListOptionalAnyAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveListOptionalAnyAliasExample route")
	}
	if err := resource.Get(
		"ReceiveSetBearerTokenAliasExample",
		"/body/receiveSetBearerTokenAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetBearerTokenAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetBearerTokenAliasExample route")
	}
	if err := resource.Get(
		"ReceiveSetBinaryAliasExample",
		"/body/receiveSetBinaryAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetBinaryAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetBinaryAliasExample route")
	}
	if err := resource.Get(
		"ReceiveSetBooleanAliasExample",
		"/body/receiveSetBooleanAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetBooleanAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetBooleanAliasExample route")
	}
	if err := resource.Get(
		"ReceiveSetDateTimeAliasExample",
		"/body/receiveSetDateTimeAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetDateTimeAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetDateTimeAliasExample route")
	}
	if err := resource.Get(
		"ReceiveSetDoubleAliasExample",
		"/body/receiveSetDoubleAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetDoubleAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetDoubleAliasExample route")
	}
	if err := resource.Get(
		"ReceiveSetIntegerAliasExample",
		"/body/receiveSetIntegerAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetIntegerAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetIntegerAliasExample route")
	}
	if err := resource.Get(
		"ReceiveSetRidAliasExample",
		"/body/receiveSetRidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetRidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetRidAliasExample route")
	}
	if err := resource.Get(
		"ReceiveSetSafeLongAliasExample",
		"/body/receiveSetSafeLongAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetSafeLongAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetSafeLongAliasExample route")
	}
	if err := resource.Get(
		"ReceiveSetStringAliasExample",
		"/body/receiveSetStringAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetStringAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetStringAliasExample route")
	}
	if err := resource.Get(
		"ReceiveSetUuidAliasExample",
		"/body/receiveSetUuidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetUuidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetUuidAliasExample route")
	}
	if err := resource.Get(
		"ReceiveSetAnyAliasExample",
		"/body/receiveSetAnyAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetAnyAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetAnyAliasExample route")
	}
	if err := resource.Get(
		"ReceiveSetOptionalAnyAliasExample",
		"/body/receiveSetOptionalAnyAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveSetOptionalAnyAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveSetOptionalAnyAliasExample route")
	}
	if err := resource.Get(
		"ReceiveMapBearerTokenAliasExample",
		"/body/receiveMapBearerTokenAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapBearerTokenAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapBearerTokenAliasExample route")
	}
	if err := resource.Get(
		"ReceiveMapBinaryAliasExample",
		"/body/receiveMapBinaryAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapBinaryAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapBinaryAliasExample route")
	}
	if err := resource.Get(
		"ReceiveMapBooleanAliasExample",
		"/body/receiveMapBooleanAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapBooleanAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapBooleanAliasExample route")
	}
	if err := resource.Get(
		"ReceiveMapDateTimeAliasExample",
		"/body/receiveMapDateTimeAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapDateTimeAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapDateTimeAliasExample route")
	}
	if err := resource.Get(
		"ReceiveMapDoubleAliasExample",
		"/body/receiveMapDoubleAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapDoubleAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapDoubleAliasExample route")
	}
	if err := resource.Get(
		"ReceiveMapIntegerAliasExample",
		"/body/receiveMapIntegerAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapIntegerAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapIntegerAliasExample route")
	}
	if err := resource.Get(
		"ReceiveMapRidAliasExample",
		"/body/receiveMapRidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapRidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapRidAliasExample route")
	}
	if err := resource.Get(
		"ReceiveMapSafeLongAliasExample",
		"/body/receiveMapSafeLongAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapSafeLongAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapSafeLongAliasExample route")
	}
	if err := resource.Get(
		"ReceiveMapStringAliasExample",
		"/body/receiveMapStringAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapStringAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapStringAliasExample route")
	}
	if err := resource.Get(
		"ReceiveMapUuidAliasExample",
		"/body/receiveMapUuidAliasExample/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapUuidAliasExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapUuidAliasExample route")
	}
	if err := resource.Get(
		"ReceiveMapEnumExampleAlias",
		"/body/receiveMapEnumExampleAlias/{index}",
		httpserver.NewJSONHandler(handler.HandleReceiveMapEnumExampleAlias, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add receiveMapEnumExampleAlias route")
	}
	return nil
}

type autoDeserializeServiceHandler struct {
	impl AutoDeserializeService
}

func (a *autoDeserializeServiceHandler) HandleReceiveBearerTokenExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveBearerTokenExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveBinaryExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveBinaryExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveBooleanExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveBooleanExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveDateTimeExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveDateTimeExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveDoubleExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveDoubleExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveIntegerExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveIntegerExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveRidExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveRidExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveSafeLongExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveSafeLongExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveStringExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveStringExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveUuidExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveUuidExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveAnyExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveAnyExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveEnumExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveEnumExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveListExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveListExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveSetStringExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveSetStringExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveSetDoubleExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveSetDoubleExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveMapExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveMapExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveOptionalExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveOptionalExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveOptionalBooleanExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveOptionalBooleanExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveOptionalIntegerExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveOptionalIntegerExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveLongFieldNameOptionalExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveLongFieldNameOptionalExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveRawOptionalExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveRawOptionalExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveStringAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveStringAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveDoubleAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveDoubleAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveIntegerAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveIntegerAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveBooleanAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveBooleanAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveSafeLongAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveSafeLongAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveRidAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveRidAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveBearerTokenAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveBearerTokenAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveUuidAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveUuidAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveReferenceAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveReferenceAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveDateTimeAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveDateTimeAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveBinaryAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveBinaryAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.Binary.ContentType())
	return codecs.Binary.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveKebabCaseObjectExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveKebabCaseObjectExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveSnakeCaseObjectExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveSnakeCaseObjectExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveOptionalBearerTokenAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveOptionalBearerTokenAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveOptionalBooleanAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveOptionalBooleanAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveOptionalDateTimeAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveOptionalDateTimeAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveOptionalDoubleAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveOptionalDoubleAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveOptionalIntegerAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveOptionalIntegerAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveOptionalRidAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveOptionalRidAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveOptionalSafeLongAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveOptionalSafeLongAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveOptionalStringAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveOptionalStringAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveOptionalUuidAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveOptionalUuidAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveOptionalAnyAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveOptionalAnyAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveListBearerTokenAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveListBearerTokenAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveListBinaryAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveListBinaryAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveListBooleanAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveListBooleanAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveListDateTimeAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveListDateTimeAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveListDoubleAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveListDoubleAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveListIntegerAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveListIntegerAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveListRidAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveListRidAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveListSafeLongAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveListSafeLongAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveListStringAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveListStringAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveListUuidAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveListUuidAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveListAnyAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveListAnyAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveListOptionalAnyAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveListOptionalAnyAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveSetBearerTokenAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveSetBearerTokenAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveSetBinaryAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveSetBinaryAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveSetBooleanAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveSetBooleanAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveSetDateTimeAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveSetDateTimeAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveSetDoubleAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveSetDoubleAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveSetIntegerAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveSetIntegerAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveSetRidAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveSetRidAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveSetSafeLongAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveSetSafeLongAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveSetStringAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveSetStringAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveSetUuidAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveSetUuidAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveSetAnyAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveSetAnyAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveSetOptionalAnyAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveSetOptionalAnyAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveMapBearerTokenAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveMapBearerTokenAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveMapBinaryAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveMapBinaryAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveMapBooleanAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveMapBooleanAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveMapDateTimeAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveMapDateTimeAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveMapDoubleAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveMapDoubleAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveMapIntegerAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveMapIntegerAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveMapRidAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveMapRidAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveMapSafeLongAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveMapSafeLongAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveMapStringAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveMapStringAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveMapUuidAliasExample(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveMapUuidAliasExample(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

func (a *autoDeserializeServiceHandler) HandleReceiveMapEnumExampleAlias(rw http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	respArg, err := a.impl.ReceiveMapEnumExampleAlias(req.Context(), index)
	if err != nil {
		return err
	}
	rw.Header().Add("Content-Type", codecs.JSON.ContentType())
	return codecs.JSON.Encode(rw, respArg)
}

type SingleHeaderService interface {
	HeaderBearertoken(ctx context.Context, indexArg int, headerArg bearertoken.Token) error
	HeaderBoolean(ctx context.Context, indexArg int, headerArg bool) error
	HeaderDatetime(ctx context.Context, indexArg int, headerArg datetime.DateTime) error
	HeaderDouble(ctx context.Context, indexArg int, headerArg float64) error
	HeaderInteger(ctx context.Context, indexArg int, headerArg int) error
	HeaderRid(ctx context.Context, indexArg int, headerArg rid.ResourceIdentifier) error
	HeaderSafelong(ctx context.Context, indexArg int, headerArg safelong.SafeLong) error
	HeaderString(ctx context.Context, indexArg int, headerArg string) error
	HeaderUuid(ctx context.Context, indexArg int, headerArg uuid.UUID) error
	HeaderOptionalOfString(ctx context.Context, indexArg int, headerArg *string) error
	HeaderAliasString(ctx context.Context, indexArg int, headerArg types.AliasString) error
	HeaderEnumExample(ctx context.Context, indexArg int, headerArg types.EnumExample) error
}

// RegisterRoutesSingleHeaderService registers handlers for the SingleHeaderService endpoints with a witchcraft wrouter.
// This should typically be called in a witchcraft server's InitFunc.
// impl provides an implementation of each endpoint, which can assume the request parameters have been parsed
// in accordance with the Conjure specification.
func RegisterRoutesSingleHeaderService(router wrouter.Router, impl SingleHeaderService) error {
	handler := singleHeaderServiceHandler{impl: impl}
	resource := wresource.New("singleheaderservice", router)
	if err := resource.Post(
		"HeaderBearertoken",
		"/single-header-param/headerBearertoken/{index}",
		httpserver.NewJSONHandler(handler.HandleHeaderBearertoken, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add headerBearertoken route")
	}
	if err := resource.Post(
		"HeaderBoolean",
		"/single-header-param/headerBoolean/{index}",
		httpserver.NewJSONHandler(handler.HandleHeaderBoolean, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add headerBoolean route")
	}
	if err := resource.Post(
		"HeaderDatetime",
		"/single-header-param/headerDatetime/{index}",
		httpserver.NewJSONHandler(handler.HandleHeaderDatetime, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add headerDatetime route")
	}
	if err := resource.Post(
		"HeaderDouble",
		"/single-header-param/headerDouble/{index}",
		httpserver.NewJSONHandler(handler.HandleHeaderDouble, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add headerDouble route")
	}
	if err := resource.Post(
		"HeaderInteger",
		"/single-header-param/headerInteger/{index}",
		httpserver.NewJSONHandler(handler.HandleHeaderInteger, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add headerInteger route")
	}
	if err := resource.Post(
		"HeaderRid",
		"/single-header-param/headerRid/{index}",
		httpserver.NewJSONHandler(handler.HandleHeaderRid, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add headerRid route")
	}
	if err := resource.Post(
		"HeaderSafelong",
		"/single-header-param/headerSafelong/{index}",
		httpserver.NewJSONHandler(handler.HandleHeaderSafelong, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add headerSafelong route")
	}
	if err := resource.Post(
		"HeaderString",
		"/single-header-param/headerString/{index}",
		httpserver.NewJSONHandler(handler.HandleHeaderString, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add headerString route")
	}
	if err := resource.Post(
		"HeaderUuid",
		"/single-header-param/headerUuid/{index}",
		httpserver.NewJSONHandler(handler.HandleHeaderUuid, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add headerUuid route")
	}
	if err := resource.Post(
		"HeaderOptionalOfString",
		"/single-header-param/headerOptionalOfString/{index}",
		httpserver.NewJSONHandler(handler.HandleHeaderOptionalOfString, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add headerOptionalOfString route")
	}
	if err := resource.Post(
		"HeaderAliasString",
		"/single-header-param/headerAliasString/{index}",
		httpserver.NewJSONHandler(handler.HandleHeaderAliasString, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add headerAliasString route")
	}
	if err := resource.Post(
		"HeaderEnumExample",
		"/single-header-param/headerEnumExample/{index}",
		httpserver.NewJSONHandler(handler.HandleHeaderEnumExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add headerEnumExample route")
	}
	return nil
}

type singleHeaderServiceHandler struct {
	impl SingleHeaderService
}

func (s *singleHeaderServiceHandler) HandleHeaderBearertoken(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	header := bearertoken.Token(req.Header.Get("Some-Header"))
	return s.impl.HeaderBearertoken(req.Context(), index, header)
}

func (s *singleHeaderServiceHandler) HandleHeaderBoolean(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	header, err := strconv.ParseBool(req.Header.Get("Some-Header"))
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal header[\"Some-Header\"] as boolean")
	}
	return s.impl.HeaderBoolean(req.Context(), index, header)
}

func (s *singleHeaderServiceHandler) HandleHeaderDatetime(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	header, err := datetime.ParseDateTime(req.Header.Get("Some-Header"))
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal header[\"Some-Header\"] as datetime")
	}
	return s.impl.HeaderDatetime(req.Context(), index, header)
}

func (s *singleHeaderServiceHandler) HandleHeaderDouble(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	header, err := strconv.ParseFloat(req.Header.Get("Some-Header"), 64)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal header[\"Some-Header\"] as double")
	}
	return s.impl.HeaderDouble(req.Context(), index, header)
}

func (s *singleHeaderServiceHandler) HandleHeaderInteger(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	header, err := strconv.Atoi(req.Header.Get("Some-Header"))
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal header[\"Some-Header\"] as integer")
	}
	return s.impl.HeaderInteger(req.Context(), index, header)
}

func (s *singleHeaderServiceHandler) HandleHeaderRid(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	header, err := rid.ParseRID(req.Header.Get("Some-Header"))
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal header[\"Some-Header\"] as rid")
	}
	return s.impl.HeaderRid(req.Context(), index, header)
}

func (s *singleHeaderServiceHandler) HandleHeaderSafelong(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	header, err := safelong.ParseSafeLong(req.Header.Get("Some-Header"))
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal header[\"Some-Header\"] as safelong")
	}
	return s.impl.HeaderSafelong(req.Context(), index, header)
}

func (s *singleHeaderServiceHandler) HandleHeaderString(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	header := req.Header.Get("Some-Header")
	return s.impl.HeaderString(req.Context(), index, header)
}

func (s *singleHeaderServiceHandler) HandleHeaderUuid(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	header, err := uuid.ParseUUID(req.Header.Get("Some-Header"))
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal header[\"Some-Header\"] as uuid")
	}
	return s.impl.HeaderUuid(req.Context(), index, header)
}

func (s *singleHeaderServiceHandler) HandleHeaderOptionalOfString(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var header *string
	if headerStr := req.Header.Get("Some-Header"); headerStr != "" {
		headerInternal := headerStr
		header = &headerInternal
	}
	return s.impl.HeaderOptionalOfString(req.Context(), index, header)
}

func (s *singleHeaderServiceHandler) HandleHeaderAliasString(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var header types.AliasString
	if err := header.UnmarshalString(req.Header.Get("Some-Header")); err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal header[\"Some-Header\"] as AliasString(string)")
	}
	return s.impl.HeaderAliasString(req.Context(), index, header)
}

func (s *singleHeaderServiceHandler) HandleHeaderEnumExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var header types.EnumExample
	if err := header.UnmarshalString(req.Header.Get("Some-Header")); err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal header[\"Some-Header\"] as EnumExample")
	}
	return s.impl.HeaderEnumExample(req.Context(), index, header)
}

type SinglePathParamService interface {
	PathParamBoolean(ctx context.Context, indexArg int, paramArg bool) error
	PathParamDatetime(ctx context.Context, indexArg int, paramArg datetime.DateTime) error
	PathParamDouble(ctx context.Context, indexArg int, paramArg float64) error
	PathParamInteger(ctx context.Context, indexArg int, paramArg int) error
	PathParamRid(ctx context.Context, indexArg int, paramArg rid.ResourceIdentifier) error
	PathParamSafelong(ctx context.Context, indexArg int, paramArg safelong.SafeLong) error
	PathParamString(ctx context.Context, indexArg int, paramArg string) error
	PathParamUuid(ctx context.Context, indexArg int, paramArg uuid.UUID) error
	PathParamAliasString(ctx context.Context, indexArg int, paramArg types.AliasString) error
	PathParamEnumExample(ctx context.Context, indexArg int, paramArg types.EnumExample) error
}

// RegisterRoutesSinglePathParamService registers handlers for the SinglePathParamService endpoints with a witchcraft wrouter.
// This should typically be called in a witchcraft server's InitFunc.
// impl provides an implementation of each endpoint, which can assume the request parameters have been parsed
// in accordance with the Conjure specification.
func RegisterRoutesSinglePathParamService(router wrouter.Router, impl SinglePathParamService) error {
	handler := singlePathParamServiceHandler{impl: impl}
	resource := wresource.New("singlepathparamservice", router)
	if err := resource.Post(
		"PathParamBoolean",
		"/single-path-param/pathParamBoolean/{index}/{param}",
		httpserver.NewJSONHandler(handler.HandlePathParamBoolean, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add pathParamBoolean route")
	}
	if err := resource.Post(
		"PathParamDatetime",
		"/single-path-param/pathParamDatetime/{index}/{param}",
		httpserver.NewJSONHandler(handler.HandlePathParamDatetime, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add pathParamDatetime route")
	}
	if err := resource.Post(
		"PathParamDouble",
		"/single-path-param/pathParamDouble/{index}/{param}",
		httpserver.NewJSONHandler(handler.HandlePathParamDouble, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add pathParamDouble route")
	}
	if err := resource.Post(
		"PathParamInteger",
		"/single-path-param/pathParamInteger/{index}/{param}",
		httpserver.NewJSONHandler(handler.HandlePathParamInteger, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add pathParamInteger route")
	}
	if err := resource.Post(
		"PathParamRid",
		"/single-path-param/pathParamRid/{index}/{param}",
		httpserver.NewJSONHandler(handler.HandlePathParamRid, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add pathParamRid route")
	}
	if err := resource.Post(
		"PathParamSafelong",
		"/single-path-param/pathParamSafelong/{index}/{param}",
		httpserver.NewJSONHandler(handler.HandlePathParamSafelong, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add pathParamSafelong route")
	}
	if err := resource.Post(
		"PathParamString",
		"/single-path-param/pathParamString/{index}/{param}",
		httpserver.NewJSONHandler(handler.HandlePathParamString, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add pathParamString route")
	}
	if err := resource.Post(
		"PathParamUuid",
		"/single-path-param/pathParamUuid/{index}/{param}",
		httpserver.NewJSONHandler(handler.HandlePathParamUuid, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add pathParamUuid route")
	}
	if err := resource.Post(
		"PathParamAliasString",
		"/single-path-param/pathParamAliasString/{index}/{param}",
		httpserver.NewJSONHandler(handler.HandlePathParamAliasString, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add pathParamAliasString route")
	}
	if err := resource.Post(
		"PathParamEnumExample",
		"/single-path-param/pathParamEnumExample/{index}/{param}",
		httpserver.NewJSONHandler(handler.HandlePathParamEnumExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add pathParamEnumExample route")
	}
	return nil
}

type singlePathParamServiceHandler struct {
	impl SinglePathParamService
}

func (s *singlePathParamServiceHandler) HandlePathParamBoolean(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	paramStr, ok := pathParams["param"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"param\" not present")
	}
	param, err := strconv.ParseBool(paramStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"param\"] as boolean")
	}
	return s.impl.PathParamBoolean(req.Context(), index, param)
}

func (s *singlePathParamServiceHandler) HandlePathParamDatetime(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	paramStr, ok := pathParams["param"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"param\" not present")
	}
	param, err := datetime.ParseDateTime(paramStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"param\"] as datetime")
	}
	return s.impl.PathParamDatetime(req.Context(), index, param)
}

func (s *singlePathParamServiceHandler) HandlePathParamDouble(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	paramStr, ok := pathParams["param"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"param\" not present")
	}
	param, err := strconv.ParseFloat(paramStr, 64)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"param\"] as double")
	}
	return s.impl.PathParamDouble(req.Context(), index, param)
}

func (s *singlePathParamServiceHandler) HandlePathParamInteger(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	paramStr, ok := pathParams["param"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"param\" not present")
	}
	param, err := strconv.Atoi(paramStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"param\"] as integer")
	}
	return s.impl.PathParamInteger(req.Context(), index, param)
}

func (s *singlePathParamServiceHandler) HandlePathParamRid(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	paramStr, ok := pathParams["param"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"param\" not present")
	}
	param, err := rid.ParseRID(paramStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"param\"] as rid")
	}
	return s.impl.PathParamRid(req.Context(), index, param)
}

func (s *singlePathParamServiceHandler) HandlePathParamSafelong(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	paramStr, ok := pathParams["param"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"param\" not present")
	}
	param, err := safelong.ParseSafeLong(paramStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"param\"] as safelong")
	}
	return s.impl.PathParamSafelong(req.Context(), index, param)
}

func (s *singlePathParamServiceHandler) HandlePathParamString(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	param, ok := pathParams["param"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"param\" not present")
	}
	return s.impl.PathParamString(req.Context(), index, param)
}

func (s *singlePathParamServiceHandler) HandlePathParamUuid(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	paramStr, ok := pathParams["param"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"param\" not present")
	}
	param, err := uuid.ParseUUID(paramStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"param\"] as uuid")
	}
	return s.impl.PathParamUuid(req.Context(), index, param)
}

func (s *singlePathParamServiceHandler) HandlePathParamAliasString(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	paramStr, ok := pathParams["param"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"param\" not present")
	}
	var param types.AliasString
	if err := param.UnmarshalString(paramStr); err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"param\"] as AliasString(string)")
	}
	return s.impl.PathParamAliasString(req.Context(), index, param)
}

func (s *singlePathParamServiceHandler) HandlePathParamEnumExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	paramStr, ok := pathParams["param"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"param\" not present")
	}
	var param types.EnumExample
	if err := param.UnmarshalString(paramStr); err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"param\"] as EnumExample")
	}
	return s.impl.PathParamEnumExample(req.Context(), index, param)
}

type SingleQueryParamService interface {
	QueryParamBoolean(ctx context.Context, indexArg int, someQueryArg bool) error
	QueryParamDouble(ctx context.Context, indexArg int, someQueryArg float64) error
	QueryParamInteger(ctx context.Context, indexArg int, someQueryArg int) error
	QueryParamRid(ctx context.Context, indexArg int, someQueryArg rid.ResourceIdentifier) error
	QueryParamSafelong(ctx context.Context, indexArg int, someQueryArg safelong.SafeLong) error
	QueryParamString(ctx context.Context, indexArg int, someQueryArg string) error
	QueryParamUuid(ctx context.Context, indexArg int, someQueryArg uuid.UUID) error
	QueryParamOptionalOfString(ctx context.Context, indexArg int, someQueryArg *string) error
	QueryParamAliasString(ctx context.Context, indexArg int, someQueryArg types.AliasString) error
	QueryParamEnumExample(ctx context.Context, indexArg int, someQueryArg types.EnumExample) error
}

// RegisterRoutesSingleQueryParamService registers handlers for the SingleQueryParamService endpoints with a witchcraft wrouter.
// This should typically be called in a witchcraft server's InitFunc.
// impl provides an implementation of each endpoint, which can assume the request parameters have been parsed
// in accordance with the Conjure specification.
func RegisterRoutesSingleQueryParamService(router wrouter.Router, impl SingleQueryParamService) error {
	handler := singleQueryParamServiceHandler{impl: impl}
	resource := wresource.New("singlequeryparamservice", router)
	if err := resource.Post(
		"QueryParamBoolean",
		"/single-query-param/queryParamBoolean/{index}",
		httpserver.NewJSONHandler(handler.HandleQueryParamBoolean, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add queryParamBoolean route")
	}
	if err := resource.Post(
		"QueryParamDouble",
		"/single-query-param/queryParamDouble/{index}",
		httpserver.NewJSONHandler(handler.HandleQueryParamDouble, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add queryParamDouble route")
	}
	if err := resource.Post(
		"QueryParamInteger",
		"/single-query-param/queryParamInteger/{index}",
		httpserver.NewJSONHandler(handler.HandleQueryParamInteger, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add queryParamInteger route")
	}
	if err := resource.Post(
		"QueryParamRid",
		"/single-query-param/queryParamRid/{index}",
		httpserver.NewJSONHandler(handler.HandleQueryParamRid, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add queryParamRid route")
	}
	if err := resource.Post(
		"QueryParamSafelong",
		"/single-query-param/queryParamSafelong/{index}",
		httpserver.NewJSONHandler(handler.HandleQueryParamSafelong, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add queryParamSafelong route")
	}
	if err := resource.Post(
		"QueryParamString",
		"/single-query-param/queryParamString/{index}",
		httpserver.NewJSONHandler(handler.HandleQueryParamString, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add queryParamString route")
	}
	if err := resource.Post(
		"QueryParamUuid",
		"/single-query-param/queryParamUuid/{index}",
		httpserver.NewJSONHandler(handler.HandleQueryParamUuid, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add queryParamUuid route")
	}
	if err := resource.Post(
		"QueryParamOptionalOfString",
		"/single-query-param/queryParamOptionalOfString/{index}",
		httpserver.NewJSONHandler(handler.HandleQueryParamOptionalOfString, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add queryParamOptionalOfString route")
	}
	if err := resource.Post(
		"QueryParamAliasString",
		"/single-query-param/queryParamAliasString/{index}",
		httpserver.NewJSONHandler(handler.HandleQueryParamAliasString, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add queryParamAliasString route")
	}
	if err := resource.Post(
		"QueryParamEnumExample",
		"/single-query-param/queryParamEnumExample/{index}",
		httpserver.NewJSONHandler(handler.HandleQueryParamEnumExample, httpserver.StatusCodeMapper, httpserver.ErrHandler),
	); err != nil {
		return werror.WrapWithContextParams(context.TODO(), err, "failed to add queryParamEnumExample route")
	}
	return nil
}

type singleQueryParamServiceHandler struct {
	impl SingleQueryParamService
}

func (s *singleQueryParamServiceHandler) HandleQueryParamBoolean(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	someQuery, err := strconv.ParseBool(req.URL.Query().Get("foo"))
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal query[\"foo\"] as boolean")
	}
	return s.impl.QueryParamBoolean(req.Context(), index, someQuery)
}

func (s *singleQueryParamServiceHandler) HandleQueryParamDouble(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	someQuery, err := strconv.ParseFloat(req.URL.Query().Get("foo"), 64)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal query[\"foo\"] as double")
	}
	return s.impl.QueryParamDouble(req.Context(), index, someQuery)
}

func (s *singleQueryParamServiceHandler) HandleQueryParamInteger(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	someQuery, err := strconv.Atoi(req.URL.Query().Get("foo"))
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal query[\"foo\"] as integer")
	}
	return s.impl.QueryParamInteger(req.Context(), index, someQuery)
}

func (s *singleQueryParamServiceHandler) HandleQueryParamRid(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	someQuery, err := rid.ParseRID(req.URL.Query().Get("foo"))
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal query[\"foo\"] as rid")
	}
	return s.impl.QueryParamRid(req.Context(), index, someQuery)
}

func (s *singleQueryParamServiceHandler) HandleQueryParamSafelong(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	someQuery, err := safelong.ParseSafeLong(req.URL.Query().Get("foo"))
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal query[\"foo\"] as safelong")
	}
	return s.impl.QueryParamSafelong(req.Context(), index, someQuery)
}

func (s *singleQueryParamServiceHandler) HandleQueryParamString(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	someQuery := req.URL.Query().Get("foo")
	return s.impl.QueryParamString(req.Context(), index, someQuery)
}

func (s *singleQueryParamServiceHandler) HandleQueryParamUuid(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	someQuery, err := uuid.ParseUUID(req.URL.Query().Get("foo"))
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal query[\"foo\"] as uuid")
	}
	return s.impl.QueryParamUuid(req.Context(), index, someQuery)
}

func (s *singleQueryParamServiceHandler) HandleQueryParamOptionalOfString(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var someQuery *string
	if someQueryStr := req.URL.Query().Get("foo"); someQueryStr != "" {
		someQueryInternal := someQueryStr
		someQuery = &someQueryInternal
	}
	return s.impl.QueryParamOptionalOfString(req.Context(), index, someQuery)
}

func (s *singleQueryParamServiceHandler) HandleQueryParamAliasString(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var someQuery types.AliasString
	if err := someQuery.UnmarshalString(req.URL.Query().Get("foo")); err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal query[\"foo\"] as AliasString(string)")
	}
	return s.impl.QueryParamAliasString(req.Context(), index, someQuery)
}

func (s *singleQueryParamServiceHandler) HandleQueryParamEnumExample(_ http.ResponseWriter, req *http.Request) error {
	pathParams := wrouter.PathParams(req)
	if pathParams == nil {
		return werror.WrapWithContextParams(req.Context(), errors.NewInternal(), "path params not found on request: ensure this endpoint is registered with wrouter")
	}
	indexStr, ok := pathParams["index"]
	if !ok {
		return werror.WrapWithContextParams(req.Context(), errors.NewInvalidArgument(), "path parameter \"index\" not present")
	}
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal path[\"index\"] as integer")
	}
	var someQuery types.EnumExample
	if err := someQuery.UnmarshalString(req.URL.Query().Get("foo")); err != nil {
		return werror.WrapWithContextParams(req.Context(), errors.WrapWithInvalidArgument(err), "unmarshal query[\"foo\"] as EnumExample")
	}
	return s.impl.QueryParamEnumExample(req.Context(), index, someQuery)
}
