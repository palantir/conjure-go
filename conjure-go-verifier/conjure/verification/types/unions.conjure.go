// This file was generated by Conjure and should not be manually edited.

package types

import (
	"context"
	"fmt"
	"strconv"

	safejson "github.com/palantir/pkg/safejson"
)

// A type which can either be a StringExample, a set of strings, or an integer.
type Union struct {
	typ                  string
	stringExample        *StringExample
	set                  *[]string
	thisFieldIsAnInteger *int
	alsoAnInteger        *int
	if_                  *int
	new                  *int
	interface_           *int
}

type unionDeserializer struct {
	Type                 string         `json:"type"`
	StringExample        *StringExample `json:"stringExample"`
	Set                  *[]string      `json:"set"`
	ThisFieldIsAnInteger *int           `json:"thisFieldIsAnInteger"`
	AlsoAnInteger        *int           `json:"alsoAnInteger"`
	If                   *int           `json:"if"`
	New                  *int           `json:"new"`
	Interface            *int           `json:"interface"`
}

func (u *unionDeserializer) toStruct() Union {
	return Union{typ: u.Type, stringExample: u.StringExample, set: u.Set, thisFieldIsAnInteger: u.ThisFieldIsAnInteger, alsoAnInteger: u.AlsoAnInteger, if_: u.If, new: u.New, interface_: u.Interface}
}

func (u Union) MarshalJSON() ([]byte, error) {
	return u.AppendJSON(nil)
}

func (u Union) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '{')
	switch u.typ {
	default:
		out = append(out, "\"type\":"...)
		out = safejson.AppendQuotedString(out, u.typ)
	case "stringExample":
		out = append(out, "\"type\":\"stringExample\""...)
		if u.stringExample != nil {
			out = append(out, ',')
			out = append(out, "\"stringExample\""...)
			out = append(out, ':')
			var err error
			out, err = u.stringExample.AppendJSON(out)
			if err != nil {
				return nil, err
			}
		}
	case "set":
		out = append(out, "\"type\":\"set\""...)
		if u.set != nil {
			out = append(out, ',')
			out = append(out, "\"set\""...)
			out = append(out, ':')
			out = append(out, '[')
			for i := range u.set {
				out = safejson.AppendQuotedString(out, u.set[i])
				if i < len(u.set)-1 {
					out = append(out, ',')
				}
			}
			out = append(out, ']')
		}
	case "thisFieldIsAnInteger":
		out = append(out, "\"type\":\"thisFieldIsAnInteger\""...)
		if u.thisFieldIsAnInteger != nil {
			out = append(out, ',')
			out = append(out, "\"thisFieldIsAnInteger\""...)
			out = append(out, ':')
			out = strconv.AppendInt(out, int64(u.thisFieldIsAnInteger), 10)
		}
	case "alsoAnInteger":
		out = append(out, "\"type\":\"alsoAnInteger\""...)
		if u.alsoAnInteger != nil {
			out = append(out, ',')
			out = append(out, "\"alsoAnInteger\""...)
			out = append(out, ':')
			out = strconv.AppendInt(out, int64(u.alsoAnInteger), 10)
		}
	case "if":
		out = append(out, "\"type\":\"if\""...)
		if u.if_ != nil {
			out = append(out, ',')
			out = append(out, "\"if\""...)
			out = append(out, ':')
			out = strconv.AppendInt(out, int64(u.if_), 10)
		}
	case "new":
		out = append(out, "\"type\":\"new\""...)
		if u.new != nil {
			out = append(out, ',')
			out = append(out, "\"new\""...)
			out = append(out, ':')
			out = strconv.AppendInt(out, int64(u.new), 10)
		}
	case "interface":
		out = append(out, "\"type\":\"interface\""...)
		if u.interface_ != nil {
			out = append(out, ',')
			out = append(out, "\"interface\""...)
			out = append(out, ':')
			out = strconv.AppendInt(out, int64(u.interface_), 10)
		}
	}
	out = append(out, '}')
	return out, nil
}

func (u *Union) UnmarshalJSON(data []byte) error {
	var deser unionDeserializer
	if err := safejson.Unmarshal(data, &deser); err != nil {
		return err
	}
	*u = deser.toStruct()
	return nil
}

func (u *Union) Accept(v UnionVisitor) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknown(u.typ)
	case "stringExample":
		return v.VisitStringExample(*u.stringExample)
	case "set":
		return v.VisitSet(*u.set)
	case "thisFieldIsAnInteger":
		return v.VisitThisFieldIsAnInteger(*u.thisFieldIsAnInteger)
	case "alsoAnInteger":
		return v.VisitAlsoAnInteger(*u.alsoAnInteger)
	case "if":
		return v.VisitIf(*u.if_)
	case "new":
		return v.VisitNew(*u.new)
	case "interface":
		return v.VisitInterface(*u.interface_)
	}
}

type UnionVisitor interface {
	VisitStringExample(StringExample) error
	VisitSet([]string) error
	VisitThisFieldIsAnInteger(int) error
	VisitAlsoAnInteger(int) error
	VisitIf(int) error
	VisitNew(int) error
	VisitInterface(int) error
	VisitUnknown(typeName string) error
}

func (u *Union) AcceptWithContext(ctx context.Context, v UnionVisitorWithContext) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknownWithContext(ctx, u.typ)
	case "stringExample":
		return v.VisitStringExampleWithContext(ctx, *u.stringExample)
	case "set":
		return v.VisitSetWithContext(ctx, *u.set)
	case "thisFieldIsAnInteger":
		return v.VisitThisFieldIsAnIntegerWithContext(ctx, *u.thisFieldIsAnInteger)
	case "alsoAnInteger":
		return v.VisitAlsoAnIntegerWithContext(ctx, *u.alsoAnInteger)
	case "if":
		return v.VisitIfWithContext(ctx, *u.if_)
	case "new":
		return v.VisitNewWithContext(ctx, *u.new)
	case "interface":
		return v.VisitInterfaceWithContext(ctx, *u.interface_)
	}
}

type UnionVisitorWithContext interface {
	VisitStringExampleWithContext(context.Context, StringExample) error
	VisitSetWithContext(context.Context, []string) error
	VisitThisFieldIsAnIntegerWithContext(context.Context, int) error
	VisitAlsoAnIntegerWithContext(context.Context, int) error
	VisitIfWithContext(context.Context, int) error
	VisitNewWithContext(context.Context, int) error
	VisitInterfaceWithContext(context.Context, int) error
	VisitUnknownWithContext(ctx context.Context, typeName string) error
}

func NewUnionFromStringExample(v StringExample) Union {
	return Union{typ: "stringExample", stringExample: &v}
}

func NewUnionFromSet(v []string) Union {
	return Union{typ: "set", set: &v}
}

func NewUnionFromThisFieldIsAnInteger(v int) Union {
	return Union{typ: "thisFieldIsAnInteger", thisFieldIsAnInteger: &v}
}

func NewUnionFromAlsoAnInteger(v int) Union {
	return Union{typ: "alsoAnInteger", alsoAnInteger: &v}
}

func NewUnionFromIf(v int) Union {
	return Union{typ: "if", if_: &v}
}

func NewUnionFromNew(v int) Union {
	return Union{typ: "new", new: &v}
}

func NewUnionFromInterface(v int) Union {
	return Union{typ: "interface", interface_: &v}
}
