// This file was generated by Conjure and should not be manually edited.

package types

import (
	"context"
	"encoding/json"
	"fmt"
	"strconv"

	"github.com/palantir/pkg/safejson"
	"github.com/palantir/pkg/safeyaml"
	werror "github.com/palantir/witchcraft-go-error"
	"github.com/tidwall/gjson"
)

// A type which can either be a StringExample, a set of strings, or an integer.
type Union struct {
	typ                  string
	stringExample        *StringExample
	set                  *[]string
	thisFieldIsAnInteger *int
	alsoAnInteger        *int
	if_                  *int
	new                  *int
	interface_           *int
}

func (u Union) MarshalJSON() ([]byte, error) {
	return u.MarshalJSONBuffer(nil)
}

func (u Union) MarshalJSONBuffer(buf []byte) ([]byte, error) {
	buf = append(buf, '{')
	var trailingElem bool
	buf = safejson.AppendQuotedString(buf, "type")
	buf = append(buf, ':')
	buf = safejson.AppendQuotedString(buf, u.typ)
	trailingElem = true
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "stringExample")
	buf = append(buf, ':')
	if u.stringExample != nil {
		if out, err := (*u.stringExample).MarshalJSONBuffer(buf); err != nil {
			return nil, err
		} else {
			buf = out
		}
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "set")
	buf = append(buf, ':')
	if u.set != nil {
		buf = append(buf, '[')
		{
			var trailingElem bool
			for i := range *u.set {
				if trailingElem {
					buf = append(buf, ',')
				} else {
					trailingElem = true
				}
				buf = safejson.AppendQuotedString(buf, (*u.set)[i])
			}
		}
		buf = append(buf, ']')
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "thisFieldIsAnInteger")
	buf = append(buf, ':')
	if u.thisFieldIsAnInteger != nil {
		buf = strconv.AppendInt(buf, int64(*u.thisFieldIsAnInteger), 10)
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "alsoAnInteger")
	buf = append(buf, ':')
	if u.alsoAnInteger != nil {
		buf = strconv.AppendInt(buf, int64(*u.alsoAnInteger), 10)
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "if")
	buf = append(buf, ':')
	if u.if_ != nil {
		buf = strconv.AppendInt(buf, int64(*u.if_), 10)
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "new")
	buf = append(buf, ':')
	if u.new != nil {
		buf = strconv.AppendInt(buf, int64(*u.new), 10)
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, ',')
	buf = safejson.AppendQuotedString(buf, "interface")
	buf = append(buf, ':')
	if u.interface_ != nil {
		buf = strconv.AppendInt(buf, int64(*u.interface_), 10)
	} else {
		buf = append(buf, "null"...)
	}
	buf = append(buf, '}')
	return buf, nil
}

func (u *Union) UnmarshalJSON(data []byte) error {
	ctx := context.TODO()
	if !gjson.ValidBytes(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.ParseBytes(data), false)
}

func (u *Union) UnmarshalJSONString(data string) error {
	ctx := context.TODO()
	if !gjson.Valid(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.Parse(data), false)
}

func (u *Union) UnmarshalJSONStrict(data []byte) error {
	ctx := context.TODO()
	if !gjson.ValidBytes(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.ParseBytes(data), true)
}

func (u *Union) UnmarshalJSONStringStrict(data string) error {
	ctx := context.TODO()
	if !gjson.Valid(data) {
		return werror.ErrorWithContextParams(ctx, "invalid json")
	}
	return u.unmarshalGJSON(ctx, gjson.Parse(data), true)
}

func (u *Union) unmarshalGJSON(ctx context.Context, value gjson.Result, strict bool) error {
	if !value.IsObject() {
		return werror.ErrorWithContextParams(ctx, "type Union expected json type Object")
	}
	var seentyp bool
	var unrecognizedFields []string
	var err error
	value.ForEach(func(key, value gjson.Result) bool {
		switch key.Str {
		case "type":
			seentyp = true
			if value.Type != gjson.String {
				err = werror.ErrorWithContextParams(ctx, "field Union[\"type\"] expected json type String")
				return false
			}
			u.typ = value.Str
		case "stringExample":
			if value.Type != gjson.Null {
				var optionalValue StringExample
				if strict {
					err = optionalValue.UnmarshalJSONStringStrict(value.Raw)
				} else {
					err = optionalValue.UnmarshalJSONString(value.Raw)
				}
				err = werror.WrapWithContextParams(ctx, err, "field Union[\"stringExample\"]")
				u.stringExample = &optionalValue
			}
		case "set":
			if value.Type != gjson.Null {
				if !value.IsArray() {
					err = werror.ErrorWithContextParams(ctx, "field Union[\"set\"] expected json type Array")
					return false
				}
				var optionalValue []string
				value.ForEach(func(_, value gjson.Result) bool {
					if value.Type != gjson.String {
						err = werror.ErrorWithContextParams(ctx, "field Union[\"set\"] list element expected json type String")
						return false
					}
					var listElement1 string
					listElement1 = value.Str
					optionalValue = append(optionalValue, listElement1)
					return err == nil
				})
				u.set = &optionalValue
			}
		case "thisFieldIsAnInteger":
			if value.Type != gjson.Null {
				if value.Type != gjson.Number {
					err = werror.ErrorWithContextParams(ctx, "field Union[\"thisFieldIsAnInteger\"] expected json type Number")
					return false
				}
				var optionalValue int
				optionalValue = int(value.Int())
				u.thisFieldIsAnInteger = &optionalValue
			}
		case "alsoAnInteger":
			if value.Type != gjson.Null {
				if value.Type != gjson.Number {
					err = werror.ErrorWithContextParams(ctx, "field Union[\"alsoAnInteger\"] expected json type Number")
					return false
				}
				var optionalValue int
				optionalValue = int(value.Int())
				u.alsoAnInteger = &optionalValue
			}
		case "if":
			if value.Type != gjson.Null {
				if value.Type != gjson.Number {
					err = werror.ErrorWithContextParams(ctx, "field Union[\"if\"] expected json type Number")
					return false
				}
				var optionalValue int
				optionalValue = int(value.Int())
				u.if_ = &optionalValue
			}
		case "new":
			if value.Type != gjson.Null {
				if value.Type != gjson.Number {
					err = werror.ErrorWithContextParams(ctx, "field Union[\"new\"] expected json type Number")
					return false
				}
				var optionalValue int
				optionalValue = int(value.Int())
				u.new = &optionalValue
			}
		case "interface":
			if value.Type != gjson.Null {
				if value.Type != gjson.Number {
					err = werror.ErrorWithContextParams(ctx, "field Union[\"interface\"] expected json type Number")
					return false
				}
				var optionalValue int
				optionalValue = int(value.Int())
				u.interface_ = &optionalValue
			}
		default:
			if strict {
				unrecognizedFields = append(unrecognizedFields, key.Str)
			}
		}
		return err == nil
	})
	if err != nil {
		return err
	}
	var missingFields []string
	if !seentyp {
		missingFields = append(missingFields, "type")
	}
	if len(missingFields) > 0 {
		return werror.ErrorWithContextParams(ctx, "type Union missing required json fields", werror.SafeParam("missingFields", missingFields))
	}
	if strict && len(unrecognizedFields) > 0 {
		return werror.ErrorWithContextParams(ctx, "type Union encountered unrecognized json fields", werror.UnsafeParam("unrecognizedFields", unrecognizedFields))
	}
	return nil
}

func (u Union) MarshalYAML() (interface{}, error) {
	jsonBytes, err := json.Marshal(u)
	if err != nil {
		return nil, err
	}
	return safeyaml.JSONtoYAMLMapSlice(jsonBytes)
}

func (u *Union) UnmarshalYAML(unmarshal func(interface{}) error) error {
	jsonBytes, err := safeyaml.UnmarshalerToJSONBytes(unmarshal)
	if err != nil {
		return err
	}
	return u.UnmarshalJSON(jsonBytes)
}

func (u *Union) Accept(v UnionVisitor) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknown(u.typ)
	case "stringExample":
		return v.VisitStringExample(*u.stringExample)
	case "set":
		return v.VisitSet(*u.set)
	case "thisFieldIsAnInteger":
		return v.VisitThisFieldIsAnInteger(*u.thisFieldIsAnInteger)
	case "alsoAnInteger":
		return v.VisitAlsoAnInteger(*u.alsoAnInteger)
	case "if":
		return v.VisitIf(*u.if_)
	case "new":
		return v.VisitNew(*u.new)
	case "interface":
		return v.VisitInterface(*u.interface_)
	}
}

type UnionVisitor interface {
	VisitStringExample(v StringExample) error
	VisitSet(v []string) error
	VisitThisFieldIsAnInteger(v int) error
	VisitAlsoAnInteger(v int) error
	VisitIf(v int) error
	VisitNew(v int) error
	VisitInterface(v int) error
	VisitUnknown(typeName string) error
}

func (u *Union) AcceptWithContext(ctx context.Context, v UnionVisitorWithContext) error {
	switch u.typ {
	default:
		if u.typ == "" {
			return fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknownWithContext(ctx, u.typ)
	case "stringExample":
		return v.VisitStringExampleWithContext(ctx, *u.stringExample)
	case "set":
		return v.VisitSetWithContext(ctx, *u.set)
	case "thisFieldIsAnInteger":
		return v.VisitThisFieldIsAnIntegerWithContext(ctx, *u.thisFieldIsAnInteger)
	case "alsoAnInteger":
		return v.VisitAlsoAnIntegerWithContext(ctx, *u.alsoAnInteger)
	case "if":
		return v.VisitIfWithContext(ctx, *u.if_)
	case "new":
		return v.VisitNewWithContext(ctx, *u.new)
	case "interface":
		return v.VisitInterfaceWithContext(ctx, *u.interface_)
	}
}

type UnionVisitorWithContext interface {
	VisitStringExampleWithContext(ctx context.Context, v StringExample) error
	VisitSetWithContext(ctx context.Context, v []string) error
	VisitThisFieldIsAnIntegerWithContext(ctx context.Context, v int) error
	VisitAlsoAnIntegerWithContext(ctx context.Context, v int) error
	VisitIfWithContext(ctx context.Context, v int) error
	VisitNewWithContext(ctx context.Context, v int) error
	VisitInterfaceWithContext(ctx context.Context, v int) error
	VisitUnknownWithContext(ctx context.Context, typeName string) error
}

func NewUnionFromStringExample(v StringExample) Union {
	return Union{typ: "stringExample", stringExample: &v}
}

func NewUnionFromSet(v []string) Union {
	return Union{typ: "set", set: &v}
}

func NewUnionFromThisFieldIsAnInteger(v int) Union {
	return Union{typ: "thisFieldIsAnInteger", thisFieldIsAnInteger: &v}
}

func NewUnionFromAlsoAnInteger(v int) Union {
	return Union{typ: "alsoAnInteger", alsoAnInteger: &v}
}

func NewUnionFromIf(v int) Union {
	return Union{typ: "if", if_: &v}
}

func NewUnionFromNew(v int) Union {
	return Union{typ: "new", new: &v}
}

func NewUnionFromInterface(v int) Union {
	return Union{typ: "interface", interface_: &v}
}
