// This file was generated by Conjure and should not be manually edited.

package types

import (
	"github.com/palantir/pkg/bearertoken"
	"github.com/palantir/pkg/datetime"
	"github.com/palantir/pkg/rid"
	"github.com/palantir/pkg/safejson"
	"github.com/palantir/pkg/safelong"
	"github.com/palantir/pkg/uuid"
)

type MapExample struct {
	Value map[string]string `json:"value" yaml:"value,omitempty"`
}

func (o MapExample) MarshalJSON() ([]byte, error) {
	if o.Value == nil {
		o.Value = make(map[string]string, 0)
	}
	type MapExampleAlias MapExample
	return safejson.Marshal(MapExampleAlias(o))
}

func (o *MapExample) UnmarshalJSON(data []byte) error {
	type MapExampleAlias MapExample
	var rawMapExample MapExampleAlias
	if err := safejson.Unmarshal(data, &rawMapExample); err != nil {
		return err
	}
	if rawMapExample.Value == nil {
		rawMapExample.Value = make(map[string]string, 0)
	}
	*o = MapExample(rawMapExample)
	return nil
}

func (o MapExample) MarshalYAML() (interface{}, error) {
	if o.Value == nil {
		o.Value = make(map[string]string, 0)
	}
	type MapExampleAlias MapExample
	return MapExampleAlias(o), nil
}

func (o *MapExample) UnmarshalYAML(unmarshal func(interface{}) error) error {
	type MapExampleAlias MapExample
	var rawMapExample MapExampleAlias
	if err := unmarshal(&rawMapExample); err != nil {
		return err
	}
	if rawMapExample.Value == nil {
		rawMapExample.Value = make(map[string]string, 0)
	}
	*o = MapExample(rawMapExample)
	return nil
}

type BinaryExample struct {
	Value []byte `json:"value" yaml:"value,omitempty"`
}

func (o BinaryExample) MarshalJSON() ([]byte, error) {
	if o.Value == nil {
		o.Value = make([]byte, 0)
	}
	type BinaryExampleAlias BinaryExample
	return safejson.Marshal(BinaryExampleAlias(o))
}

func (o *BinaryExample) UnmarshalJSON(data []byte) error {
	type BinaryExampleAlias BinaryExample
	var rawBinaryExample BinaryExampleAlias
	if err := safejson.Unmarshal(data, &rawBinaryExample); err != nil {
		return err
	}
	if rawBinaryExample.Value == nil {
		rawBinaryExample.Value = make([]byte, 0)
	}
	*o = BinaryExample(rawBinaryExample)
	return nil
}

func (o BinaryExample) MarshalYAML() (interface{}, error) {
	if o.Value == nil {
		o.Value = make([]byte, 0)
	}
	type BinaryExampleAlias BinaryExample
	return BinaryExampleAlias(o), nil
}

func (o *BinaryExample) UnmarshalYAML(unmarshal func(interface{}) error) error {
	type BinaryExampleAlias BinaryExample
	var rawBinaryExample BinaryExampleAlias
	if err := unmarshal(&rawBinaryExample); err != nil {
		return err
	}
	if rawBinaryExample.Value == nil {
		rawBinaryExample.Value = make([]byte, 0)
	}
	*o = BinaryExample(rawBinaryExample)
	return nil
}

type ListExample struct {
	Value []string `json:"value" yaml:"value,omitempty"`
}

func (o ListExample) MarshalJSON() ([]byte, error) {
	if o.Value == nil {
		o.Value = make([]string, 0)
	}
	type ListExampleAlias ListExample
	return safejson.Marshal(ListExampleAlias(o))
}

func (o *ListExample) UnmarshalJSON(data []byte) error {
	type ListExampleAlias ListExample
	var rawListExample ListExampleAlias
	if err := safejson.Unmarshal(data, &rawListExample); err != nil {
		return err
	}
	if rawListExample.Value == nil {
		rawListExample.Value = make([]string, 0)
	}
	*o = ListExample(rawListExample)
	return nil
}

func (o ListExample) MarshalYAML() (interface{}, error) {
	if o.Value == nil {
		o.Value = make([]string, 0)
	}
	type ListExampleAlias ListExample
	return ListExampleAlias(o), nil
}

func (o *ListExample) UnmarshalYAML(unmarshal func(interface{}) error) error {
	type ListExampleAlias ListExample
	var rawListExample ListExampleAlias
	if err := unmarshal(&rawListExample); err != nil {
		return err
	}
	if rawListExample.Value == nil {
		rawListExample.Value = make([]string, 0)
	}
	*o = ListExample(rawListExample)
	return nil
}

type SetDoubleExample struct {
	Value []float64 `json:"value" yaml:"value,omitempty"`
}

func (o SetDoubleExample) MarshalJSON() ([]byte, error) {
	if o.Value == nil {
		o.Value = make([]float64, 0)
	}
	type SetDoubleExampleAlias SetDoubleExample
	return safejson.Marshal(SetDoubleExampleAlias(o))
}

func (o *SetDoubleExample) UnmarshalJSON(data []byte) error {
	type SetDoubleExampleAlias SetDoubleExample
	var rawSetDoubleExample SetDoubleExampleAlias
	if err := safejson.Unmarshal(data, &rawSetDoubleExample); err != nil {
		return err
	}
	if rawSetDoubleExample.Value == nil {
		rawSetDoubleExample.Value = make([]float64, 0)
	}
	*o = SetDoubleExample(rawSetDoubleExample)
	return nil
}

func (o SetDoubleExample) MarshalYAML() (interface{}, error) {
	if o.Value == nil {
		o.Value = make([]float64, 0)
	}
	type SetDoubleExampleAlias SetDoubleExample
	return SetDoubleExampleAlias(o), nil
}

func (o *SetDoubleExample) UnmarshalYAML(unmarshal func(interface{}) error) error {
	type SetDoubleExampleAlias SetDoubleExample
	var rawSetDoubleExample SetDoubleExampleAlias
	if err := unmarshal(&rawSetDoubleExample); err != nil {
		return err
	}
	if rawSetDoubleExample.Value == nil {
		rawSetDoubleExample.Value = make([]float64, 0)
	}
	*o = SetDoubleExample(rawSetDoubleExample)
	return nil
}

type SetStringExample struct {
	Value []string `json:"value" yaml:"value,omitempty"`
}

func (o SetStringExample) MarshalJSON() ([]byte, error) {
	if o.Value == nil {
		o.Value = make([]string, 0)
	}
	type SetStringExampleAlias SetStringExample
	return safejson.Marshal(SetStringExampleAlias(o))
}

func (o *SetStringExample) UnmarshalJSON(data []byte) error {
	type SetStringExampleAlias SetStringExample
	var rawSetStringExample SetStringExampleAlias
	if err := safejson.Unmarshal(data, &rawSetStringExample); err != nil {
		return err
	}
	if rawSetStringExample.Value == nil {
		rawSetStringExample.Value = make([]string, 0)
	}
	*o = SetStringExample(rawSetStringExample)
	return nil
}

func (o SetStringExample) MarshalYAML() (interface{}, error) {
	if o.Value == nil {
		o.Value = make([]string, 0)
	}
	type SetStringExampleAlias SetStringExample
	return SetStringExampleAlias(o), nil
}

func (o *SetStringExample) UnmarshalYAML(unmarshal func(interface{}) error) error {
	type SetStringExampleAlias SetStringExample
	var rawSetStringExample SetStringExampleAlias
	if err := unmarshal(&rawSetStringExample); err != nil {
		return err
	}
	if rawSetStringExample.Value == nil {
		rawSetStringExample.Value = make([]string, 0)
	}
	*o = SetStringExample(rawSetStringExample)
	return nil
}

type OptionalExample struct {
	Value *string `json:"value" yaml:"value,omitempty"`
}

type SafeLongExample struct {
	Value safelong.SafeLong `json:"value" yaml:"value,omitempty"`
}

type BooleanExample struct {
	Value bool `json:"value" yaml:"value,omitempty"`
}

type OptionalBooleanExample struct {
	Value *bool `json:"value" yaml:"value,omitempty"`
}

type OptionalIntegerExample struct {
	Value *int `json:"value" yaml:"value,omitempty"`
}

type LongFieldNameOptionalExample struct {
	SomeLongName *string `json:"someLongName" yaml:"someLongName,omitempty"`
}

type IntegerExample struct {
	Value int `json:"value" yaml:"value,omitempty"`
}

type DoubleExample struct {
	Value float64 `json:"value" yaml:"value,omitempty"`
}

type StringExample struct {
	Value string `json:"value" yaml:"value,omitempty"`
}

type UuidExample struct {
	Value uuid.UUID `json:"value" yaml:"value,omitempty"`
}

type KebabCaseObjectExample struct {
	KebabCasedField int `json:"kebab-cased-field" yaml:"kebab-cased-field,omitempty"`
}

type EmptyObjectExample struct {
}

type AnyExample struct {
	Value interface{} `json:"value" yaml:"value,omitempty"`
}

type EnumFieldExample struct {
	Enum EnumExample `json:"enum" yaml:"enum,omitempty"`
}

type RidExample struct {
	Value rid.ResourceIdentifier `json:"value" yaml:"value,omitempty"`
}

type ObjectExample struct {
	String       string             `json:"string" yaml:"string,omitempty"`
	Integer      int                `json:"integer" yaml:"integer,omitempty"`
	DoubleValue  float64            `json:"doubleValue" yaml:"doubleValue,omitempty"`
	OptionalItem *string            `json:"optionalItem" yaml:"optionalItem,omitempty"`
	Items        []string           `json:"items" yaml:"items,omitempty"`
	Set          []string           `json:"set" yaml:"set,omitempty"`
	Map          map[string]string  `json:"map" yaml:"map,omitempty"`
	Alias        StringAliasExample `json:"alias" yaml:"alias,omitempty"`
}

func (o ObjectExample) MarshalJSON() ([]byte, error) {
	if o.Items == nil {
		o.Items = make([]string, 0)
	}
	if o.Set == nil {
		o.Set = make([]string, 0)
	}
	if o.Map == nil {
		o.Map = make(map[string]string, 0)
	}
	type ObjectExampleAlias ObjectExample
	return safejson.Marshal(ObjectExampleAlias(o))
}

func (o *ObjectExample) UnmarshalJSON(data []byte) error {
	type ObjectExampleAlias ObjectExample
	var rawObjectExample ObjectExampleAlias
	if err := safejson.Unmarshal(data, &rawObjectExample); err != nil {
		return err
	}
	if rawObjectExample.Items == nil {
		rawObjectExample.Items = make([]string, 0)
	}
	if rawObjectExample.Set == nil {
		rawObjectExample.Set = make([]string, 0)
	}
	if rawObjectExample.Map == nil {
		rawObjectExample.Map = make(map[string]string, 0)
	}
	*o = ObjectExample(rawObjectExample)
	return nil
}

func (o ObjectExample) MarshalYAML() (interface{}, error) {
	if o.Items == nil {
		o.Items = make([]string, 0)
	}
	if o.Set == nil {
		o.Set = make([]string, 0)
	}
	if o.Map == nil {
		o.Map = make(map[string]string, 0)
	}
	type ObjectExampleAlias ObjectExample
	return ObjectExampleAlias(o), nil
}

func (o *ObjectExample) UnmarshalYAML(unmarshal func(interface{}) error) error {
	type ObjectExampleAlias ObjectExample
	var rawObjectExample ObjectExampleAlias
	if err := unmarshal(&rawObjectExample); err != nil {
		return err
	}
	if rawObjectExample.Items == nil {
		rawObjectExample.Items = make([]string, 0)
	}
	if rawObjectExample.Set == nil {
		rawObjectExample.Set = make([]string, 0)
	}
	if rawObjectExample.Map == nil {
		rawObjectExample.Map = make(map[string]string, 0)
	}
	*o = ObjectExample(rawObjectExample)
	return nil
}

type DateTimeExample struct {
	Value datetime.DateTime `json:"value" yaml:"value,omitempty"`
}

type BearerTokenExample struct {
	Value bearertoken.Token `json:"value" yaml:"value,omitempty"`
}

type SnakeCaseObjectExample struct {
	SnakeCasedField int `json:"snake_cased_field" yaml:"snake_cased_field,omitempty"`
}
