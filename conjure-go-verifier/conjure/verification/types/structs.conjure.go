// This file was generated by Conjure and should not be manually edited.

package types

import (
	bearertoken "github.com/palantir/pkg/bearertoken"
	datetime "github.com/palantir/pkg/datetime"
	rid "github.com/palantir/pkg/rid"
	safejson "github.com/palantir/pkg/safejson"
	safelong "github.com/palantir/pkg/safelong"
	uuid "github.com/palantir/pkg/uuid"
)

type AnyExample struct {
	Value interface{} `json:"value"`
}

type BearerTokenExample struct {
	Value bearertoken.Token `json:"value"`
}

type BinaryExample struct {
	Value []byte `json:"value"`
}

type BooleanExample struct {
	Value bool `json:"value"`
}

type DateTimeExample struct {
	Value datetime.DateTime `json:"value"`
}

type DoubleExample struct {
	Value float64 `json:"value"`
}

type EmptyObjectExample struct{}
type EnumFieldExample struct {
	Enum EnumExample `json:"enum"`
}

type IntegerExample struct {
	Value int `json:"value"`
}

type KebabCaseObjectExample struct {
	KebabCasedField int `json:"kebab-cased-field"`
}

type ListExample struct {
	Value []string `json:"value"`
}

func (o ListExample) MarshalJSON() ([]byte, error) {
	if o.Value == nil {
		o.Value = make([]string, 0)
	}
	type ListExampleAlias ListExample
	return safejson.Marshal(ListExampleAlias(o))
}

func (o *ListExample) UnmarshalJSON(data []byte) error {
	type ListExampleAlias ListExample
	var rawListExample ListExampleAlias
	if err := safejson.Unmarshal(data, &rawListExample); err != nil {
		return err
	}
	if rawListExample.Value == nil {
		rawListExample.Value = make([]string, 0)
	}
	*o = ListExample(rawListExample)
	return nil
}

type LongFieldNameOptionalExample struct {
	SomeLongName *string `json:"someLongName"`
}

type MapExample struct {
	Value map[string]string `json:"value"`
}

func (o MapExample) MarshalJSON() ([]byte, error) {
	if o.Value == nil {
		o.Value = make(map[string]string, 0)
	}
	type MapExampleAlias MapExample
	return safejson.Marshal(MapExampleAlias(o))
}

func (o *MapExample) UnmarshalJSON(data []byte) error {
	type MapExampleAlias MapExample
	var rawMapExample MapExampleAlias
	if err := safejson.Unmarshal(data, &rawMapExample); err != nil {
		return err
	}
	if rawMapExample.Value == nil {
		rawMapExample.Value = make(map[string]string, 0)
	}
	*o = MapExample(rawMapExample)
	return nil
}

type ObjectExample struct {
	String       string             `json:"string"`
	Integer      int                `json:"integer"`
	DoubleValue  float64            `json:"doubleValue"`
	OptionalItem *string            `json:"optionalItem"`
	Items        []string           `json:"items"`
	Set          []string           `json:"set"`
	Map          map[string]string  `json:"map"`
	Alias        StringAliasExample `json:"alias"`
}

func (o ObjectExample) MarshalJSON() ([]byte, error) {
	if o.Items == nil {
		o.Items = make([]string, 0)
	}
	if o.Set == nil {
		o.Set = make([]string, 0)
	}
	if o.Map == nil {
		o.Map = make(map[string]string, 0)
	}
	type ObjectExampleAlias ObjectExample
	return safejson.Marshal(ObjectExampleAlias(o))
}

func (o *ObjectExample) UnmarshalJSON(data []byte) error {
	type ObjectExampleAlias ObjectExample
	var rawObjectExample ObjectExampleAlias
	if err := safejson.Unmarshal(data, &rawObjectExample); err != nil {
		return err
	}
	if rawObjectExample.Items == nil {
		rawObjectExample.Items = make([]string, 0)
	}
	if rawObjectExample.Set == nil {
		rawObjectExample.Set = make([]string, 0)
	}
	if rawObjectExample.Map == nil {
		rawObjectExample.Map = make(map[string]string, 0)
	}
	*o = ObjectExample(rawObjectExample)
	return nil
}

type OptionalBooleanExample struct {
	Value *bool `json:"value"`
}

type OptionalExample struct {
	Value *string `json:"value"`
}

type OptionalIntegerExample struct {
	Value *int `json:"value"`
}

type RidExample struct {
	Value rid.ResourceIdentifier `json:"value"`
}

type SafeLongExample struct {
	Value safelong.SafeLong `json:"value"`
}

type SetDoubleExample struct {
	Value []float64 `json:"value"`
}

func (o SetDoubleExample) MarshalJSON() ([]byte, error) {
	if o.Value == nil {
		o.Value = make([]float64, 0)
	}
	type SetDoubleExampleAlias SetDoubleExample
	return safejson.Marshal(SetDoubleExampleAlias(o))
}

func (o *SetDoubleExample) UnmarshalJSON(data []byte) error {
	type SetDoubleExampleAlias SetDoubleExample
	var rawSetDoubleExample SetDoubleExampleAlias
	if err := safejson.Unmarshal(data, &rawSetDoubleExample); err != nil {
		return err
	}
	if rawSetDoubleExample.Value == nil {
		rawSetDoubleExample.Value = make([]float64, 0)
	}
	*o = SetDoubleExample(rawSetDoubleExample)
	return nil
}

type SetStringExample struct {
	Value []string `json:"value"`
}

func (o SetStringExample) MarshalJSON() ([]byte, error) {
	if o.Value == nil {
		o.Value = make([]string, 0)
	}
	type SetStringExampleAlias SetStringExample
	return safejson.Marshal(SetStringExampleAlias(o))
}

func (o *SetStringExample) UnmarshalJSON(data []byte) error {
	type SetStringExampleAlias SetStringExample
	var rawSetStringExample SetStringExampleAlias
	if err := safejson.Unmarshal(data, &rawSetStringExample); err != nil {
		return err
	}
	if rawSetStringExample.Value == nil {
		rawSetStringExample.Value = make([]string, 0)
	}
	*o = SetStringExample(rawSetStringExample)
	return nil
}

type SnakeCaseObjectExample struct {
	SnakeCasedField int `json:"snake_cased_field"`
}

type StringExample struct {
	Value string `json:"value"`
}

type UuidExample struct {
	Value uuid.UUID `json:"value"`
}
