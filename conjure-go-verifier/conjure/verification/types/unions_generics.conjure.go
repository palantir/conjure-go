// This file was generated by Conjure and should not be manually edited.

//go:build go1.18

package types

import (
	"context"
	"fmt"
)

type UnionWithT[T any] Union

func (u *UnionWithT[T]) Accept(ctx context.Context, v UnionVisitorWithT[T]) (T, error) {
	switch u.typ {
	default:
		if u.typ == "" {
			var result T
			return result, fmt.Errorf("invalid value in union type")
		}
		return v.VisitUnknown(ctx, u.typ)
	case "stringExample":
		return v.VisitStringExample(ctx, *u.stringExample)
	case "set":
		return v.VisitSet(ctx, *u.set)
	case "thisFieldIsAnInteger":
		return v.VisitThisFieldIsAnInteger(ctx, *u.thisFieldIsAnInteger)
	case "alsoAnInteger":
		return v.VisitAlsoAnInteger(ctx, *u.alsoAnInteger)
	case "if":
		return v.VisitIf(ctx, *u.if_)
	case "new":
		return v.VisitNew(ctx, *u.new)
	case "interface":
		return v.VisitInterface(ctx, *u.interface_)
	}
}

type UnionVisitorWithT[T any] interface {
	VisitStringExample(ctx context.Context, v StringExample) (T, error)
	VisitSet(ctx context.Context, v []string) (T, error)
	VisitThisFieldIsAnInteger(ctx context.Context, v int) (T, error)
	VisitAlsoAnInteger(ctx context.Context, v int) (T, error)
	VisitIf(ctx context.Context, v int) (T, error)
	VisitNew(ctx context.Context, v int) (T, error)
	VisitInterface(ctx context.Context, v int) (T, error)
	VisitUnknown(ctx context.Context, typ string) (T, error)
}
