// This file was generated by Conjure and should not be manually edited.

package types

import (
	"regexp"
	"strings"

	"github.com/palantir/conjure-go-runtime/v2/conjure-go-contract/errors"
	werror "github.com/palantir/witchcraft-go-error"
	wparams "github.com/palantir/witchcraft-go-params"
)

var enumValuePattern = regexp.MustCompile("^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$")

type Enum string

const (
	EnumOne Enum = "ONE"
	EnumTwo Enum = "TWO"
)

// Enum_Values returns all known variants of Enum.
func Enum_Values() []Enum {
	return []Enum{EnumOne, EnumTwo}
}

// IsUnknown returns false for all known variants of Enum and true otherwise.
func (e Enum) IsUnknown() bool {
	switch e {
	case EnumOne, EnumTwo:
		return false
	}
	return true
}

func (e *Enum) UnmarshalText(data []byte) error {
	switch v := strings.ToUpper(string(data)); v {
	default:
		if !enumValuePattern.MatchString(v) {
			return werror.Convert(errors.NewInvalidArgument(wparams.NewSafeAndUnsafeParamStorer(map[string]interface{}{"enumType": "Enum", "message": "enum value must match pattern ^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"}, map[string]interface{}{"enumValue": string(data)})))
		}
		*e = Enum(v)
	case "ONE":
		*e = EnumOne
	case "TWO":
		*e = EnumTwo
	}
	return nil
}

type EnumExample string

const (
	EnumExampleOne        EnumExample = "ONE"
	EnumExampleTwo        EnumExample = "TWO"
	EnumExampleOneHundred EnumExample = "ONE_HUNDRED"
)

// EnumExample_Values returns all known variants of EnumExample.
func EnumExample_Values() []EnumExample {
	return []EnumExample{EnumExampleOne, EnumExampleTwo, EnumExampleOneHundred}
}

// IsUnknown returns false for all known variants of EnumExample and true otherwise.
func (e EnumExample) IsUnknown() bool {
	switch e {
	case EnumExampleOne, EnumExampleTwo, EnumExampleOneHundred:
		return false
	}
	return true
}

func (e *EnumExample) UnmarshalText(data []byte) error {
	switch v := strings.ToUpper(string(data)); v {
	default:
		if !enumValuePattern.MatchString(v) {
			return werror.Convert(errors.NewInvalidArgument(wparams.NewSafeAndUnsafeParamStorer(map[string]interface{}{"enumType": "EnumExample", "message": "enum value must match pattern ^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"}, map[string]interface{}{"enumValue": string(data)})))
		}
		*e = EnumExample(v)
	case "ONE":
		*e = EnumExampleOne
	case "TWO":
		*e = EnumExampleTwo
	case "ONE_HUNDRED":
		*e = EnumExampleOneHundred
	}
	return nil
}
