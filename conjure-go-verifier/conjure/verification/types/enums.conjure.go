// This file was generated by Conjure and should not be manually edited.

package types

import (
	"context"
	"strings"

	safejson "github.com/palantir/pkg/safejson"
	werror "github.com/palantir/witchcraft-go-error"
	gjson "github.com/tidwall/gjson"
)

type Enum struct {
	val Enum_Value
}

type Enum_Value string

const (
	Enum_ONE     Enum_Value = "ONE"
	Enum_TWO     Enum_Value = "TWO"
	Enum_UNKNOWN Enum_Value = "UNKNOWN"
)

// Enum_Values returns all known variants of Enum.
func Enum_Values() []Enum_Value {
	return []Enum_Value{Enum_ONE, Enum_TWO}
}

func New_Enum(value Enum_Value) Enum {
	return Enum{val: value}
}

// IsUnknown returns false for all known variants of Enum and true otherwise.
func (e Enum) IsUnknown() bool {
	switch e.val {
	case Enum_ONE, Enum_TWO:
		return false
	}
	return true
}

func (e Enum) Value() Enum_Value {
	if e.IsUnknown() {
		return Enum_UNKNOWN
	}
	return e.val
}

func (e Enum) String() string {
	return string(e.val)
}

func (e *Enum) UnmarshalString(data string) error {
	*e = New_Enum(Enum_Value(strings.ToUpper(data)))
	return nil
}

func (e Enum) MarshalJSON() ([]byte, error) {
	return e.AppendJSON(nil)
}

func (e Enum) AppendJSON(out []byte) ([]byte, error) {
	out = safejson.AppendQuotedString(out, string(e.val))
	return out, nil
}

func (e *Enum) UnmarshalJSON(data []byte) error {
	ctx := context.TODO()
	if !gjson.ValidBytes(data) {
		return werror.ErrorWithContextParams(ctx, "invalid JSON for Enum")
	}
	return e.unmarshalJSONResult(ctx, gjson.ParseBytes(data))
}

func (e *Enum) UnmarshalJSONString(data string) error {
	ctx := context.TODO()
	if !gjson.Valid(data) {
		return werror.ErrorWithContextParams(ctx, "invalid JSON for Enum")
	}
	return e.unmarshalJSONResult(ctx, gjson.Parse(data))
}

func (e *Enum) unmarshalJSONResult(ctx context.Context, value gjson.Result) error {
	var err error
	if value.Type != gjson.String {
		err = werror.ErrorWithContextParams(ctx, "type Enum expected JSON string")
		return err
	}
	return e.UnmarshalString(value.Str)
}

type EnumExample struct {
	val EnumExample_Value
}

type EnumExample_Value string

const (
	EnumExample_ONE         EnumExample_Value = "ONE"
	EnumExample_TWO         EnumExample_Value = "TWO"
	EnumExample_ONE_HUNDRED EnumExample_Value = "ONE_HUNDRED"
	EnumExample_UNKNOWN     EnumExample_Value = "UNKNOWN"
)

// EnumExample_Values returns all known variants of EnumExample.
func EnumExample_Values() []EnumExample_Value {
	return []EnumExample_Value{EnumExample_ONE, EnumExample_TWO, EnumExample_ONE_HUNDRED}
}

func New_EnumExample(value EnumExample_Value) EnumExample {
	return EnumExample{val: value}
}

// IsUnknown returns false for all known variants of EnumExample and true otherwise.
func (e EnumExample) IsUnknown() bool {
	switch e.val {
	case EnumExample_ONE, EnumExample_TWO, EnumExample_ONE_HUNDRED:
		return false
	}
	return true
}

func (e EnumExample) Value() EnumExample_Value {
	if e.IsUnknown() {
		return EnumExample_UNKNOWN
	}
	return e.val
}

func (e EnumExample) String() string {
	return string(e.val)
}

func (e *EnumExample) UnmarshalString(data string) error {
	*e = New_EnumExample(EnumExample_Value(strings.ToUpper(data)))
	return nil
}

func (e EnumExample) MarshalJSON() ([]byte, error) {
	return e.AppendJSON(nil)
}

func (e EnumExample) AppendJSON(out []byte) ([]byte, error) {
	out = safejson.AppendQuotedString(out, string(e.val))
	return out, nil
}

func (e *EnumExample) UnmarshalJSON(data []byte) error {
	ctx := context.TODO()
	if !gjson.ValidBytes(data) {
		return werror.ErrorWithContextParams(ctx, "invalid JSON for EnumExample")
	}
	return e.unmarshalJSONResult(ctx, gjson.ParseBytes(data))
}

func (e *EnumExample) UnmarshalJSONString(data string) error {
	ctx := context.TODO()
	if !gjson.Valid(data) {
		return werror.ErrorWithContextParams(ctx, "invalid JSON for EnumExample")
	}
	return e.unmarshalJSONResult(ctx, gjson.Parse(data))
}

func (e *EnumExample) unmarshalJSONResult(ctx context.Context, value gjson.Result) error {
	var err error
	if value.Type != gjson.String {
		err = werror.ErrorWithContextParams(ctx, "type EnumExample expected JSON string")
		return err
	}
	return e.UnmarshalString(value.Str)
}
