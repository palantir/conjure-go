// This file was generated by Conjure and should not be manually edited.

package types

import (
	"strings"
)

type Enum struct {
	val Enum_Value
}

type Enum_Value string

const (
	Enum_ONE     Enum_Value = "ONE"
	Enum_TWO     Enum_Value = "TWO"
	Enum_UNKNOWN Enum_Value = "UNKNOWN"
)

func (e Enum_Value) New() Enum {
	return Enum{val: e}
}

// Enum_Values returns all known variants of Enum.
func Enum_Values() []Enum_Value {
	return []Enum_Value{Enum_ONE, Enum_TWO}
}

func New_Enum(value Enum_Value) Enum {
	return Enum{val: value}
}

// IsUnknown returns false for all known variants of Enum and true otherwise.
func (e Enum) IsUnknown() bool {
	switch e.val {
	case Enum_ONE, Enum_TWO:
		return false
	}
	return true
}

func (e Enum) Value() Enum_Value {
	if e.IsUnknown() {
		return Enum_UNKNOWN
	}
	return e.val
}

func (e Enum) String() string {
	return string(e.val)
}

func (e Enum) MarshalText() ([]byte, error) {
	return []byte(e.val), nil
}

func (e *Enum) UnmarshalText(data []byte) error {
	switch v := strings.ToUpper(string(data)); v {
	default:
		*e = Enum_Value(v).New()
	case "ONE":
		*e = Enum_ONE.New()
	case "TWO":
		*e = Enum_TWO.New()
	}
	return nil
}

type EnumExample struct {
	val EnumExample_Value
}

type EnumExample_Value string

const (
	EnumExample_ONE         EnumExample_Value = "ONE"
	EnumExample_TWO         EnumExample_Value = "TWO"
	EnumExample_ONE_HUNDRED EnumExample_Value = "ONE_HUNDRED"
	EnumExample_UNKNOWN     EnumExample_Value = "UNKNOWN"
)

func (e EnumExample_Value) New() EnumExample {
	return EnumExample{val: e}
}

// EnumExample_Values returns all known variants of EnumExample.
func EnumExample_Values() []EnumExample_Value {
	return []EnumExample_Value{EnumExample_ONE, EnumExample_TWO, EnumExample_ONE_HUNDRED}
}

func New_EnumExample(value EnumExample_Value) EnumExample {
	return EnumExample{val: value}
}

// IsUnknown returns false for all known variants of EnumExample and true otherwise.
func (e EnumExample) IsUnknown() bool {
	switch e.val {
	case EnumExample_ONE, EnumExample_TWO, EnumExample_ONE_HUNDRED:
		return false
	}
	return true
}

func (e EnumExample) Value() EnumExample_Value {
	if e.IsUnknown() {
		return EnumExample_UNKNOWN
	}
	return e.val
}

func (e EnumExample) String() string {
	return string(e.val)
}

func (e EnumExample) MarshalText() ([]byte, error) {
	return []byte(e.val), nil
}

func (e *EnumExample) UnmarshalText(data []byte) error {
	switch v := strings.ToUpper(string(data)); v {
	default:
		*e = EnumExample_Value(v).New()
	case "ONE":
		*e = EnumExample_ONE.New()
	case "TWO":
		*e = EnumExample_TWO.New()
	case "ONE_HUNDRED":
		*e = EnumExample_ONE_HUNDRED.New()
	}
	return nil
}
