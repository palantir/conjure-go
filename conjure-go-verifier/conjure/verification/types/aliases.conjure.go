// This file was generated by Conjure and should not be manually edited.

package types

import (
	"encoding/base64"
	"math"
	"strconv"

	bearertoken "github.com/palantir/pkg/bearertoken"
	binary "github.com/palantir/pkg/binary"
	boolean "github.com/palantir/pkg/boolean"
	datetime "github.com/palantir/pkg/datetime"
	rid "github.com/palantir/pkg/rid"
	safejson "github.com/palantir/pkg/safejson"
	safelong "github.com/palantir/pkg/safelong"
	uuid "github.com/palantir/pkg/uuid"
)

type AliasString string

func (a AliasString) String() string {
	return string(a)
}

func (a AliasString) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a AliasString) AppendJSON(out []byte) ([]byte, error) {
	out = safejson.AppendQuotedString(out, string(a))
	return out, nil
}

type BearerTokenAliasExample bearertoken.Token

func (a BearerTokenAliasExample) String() string {
	return bearertoken.Token(a).String()
}

func (a BearerTokenAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a BearerTokenAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = safejson.AppendQuotedString(out, bearertoken.Token(a).String())
	return out, nil
}

func (a *BearerTokenAliasExample) UnmarshalText(data []byte) error {
	var rawBearerTokenAliasExample bearertoken.Token
	if err := rawBearerTokenAliasExample.UnmarshalText(data); err != nil {
		return err
	}
	*a = BearerTokenAliasExample(rawBearerTokenAliasExample)
	return nil
}

type BinaryAliasExample []byte

func (a BinaryAliasExample) String() string {
	return binary.New(a).String()
}

func (a BinaryAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a BinaryAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '"')
	if len([]byte(a)) > 0 {
		b64out := make([]byte, 0, base64.StdEncoding.EncodedLen(len([]byte(a))))
		base64.StdEncoding.Encode(b64out, []byte(a))
		out = append(out, b64out...)
	}
	out = append(out, '"')
	return out, nil
}

func (a *BinaryAliasExample) UnmarshalText(data []byte) error {
	rawBinaryAliasExample, err := binary.Binary(data).Bytes()
	if err != nil {
		return err
	}
	*a = BinaryAliasExample(rawBinaryAliasExample)
	return nil
}

type BooleanAliasExample bool

func (a BooleanAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a BooleanAliasExample) AppendJSON(out []byte) ([]byte, error) {
	if bool(a) {
		out = append(out, "true"...)
	} else {
		out = append(out, "false"...)
	}
	out = append(out, "true"...)
	out = append(out, "false"...)
	return out, nil
}

type DateTimeAliasExample datetime.DateTime

func (a DateTimeAliasExample) String() string {
	return datetime.DateTime(a).String()
}

func (a DateTimeAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a DateTimeAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = safejson.AppendQuotedString(out, datetime.DateTime(a).String())
	return out, nil
}

func (a *DateTimeAliasExample) UnmarshalText(data []byte) error {
	var rawDateTimeAliasExample datetime.DateTime
	if err := rawDateTimeAliasExample.UnmarshalText(data); err != nil {
		return err
	}
	*a = DateTimeAliasExample(rawDateTimeAliasExample)
	return nil
}

type DoubleAliasExample float64

func (a DoubleAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a DoubleAliasExample) AppendJSON(out []byte) ([]byte, error) {
	switch {
	default:
		out = strconv.AppendFloat(out, float64(a), -1, 10, 64)
	case math.IsNaN(float64(a)):
		out = append(out, "\"NaN\""...)
	case math.IsInf(float64(a), 1):
		out = append(out, "\"Infinity\""...)
	case math.IsInf(float64(a), -1):
		out = append(out, "\"-Infinity\""...)
	}
	return out, nil
}

type IntegerAliasExample int

func (a IntegerAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a IntegerAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = strconv.AppendInt(out, int64(int(a)), 10)
	return out, nil
}

type ListAnyAliasExample []interface{}

func (a ListAnyAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a ListAnyAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []interface{}(a) {
			if []interface{}(a)[i] == nil {
				out = append(out, "null"...)
			} else if jsonBytes, err := safejson.Marshal([]interface{}(a)[i]); err != nil {
				return nil, err
			} else {
				out = append(out, jsonBytes...)
			}
			if i < len([]interface{}(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

type ListBearerTokenAliasExample []bearertoken.Token

func (a ListBearerTokenAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a ListBearerTokenAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []bearertoken.Token(a) {
			out = safejson.AppendQuotedString(out, []bearertoken.Token(a)[i].String())
			if i < len([]bearertoken.Token(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

func (a *ListBearerTokenAliasExample) UnmarshalJSON(data []byte) error {
	var rawListBearerTokenAliasExample []bearertoken.Token
	if err := safejson.Unmarshal(data, &rawListBearerTokenAliasExample); err != nil {
		return err
	}
	*a = ListBearerTokenAliasExample(rawListBearerTokenAliasExample)
	return nil
}

type ListBinaryAliasExample [][]byte

func (a ListBinaryAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a ListBinaryAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range [][]byte(a) {
			out = append(out, '"')
			if len([][]byte(a)[i]) > 0 {
				b64out := make([]byte, 0, base64.StdEncoding.EncodedLen(len([][]byte(a)[i])))
				base64.StdEncoding.Encode(b64out, [][]byte(a)[i])
				out = append(out, b64out...)
			}
			out = append(out, '"')
			if i < len([][]byte(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

func (a *ListBinaryAliasExample) UnmarshalJSON(data []byte) error {
	var rawListBinaryAliasExample [][]byte
	if err := safejson.Unmarshal(data, &rawListBinaryAliasExample); err != nil {
		return err
	}
	*a = ListBinaryAliasExample(rawListBinaryAliasExample)
	return nil
}

type ListBooleanAliasExample []bool

func (a ListBooleanAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a ListBooleanAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []bool(a) {
			if []bool(a)[i] {
				out = append(out, "true"...)
			} else {
				out = append(out, "false"...)
			}
			out = append(out, "true"...)
			out = append(out, "false"...)
			if i < len([]bool(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

type ListDateTimeAliasExample []datetime.DateTime

func (a ListDateTimeAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a ListDateTimeAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []datetime.DateTime(a) {
			out = safejson.AppendQuotedString(out, []datetime.DateTime(a)[i].String())
			if i < len([]datetime.DateTime(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

func (a *ListDateTimeAliasExample) UnmarshalJSON(data []byte) error {
	var rawListDateTimeAliasExample []datetime.DateTime
	if err := safejson.Unmarshal(data, &rawListDateTimeAliasExample); err != nil {
		return err
	}
	*a = ListDateTimeAliasExample(rawListDateTimeAliasExample)
	return nil
}

type ListDoubleAliasExample []float64

func (a ListDoubleAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a ListDoubleAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []float64(a) {
			switch {
			default:
				out = strconv.AppendFloat(out, []float64(a)[i], -1, 10, 64)
			case math.IsNaN([]float64(a)[i]):
				out = append(out, "\"NaN\""...)
			case math.IsInf([]float64(a)[i], 1):
				out = append(out, "\"Infinity\""...)
			case math.IsInf([]float64(a)[i], -1):
				out = append(out, "\"-Infinity\""...)
			}
			if i < len([]float64(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

type ListIntegerAliasExample []int

func (a ListIntegerAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a ListIntegerAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []int(a) {
			out = strconv.AppendInt(out, int64([]int(a)[i]), 10)
			if i < len([]int(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

type ListOptionalAnyAliasExample []*interface{}

func (a ListOptionalAnyAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a ListOptionalAnyAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []*interface{}(a) {
			if []*interface{}(a)[i] != nil {
				optVal := *[]*interface{}(a)[i]
				if optVal == nil {
					out = append(out, "null"...)
				} else if jsonBytes, err := safejson.Marshal(optVal); err != nil {
					return nil, err
				} else {
					out = append(out, jsonBytes...)
				}
			} else {
				out = append(out, "null"...)
			}
			if i < len([]*interface{}(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

type ListRidAliasExample []rid.ResourceIdentifier

func (a ListRidAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a ListRidAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []rid.ResourceIdentifier(a) {
			out = safejson.AppendQuotedString(out, []rid.ResourceIdentifier(a)[i].String())
			if i < len([]rid.ResourceIdentifier(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

func (a *ListRidAliasExample) UnmarshalJSON(data []byte) error {
	var rawListRidAliasExample []rid.ResourceIdentifier
	if err := safejson.Unmarshal(data, &rawListRidAliasExample); err != nil {
		return err
	}
	*a = ListRidAliasExample(rawListRidAliasExample)
	return nil
}

type ListSafeLongAliasExample []safelong.SafeLong

func (a ListSafeLongAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a ListSafeLongAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []safelong.SafeLong(a) {
			out = strconv.AppendInt(out, int64([]safelong.SafeLong(a)[i]), 10)
			if i < len([]safelong.SafeLong(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

func (a *ListSafeLongAliasExample) UnmarshalJSON(data []byte) error {
	var rawListSafeLongAliasExample []safelong.SafeLong
	if err := safejson.Unmarshal(data, &rawListSafeLongAliasExample); err != nil {
		return err
	}
	*a = ListSafeLongAliasExample(rawListSafeLongAliasExample)
	return nil
}

type ListStringAliasExample []string

func (a ListStringAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a ListStringAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []string(a) {
			out = safejson.AppendQuotedString(out, []string(a)[i])
			if i < len([]string(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

type ListUuidAliasExample []uuid.UUID

func (a ListUuidAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a ListUuidAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []uuid.UUID(a) {
			out = safejson.AppendQuotedString(out, []uuid.UUID(a)[i].String())
			if i < len([]uuid.UUID(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

func (a *ListUuidAliasExample) UnmarshalJSON(data []byte) error {
	var rawListUuidAliasExample []uuid.UUID
	if err := safejson.Unmarshal(data, &rawListUuidAliasExample); err != nil {
		return err
	}
	*a = ListUuidAliasExample(rawListUuidAliasExample)
	return nil
}

type MapBearerTokenAliasExample map[bearertoken.Token]bool

func (a MapBearerTokenAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a MapBearerTokenAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '{')
	{
		var i int
		for k, v := range map[bearertoken.Token]bool(a) {
			out = safejson.AppendQuotedString(out, k.String())
			out = append(out, ':')
			if v {
				out = append(out, "true"...)
			} else {
				out = append(out, "false"...)
			}
			out = append(out, "true"...)
			out = append(out, "false"...)
			i++
			if i < len(map[bearertoken.Token]bool(a)) {
				out = append(out, ',')
			}
		}
	}
	out = append(out, '}')
	return out, nil
}

func (a *MapBearerTokenAliasExample) UnmarshalJSON(data []byte) error {
	var rawMapBearerTokenAliasExample map[bearertoken.Token]bool
	if err := safejson.Unmarshal(data, &rawMapBearerTokenAliasExample); err != nil {
		return err
	}
	*a = MapBearerTokenAliasExample(rawMapBearerTokenAliasExample)
	return nil
}

type MapBinaryAliasExample map[binary.Binary]bool

func (a MapBinaryAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a MapBinaryAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '{')
	{
		var i int
		for k, v := range map[binary.Binary]bool(a) {
			out = safejson.AppendQuotedString(out, string(k))
			out = append(out, ':')
			if v {
				out = append(out, "true"...)
			} else {
				out = append(out, "false"...)
			}
			out = append(out, "true"...)
			out = append(out, "false"...)
			i++
			if i < len(map[binary.Binary]bool(a)) {
				out = append(out, ',')
			}
		}
	}
	out = append(out, '}')
	return out, nil
}

func (a *MapBinaryAliasExample) UnmarshalJSON(data []byte) error {
	var rawMapBinaryAliasExample map[binary.Binary]bool
	if err := safejson.Unmarshal(data, &rawMapBinaryAliasExample); err != nil {
		return err
	}
	*a = MapBinaryAliasExample(rawMapBinaryAliasExample)
	return nil
}

type MapBooleanAliasExample map[boolean.Boolean]bool

func (a MapBooleanAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a MapBooleanAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '{')
	{
		var i int
		for k, v := range map[boolean.Boolean]bool(a) {
			if k {
				out = append(out, "\"true\""...)
			} else {
				out = append(out, "\"false\""...)
			}
			out = append(out, "\"true\""...)
			out = append(out, "\"false\""...)
			out = append(out, ':')
			if v {
				out = append(out, "true"...)
			} else {
				out = append(out, "false"...)
			}
			out = append(out, "true"...)
			out = append(out, "false"...)
			i++
			if i < len(map[boolean.Boolean]bool(a)) {
				out = append(out, ',')
			}
		}
	}
	out = append(out, '}')
	return out, nil
}

type MapDateTimeAliasExample map[datetime.DateTime]bool

func (a MapDateTimeAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a MapDateTimeAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '{')
	{
		var i int
		for k, v := range map[datetime.DateTime]bool(a) {
			out = safejson.AppendQuotedString(out, k.String())
			out = append(out, ':')
			if v {
				out = append(out, "true"...)
			} else {
				out = append(out, "false"...)
			}
			out = append(out, "true"...)
			out = append(out, "false"...)
			i++
			if i < len(map[datetime.DateTime]bool(a)) {
				out = append(out, ',')
			}
		}
	}
	out = append(out, '}')
	return out, nil
}

func (a *MapDateTimeAliasExample) UnmarshalJSON(data []byte) error {
	var rawMapDateTimeAliasExample map[datetime.DateTime]bool
	if err := safejson.Unmarshal(data, &rawMapDateTimeAliasExample); err != nil {
		return err
	}
	*a = MapDateTimeAliasExample(rawMapDateTimeAliasExample)
	return nil
}

type MapDoubleAliasExample map[float64]bool

func (a MapDoubleAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a MapDoubleAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '{')
	{
		var i int
		for k, v := range map[float64]bool(a) {
			switch {
			default:
				out = append(out, '"')
				out = strconv.AppendFloat(out, k, -1, 10, 64)
				out = append(out, '"')
			case math.IsNaN(k):
				out = append(out, "\"NaN\""...)
			case math.IsInf(k, 1):
				out = append(out, "\"Infinity\""...)
			case math.IsInf(k, -1):
				out = append(out, "\"-Infinity\""...)
			}
			out = append(out, ':')
			if v {
				out = append(out, "true"...)
			} else {
				out = append(out, "false"...)
			}
			out = append(out, "true"...)
			out = append(out, "false"...)
			i++
			if i < len(map[float64]bool(a)) {
				out = append(out, ',')
			}
		}
	}
	out = append(out, '}')
	return out, nil
}

type MapEnumExampleAlias map[EnumExample]string

func (a MapEnumExampleAlias) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a MapEnumExampleAlias) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '{')
	{
		var i int
		for k, v := range map[EnumExample]string(a) {
			out = safejson.AppendQuotedString(out, k.String())
			out = append(out, ':')
			out = safejson.AppendQuotedString(out, v)
			i++
			if i < len(map[EnumExample]string(a)) {
				out = append(out, ',')
			}
		}
	}
	out = append(out, '}')
	return out, nil
}

func (a *MapEnumExampleAlias) UnmarshalJSON(data []byte) error {
	var rawMapEnumExampleAlias map[EnumExample]string
	if err := safejson.Unmarshal(data, &rawMapEnumExampleAlias); err != nil {
		return err
	}
	*a = MapEnumExampleAlias(rawMapEnumExampleAlias)
	return nil
}

type MapIntegerAliasExample map[int]bool

func (a MapIntegerAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a MapIntegerAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '{')
	{
		var i int
		for k, v := range map[int]bool(a) {
			out = append(out, '"')
			out = strconv.AppendInt(out, int64(k), 10)
			out = append(out, '"')
			out = append(out, ':')
			if v {
				out = append(out, "true"...)
			} else {
				out = append(out, "false"...)
			}
			out = append(out, "true"...)
			out = append(out, "false"...)
			i++
			if i < len(map[int]bool(a)) {
				out = append(out, ',')
			}
		}
	}
	out = append(out, '}')
	return out, nil
}

type MapRidAliasExample map[rid.ResourceIdentifier]bool

func (a MapRidAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a MapRidAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '{')
	{
		var i int
		for k, v := range map[rid.ResourceIdentifier]bool(a) {
			out = safejson.AppendQuotedString(out, k.String())
			out = append(out, ':')
			if v {
				out = append(out, "true"...)
			} else {
				out = append(out, "false"...)
			}
			out = append(out, "true"...)
			out = append(out, "false"...)
			i++
			if i < len(map[rid.ResourceIdentifier]bool(a)) {
				out = append(out, ',')
			}
		}
	}
	out = append(out, '}')
	return out, nil
}

func (a *MapRidAliasExample) UnmarshalJSON(data []byte) error {
	var rawMapRidAliasExample map[rid.ResourceIdentifier]bool
	if err := safejson.Unmarshal(data, &rawMapRidAliasExample); err != nil {
		return err
	}
	*a = MapRidAliasExample(rawMapRidAliasExample)
	return nil
}

type MapSafeLongAliasExample map[safelong.SafeLong]bool

func (a MapSafeLongAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a MapSafeLongAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '{')
	{
		var i int
		for k, v := range map[safelong.SafeLong]bool(a) {
			out = append(out, '"')
			out = strconv.AppendInt(out, int64(k), 10)
			out = append(out, '"')
			out = append(out, ':')
			if v {
				out = append(out, "true"...)
			} else {
				out = append(out, "false"...)
			}
			out = append(out, "true"...)
			out = append(out, "false"...)
			i++
			if i < len(map[safelong.SafeLong]bool(a)) {
				out = append(out, ',')
			}
		}
	}
	out = append(out, '}')
	return out, nil
}

func (a *MapSafeLongAliasExample) UnmarshalJSON(data []byte) error {
	var rawMapSafeLongAliasExample map[safelong.SafeLong]bool
	if err := safejson.Unmarshal(data, &rawMapSafeLongAliasExample); err != nil {
		return err
	}
	*a = MapSafeLongAliasExample(rawMapSafeLongAliasExample)
	return nil
}

type MapStringAliasExample map[string]bool

func (a MapStringAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a MapStringAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '{')
	{
		var i int
		for k, v := range map[string]bool(a) {
			out = safejson.AppendQuotedString(out, k)
			out = append(out, ':')
			if v {
				out = append(out, "true"...)
			} else {
				out = append(out, "false"...)
			}
			out = append(out, "true"...)
			out = append(out, "false"...)
			i++
			if i < len(map[string]bool(a)) {
				out = append(out, ',')
			}
		}
	}
	out = append(out, '}')
	return out, nil
}

type MapUuidAliasExample map[uuid.UUID]bool

func (a MapUuidAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a MapUuidAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '{')
	{
		var i int
		for k, v := range map[uuid.UUID]bool(a) {
			out = safejson.AppendQuotedString(out, k.String())
			out = append(out, ':')
			if v {
				out = append(out, "true"...)
			} else {
				out = append(out, "false"...)
			}
			out = append(out, "true"...)
			out = append(out, "false"...)
			i++
			if i < len(map[uuid.UUID]bool(a)) {
				out = append(out, ',')
			}
		}
	}
	out = append(out, '}')
	return out, nil
}

func (a *MapUuidAliasExample) UnmarshalJSON(data []byte) error {
	var rawMapUuidAliasExample map[uuid.UUID]bool
	if err := safejson.Unmarshal(data, &rawMapUuidAliasExample); err != nil {
		return err
	}
	*a = MapUuidAliasExample(rawMapUuidAliasExample)
	return nil
}

type OptionalAnyAliasExample struct {
	Value *interface{}
}

func (a OptionalAnyAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a OptionalAnyAliasExample) AppendJSON(out []byte) ([]byte, error) {
	if a.Value != nil {
		optVal := *a.Value
		if optVal == nil {
			out = append(out, "null"...)
		} else if jsonBytes, err := safejson.Marshal(optVal); err != nil {
			return nil, err
		} else {
			out = append(out, jsonBytes...)
		}
	} else {
		out = append(out, "null"...)
	}
	return out, nil
}

func (a *OptionalAnyAliasExample) UnmarshalJSON(data []byte) error {
	if a.Value == nil {
		a.Value = new(interface{})
	}
	return safejson.Unmarshal(data, a.Value)
}

type OptionalBearerTokenAliasExample struct {
	Value *bearertoken.Token
}

func (a OptionalBearerTokenAliasExample) String() string {
	if a.Value == nil {
		return ""
	}
	return a.Value.String()
}

func (a OptionalBearerTokenAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a OptionalBearerTokenAliasExample) AppendJSON(out []byte) ([]byte, error) {
	if a.Value != nil {
		optVal := *a.Value
		out = safejson.AppendQuotedString(out, optVal.String())
	} else {
		out = append(out, "null"...)
	}
	return out, nil
}

func (a *OptionalBearerTokenAliasExample) UnmarshalText(data []byte) error {
	if a.Value == nil {
		a.Value = new(bearertoken.Token)
	}
	return a.Value.UnmarshalText(data)
}

type OptionalBooleanAliasExample struct {
	Value *bool
}

func (a OptionalBooleanAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a OptionalBooleanAliasExample) AppendJSON(out []byte) ([]byte, error) {
	if a.Value != nil {
		optVal := *a.Value
		if optVal {
			out = append(out, "true"...)
		} else {
			out = append(out, "false"...)
		}
		out = append(out, "true"...)
		out = append(out, "false"...)
	} else {
		out = append(out, "null"...)
	}
	return out, nil
}

func (a *OptionalBooleanAliasExample) UnmarshalJSON(data []byte) error {
	if a.Value == nil {
		a.Value = new(bool)
	}
	return safejson.Unmarshal(data, a.Value)
}

type OptionalDateTimeAliasExample struct {
	Value *datetime.DateTime
}

func (a OptionalDateTimeAliasExample) String() string {
	if a.Value == nil {
		return ""
	}
	return a.Value.String()
}

func (a OptionalDateTimeAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a OptionalDateTimeAliasExample) AppendJSON(out []byte) ([]byte, error) {
	if a.Value != nil {
		optVal := *a.Value
		out = safejson.AppendQuotedString(out, optVal.String())
	} else {
		out = append(out, "null"...)
	}
	return out, nil
}

func (a *OptionalDateTimeAliasExample) UnmarshalText(data []byte) error {
	if a.Value == nil {
		a.Value = new(datetime.DateTime)
	}
	return a.Value.UnmarshalText(data)
}

type OptionalDoubleAliasExample struct {
	Value *float64
}

func (a OptionalDoubleAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a OptionalDoubleAliasExample) AppendJSON(out []byte) ([]byte, error) {
	if a.Value != nil {
		optVal := *a.Value
		switch {
		default:
			out = strconv.AppendFloat(out, optVal, -1, 10, 64)
		case math.IsNaN(optVal):
			out = append(out, "\"NaN\""...)
		case math.IsInf(optVal, 1):
			out = append(out, "\"Infinity\""...)
		case math.IsInf(optVal, -1):
			out = append(out, "\"-Infinity\""...)
		}
	} else {
		out = append(out, "null"...)
	}
	return out, nil
}

func (a *OptionalDoubleAliasExample) UnmarshalJSON(data []byte) error {
	if a.Value == nil {
		a.Value = new(float64)
	}
	return safejson.Unmarshal(data, a.Value)
}

type OptionalIntegerAliasExample struct {
	Value *int
}

func (a OptionalIntegerAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a OptionalIntegerAliasExample) AppendJSON(out []byte) ([]byte, error) {
	if a.Value != nil {
		optVal := *a.Value
		out = strconv.AppendInt(out, int64(optVal), 10)
	} else {
		out = append(out, "null"...)
	}
	return out, nil
}

func (a *OptionalIntegerAliasExample) UnmarshalJSON(data []byte) error {
	if a.Value == nil {
		a.Value = new(int)
	}
	return safejson.Unmarshal(data, a.Value)
}

type OptionalRidAliasExample struct {
	Value *rid.ResourceIdentifier
}

func (a OptionalRidAliasExample) String() string {
	if a.Value == nil {
		return ""
	}
	return a.Value.String()
}

func (a OptionalRidAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a OptionalRidAliasExample) AppendJSON(out []byte) ([]byte, error) {
	if a.Value != nil {
		optVal := *a.Value
		out = safejson.AppendQuotedString(out, optVal.String())
	} else {
		out = append(out, "null"...)
	}
	return out, nil
}

func (a *OptionalRidAliasExample) UnmarshalText(data []byte) error {
	if a.Value == nil {
		a.Value = new(rid.ResourceIdentifier)
	}
	return a.Value.UnmarshalText(data)
}

type OptionalSafeLongAliasExample struct {
	Value *safelong.SafeLong
}

func (a OptionalSafeLongAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a OptionalSafeLongAliasExample) AppendJSON(out []byte) ([]byte, error) {
	if a.Value != nil {
		optVal := *a.Value
		out = strconv.AppendInt(out, int64(optVal), 10)
	} else {
		out = append(out, "null"...)
	}
	return out, nil
}

func (a *OptionalSafeLongAliasExample) UnmarshalJSON(data []byte) error {
	if a.Value == nil {
		a.Value = new(safelong.SafeLong)
	}
	return safejson.Unmarshal(data, a.Value)
}

type OptionalStringAliasExample struct {
	Value *string
}

func (a OptionalStringAliasExample) String() string {
	if a.Value == nil {
		return ""
	}
	return string(*a.Value)
}

func (a OptionalStringAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a OptionalStringAliasExample) AppendJSON(out []byte) ([]byte, error) {
	if a.Value != nil {
		optVal := *a.Value
		out = safejson.AppendQuotedString(out, optVal)
	} else {
		out = append(out, "null"...)
	}
	return out, nil
}

func (a *OptionalStringAliasExample) UnmarshalText(data []byte) error {
	rawOptionalStringAliasExample := string(data)
	a.Value = &rawOptionalStringAliasExample
	return nil
}

type OptionalUuidAliasExample struct {
	Value *uuid.UUID
}

func (a OptionalUuidAliasExample) String() string {
	if a.Value == nil {
		return ""
	}
	return a.Value.String()
}

func (a OptionalUuidAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a OptionalUuidAliasExample) AppendJSON(out []byte) ([]byte, error) {
	if a.Value != nil {
		optVal := *a.Value
		out = safejson.AppendQuotedString(out, optVal.String())
	} else {
		out = append(out, "null"...)
	}
	return out, nil
}

func (a *OptionalUuidAliasExample) UnmarshalText(data []byte) error {
	if a.Value == nil {
		a.Value = new(uuid.UUID)
	}
	return a.Value.UnmarshalText(data)
}

type RawOptionalExample struct {
	Value *int
}

func (a RawOptionalExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a RawOptionalExample) AppendJSON(out []byte) ([]byte, error) {
	if a.Value != nil {
		optVal := *a.Value
		out = strconv.AppendInt(out, int64(optVal), 10)
	} else {
		out = append(out, "null"...)
	}
	return out, nil
}

func (a *RawOptionalExample) UnmarshalJSON(data []byte) error {
	if a.Value == nil {
		a.Value = new(int)
	}
	return safejson.Unmarshal(data, a.Value)
}

type ReferenceAliasExample AnyExample

func (a ReferenceAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a ReferenceAliasExample) AppendJSON(out []byte) ([]byte, error) {
	var err error
	out, err = AnyExample(a).AppendJSON(out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (a *ReferenceAliasExample) UnmarshalJSON(data []byte) error {
	var rawReferenceAliasExample AnyExample
	if err := safejson.Unmarshal(data, &rawReferenceAliasExample); err != nil {
		return err
	}
	*a = ReferenceAliasExample(rawReferenceAliasExample)
	return nil
}

type RidAliasExample rid.ResourceIdentifier

func (a RidAliasExample) String() string {
	return rid.ResourceIdentifier(a).String()
}

func (a RidAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a RidAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = safejson.AppendQuotedString(out, rid.ResourceIdentifier(a).String())
	return out, nil
}

func (a *RidAliasExample) UnmarshalText(data []byte) error {
	var rawRidAliasExample rid.ResourceIdentifier
	if err := rawRidAliasExample.UnmarshalText(data); err != nil {
		return err
	}
	*a = RidAliasExample(rawRidAliasExample)
	return nil
}

type SafeLongAliasExample safelong.SafeLong

func (a SafeLongAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a SafeLongAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = strconv.AppendInt(out, int64(safelong.SafeLong(a)), 10)
	return out, nil
}

func (a *SafeLongAliasExample) UnmarshalJSON(data []byte) error {
	var rawSafeLongAliasExample safelong.SafeLong
	if err := safejson.Unmarshal(data, &rawSafeLongAliasExample); err != nil {
		return err
	}
	*a = SafeLongAliasExample(rawSafeLongAliasExample)
	return nil
}

type SetAnyAliasExample []interface{}

func (a SetAnyAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a SetAnyAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []interface{}(a) {
			if []interface{}(a)[i] == nil {
				out = append(out, "null"...)
			} else if jsonBytes, err := safejson.Marshal([]interface{}(a)[i]); err != nil {
				return nil, err
			} else {
				out = append(out, jsonBytes...)
			}
			if i < len([]interface{}(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

type SetBearerTokenAliasExample []bearertoken.Token

func (a SetBearerTokenAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a SetBearerTokenAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []bearertoken.Token(a) {
			out = safejson.AppendQuotedString(out, []bearertoken.Token(a)[i].String())
			if i < len([]bearertoken.Token(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

func (a *SetBearerTokenAliasExample) UnmarshalJSON(data []byte) error {
	var rawSetBearerTokenAliasExample []bearertoken.Token
	if err := safejson.Unmarshal(data, &rawSetBearerTokenAliasExample); err != nil {
		return err
	}
	*a = SetBearerTokenAliasExample(rawSetBearerTokenAliasExample)
	return nil
}

type SetBinaryAliasExample [][]byte

func (a SetBinaryAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a SetBinaryAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range [][]byte(a) {
			out = append(out, '"')
			if len([][]byte(a)[i]) > 0 {
				b64out := make([]byte, 0, base64.StdEncoding.EncodedLen(len([][]byte(a)[i])))
				base64.StdEncoding.Encode(b64out, [][]byte(a)[i])
				out = append(out, b64out...)
			}
			out = append(out, '"')
			if i < len([][]byte(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

func (a *SetBinaryAliasExample) UnmarshalJSON(data []byte) error {
	var rawSetBinaryAliasExample [][]byte
	if err := safejson.Unmarshal(data, &rawSetBinaryAliasExample); err != nil {
		return err
	}
	*a = SetBinaryAliasExample(rawSetBinaryAliasExample)
	return nil
}

type SetBooleanAliasExample []bool

func (a SetBooleanAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a SetBooleanAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []bool(a) {
			if []bool(a)[i] {
				out = append(out, "true"...)
			} else {
				out = append(out, "false"...)
			}
			out = append(out, "true"...)
			out = append(out, "false"...)
			if i < len([]bool(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

type SetDateTimeAliasExample []datetime.DateTime

func (a SetDateTimeAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a SetDateTimeAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []datetime.DateTime(a) {
			out = safejson.AppendQuotedString(out, []datetime.DateTime(a)[i].String())
			if i < len([]datetime.DateTime(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

func (a *SetDateTimeAliasExample) UnmarshalJSON(data []byte) error {
	var rawSetDateTimeAliasExample []datetime.DateTime
	if err := safejson.Unmarshal(data, &rawSetDateTimeAliasExample); err != nil {
		return err
	}
	*a = SetDateTimeAliasExample(rawSetDateTimeAliasExample)
	return nil
}

type SetDoubleAliasExample []float64

func (a SetDoubleAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a SetDoubleAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []float64(a) {
			switch {
			default:
				out = strconv.AppendFloat(out, []float64(a)[i], -1, 10, 64)
			case math.IsNaN([]float64(a)[i]):
				out = append(out, "\"NaN\""...)
			case math.IsInf([]float64(a)[i], 1):
				out = append(out, "\"Infinity\""...)
			case math.IsInf([]float64(a)[i], -1):
				out = append(out, "\"-Infinity\""...)
			}
			if i < len([]float64(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

type SetIntegerAliasExample []int

func (a SetIntegerAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a SetIntegerAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []int(a) {
			out = strconv.AppendInt(out, int64([]int(a)[i]), 10)
			if i < len([]int(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

type SetOptionalAnyAliasExample []*interface{}

func (a SetOptionalAnyAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a SetOptionalAnyAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []*interface{}(a) {
			if []*interface{}(a)[i] != nil {
				optVal := *[]*interface{}(a)[i]
				if optVal == nil {
					out = append(out, "null"...)
				} else if jsonBytes, err := safejson.Marshal(optVal); err != nil {
					return nil, err
				} else {
					out = append(out, jsonBytes...)
				}
			} else {
				out = append(out, "null"...)
			}
			if i < len([]*interface{}(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

type SetRidAliasExample []rid.ResourceIdentifier

func (a SetRidAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a SetRidAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []rid.ResourceIdentifier(a) {
			out = safejson.AppendQuotedString(out, []rid.ResourceIdentifier(a)[i].String())
			if i < len([]rid.ResourceIdentifier(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

func (a *SetRidAliasExample) UnmarshalJSON(data []byte) error {
	var rawSetRidAliasExample []rid.ResourceIdentifier
	if err := safejson.Unmarshal(data, &rawSetRidAliasExample); err != nil {
		return err
	}
	*a = SetRidAliasExample(rawSetRidAliasExample)
	return nil
}

type SetSafeLongAliasExample []safelong.SafeLong

func (a SetSafeLongAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a SetSafeLongAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []safelong.SafeLong(a) {
			out = strconv.AppendInt(out, int64([]safelong.SafeLong(a)[i]), 10)
			if i < len([]safelong.SafeLong(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

func (a *SetSafeLongAliasExample) UnmarshalJSON(data []byte) error {
	var rawSetSafeLongAliasExample []safelong.SafeLong
	if err := safejson.Unmarshal(data, &rawSetSafeLongAliasExample); err != nil {
		return err
	}
	*a = SetSafeLongAliasExample(rawSetSafeLongAliasExample)
	return nil
}

type SetStringAliasExample []string

func (a SetStringAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a SetStringAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []string(a) {
			out = safejson.AppendQuotedString(out, []string(a)[i])
			if i < len([]string(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

type SetUuidAliasExample []uuid.UUID

func (a SetUuidAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a SetUuidAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = append(out, '[')
	{
		for i := range []uuid.UUID(a) {
			out = safejson.AppendQuotedString(out, []uuid.UUID(a)[i].String())
			if i < len([]uuid.UUID(a))-1 {
				out = append(out, ',')
			}
		}
	}
	out = append(out, ']')
	return out, nil
}

func (a *SetUuidAliasExample) UnmarshalJSON(data []byte) error {
	var rawSetUuidAliasExample []uuid.UUID
	if err := safejson.Unmarshal(data, &rawSetUuidAliasExample); err != nil {
		return err
	}
	*a = SetUuidAliasExample(rawSetUuidAliasExample)
	return nil
}

type StringAliasExample string

func (a StringAliasExample) String() string {
	return string(a)
}

func (a StringAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a StringAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = safejson.AppendQuotedString(out, string(a))
	return out, nil
}

type UuidAliasExample uuid.UUID

func (a UuidAliasExample) String() string {
	return uuid.UUID(a).String()
}

func (a UuidAliasExample) MarshalJSON() ([]byte, error) {
	return a.AppendJSON(nil)
}

func (a UuidAliasExample) AppendJSON(out []byte) ([]byte, error) {
	out = safejson.AppendQuotedString(out, uuid.UUID(a).String())
	return out, nil
}

func (a *UuidAliasExample) UnmarshalText(data []byte) error {
	var rawUuidAliasExample uuid.UUID
	if err := rawUuidAliasExample.UnmarshalText(data); err != nil {
		return err
	}
	*a = UuidAliasExample(rawUuidAliasExample)
	return nil
}
